1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByToken_migrated(token));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByToken(token));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(refreshToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(refreshToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(bulkWrite_migrated(refreshTokens));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(bulkWrite(refreshTokens));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(token));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByUserId_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByUserId(userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainIdClientIdAndUserId_migrated(domainId, clientId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainIdClientIdAndUserId(domainId, clientId, userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainIdAndUserId_migrated(domainId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainIdAndUserId(domainId, userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateIf_migrated(item, operationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(updateIf(item, operationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClient_migrated(referenceType, referenceId, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClient(referenceType, referenceId, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByTemplate(referenceType, referenceId, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndTemplate_migrated(domain, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndTemplate(domain, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientAndTemplate(referenceType, referenceId, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientAndTemplate_migrated(domain, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientAndTemplate(domain, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClient_migrated(referenceType, referenceId, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClient(referenceType, referenceId, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByTemplate(referenceType, referenceId, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientAndTemplate(referenceType, referenceId, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByToken_migrated(token));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByToken(token));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(accessToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(accessToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(token));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(bulkWrite_migrated(accessTokens));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(bulkWrite(accessTokens));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(findByClientIdAndSubject_migrated(clientId, subject));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(findByClientIdAndSubject(clientId, subject), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(findByClientId_migrated(clientId));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(findByClientId(clientId), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(findByAuthorizationCode_migrated(authorizationCode));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(findByAuthorizationCode(authorizationCode), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByClientId_migrated(clientId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByClientId(clientId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByUserId_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByUserId(userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainIdClientIdAndUserId_migrated(domainId, clientId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainIdClientIdAndUserId(domainId, clientId, userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainIdAndUserId_migrated(domainId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainIdAndUserId(domainId, userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndEmail_migrated(domain, email, strict));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndEmail(domain, email, strict));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndDomain_migrated(domain, username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsernameAndDomain(domain, username));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndSource_migrated(referenceType, referenceId, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsernameAndSource(referenceType, referenceId, username, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByExternalIdAndSource(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByReference_migrated(referenceType, referenceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByReference(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByApplication_migrated(domain, application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByApplication(domain, application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(statistics_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(statistics(query));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndSource_migrated(referenceType, referenceId, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsernameAndSource(referenceType, referenceId, username, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByExternalIdAndSource(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(referenceId, referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(referenceId, referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByMember_migrated(memberId, memberType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByMember(memberId, memberType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCriteria_migrated(referenceType, referenceId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCriteria(referenceType, referenceId, criteria));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByReferenceAndMember_migrated(referenceType, referenceId, memberType, memberId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByReferenceAndMember(referenceType, referenceId, memberType, memberId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(count_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(count());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByHrids_migrated(hrids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByHrids(hrids));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByMember_migrated(memberId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByMember(memberId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByName_migrated(referenceType, referenceId, groupName));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, groupName));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, group));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, group));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByReferenceId_migrated(environmentId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByReferenceId(environmentId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(search_migrated(environmentId, query));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(search(environmentId, query));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByHrid_migrated(referenceType, referenceId, hrid));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByHrid(referenceType, referenceId, hrid));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByCriteria_migrated(criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByCriteria(criteria));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomainAndClient_migrated(domain, client, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomainAndClient(domain, client, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByResources_migrated(resources));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByResources(resources));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndClientAndUser_migrated(domain, client, userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndClientAndUser(domain, client, userId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndClientAndResources_migrated(domain, client, resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndClientAndResources(domain, client, resource));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resource));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resource));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndName_migrated(domain, name));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndName(domain, name));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(par));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(par));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, role));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, role));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByNameAndAssignableType_migrated(referenceType, referenceId, name, assignableType));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByNameAndAssignableType(referenceType, referenceId, name, assignableType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByNamesAndAssignableType_migrated(referenceType, referenceId, name, assignableType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByNamesAndAssignableType(referenceType, referenceId, name, assignableType));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(referenceType, referenceId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(domain, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(domain, query, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndKey_migrated(domain, key));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndKey(domain, key));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndKeys_migrated(domain, keys));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndKeys(domain, keys));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCriteria_migrated(referenceType, referenceId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCriteria(referenceType, referenceId, criteria));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndResource_migrated(domain, resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndResource(domain, resource));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByResources_migrated(resources));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByResources(resources));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByResource_migrated(resource));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByResource(resource));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(referenceType, referenceId, userId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUsername_migrated(referenceType, referenceId, username));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUsername(referenceType, referenceId, username));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCredentialId_migrated(referenceType, referenceId, credentialId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCredentialId(referenceType, referenceId, credentialId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByUserId_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByUserId(referenceType, referenceId, userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByAaguid_migrated(referenceType, referenceId, aaguid));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByAaguid(referenceType, referenceId, aaguid));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(referenceType, referenceId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUserAndClient_migrated(domain, userId, clientId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndUserAndClient(domain, userId, clientId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUser_migrated(domain, user));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndUser(domain, user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(upsert_migrated(scopeApproval));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(upsert(scopeApproval));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainAndScopeKey_migrated(domain, scope));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainAndScopeKey(domain, scope));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainAndUserAndClient_migrated(domain, user, client));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainAndUserAndClient(domain, user, client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainAndUser_migrated(domain, user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainAndUser(domain, user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(domain, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(domain, query, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCertificate_migrated(certificate));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCertificate(certificate));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdentityProvider_migrated(identityProvider));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdentityProvider(identityProvider));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByFactor_migrated(factor));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByFactor(factor));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndExtensionGrant_migrated(domain, extensionGrant));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndExtensionGrant(domain, extensionGrant));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(count_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(count());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByDomain(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientId_migrated(domain, clientId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientId(domain, clientId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(count_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(count());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByApplication_migrated(referenceType, referenceId, application));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByApplication(referenceType, referenceId, application));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findLastByTransactionId_migrated(transactionId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findLastByTransactionId(transactionId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByTransactionId_migrated(transactionId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByTransactionId(transactionId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(context));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(transactionId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId, version));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(transactionId, version));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCriteria_migrated(referenceType, referenceId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCriteria(referenceType, referenceId, criteria));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(find_migrated());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(find());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(collectionExists_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(collectionExists());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteCollection_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteCollection());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationCode));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(authorizationCode));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(delete_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(delete(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByCode_migrated(code));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByCode(code));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByCriteria_migrated(criteria));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByCriteria(criteria));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(criteria));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(criteria));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByTimeFrame_migrated(from, to));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByTimeFrame(from, to));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, identityProviderId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, identityProviderId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestObject));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(requestObject));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(purgeExpiredData_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(repository.findById(createdGroup.getId())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group2)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByMember(member1)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByMember(member1)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByMember(member2)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByMember(member2)).collectList
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(buildGroup())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(item)).block
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).collectList
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).collectList
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(buildGroup())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(item)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID, 0, 20)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID, 0, 5)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID, 1, 5)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(buildGroup())).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByIdIn(ids)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByIdIn(ids)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(group)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicyOtherDomain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicyOtherDomain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy3)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(accessPolicy3)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByResources(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2"))).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByResources(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2"))).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(repository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(buildEmail())).block
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID)).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID)).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(email)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifier)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifier)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifier)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifierToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.update(alertNotifierCreated)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifierToCreate1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifierToCreate2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifierToCreate1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(alertNotifierToCreate2)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(botDetection)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(bdectection)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(botDetection)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(botDetection)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(buildForm())).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(form)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTrigger)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTrigger)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTrigger)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.update(alertTriggerCreated)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(alertTriggerToCreate2)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(application)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(application)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(application)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.create(app4)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAll()).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(otherDomain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domainToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.update(domainCreated)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainRepository.create(domain)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoring)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialRepository.create(credential)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entrypointRepository.create(entrypoint)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entrypointRepository.create(entrypoint)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entrypointRepository.create(entrypoint)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entrypointRepository.create(entrypoint)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationRepository.create(installation)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationRepository.create(installation)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationRepository.create(installation)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserRepository.create(user2)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.create(organization)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.create(organization)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.create(organization)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationCreated.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationCreated.getId())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.create(organization)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.create(organization2)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(organizationRepository.findByHrids(Collections.singletonList("Hrid1"))).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(organizationRepository.findByHrids(Collections.singletonList("Hrid1"))).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow2)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findAll(ReferenceType.DOMAIN, "DOMAIN1")).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findAll(ReferenceType.DOMAIN, "DOMAIN1")).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow2)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(ReferenceType.DOMAIN, "DOMAIN1", "APP1")).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(ReferenceType.DOMAIN, "DOMAIN1", "APP1")).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(flowCreated.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(flowCreated.getId())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(factorRepository.create(factor)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(factorRepository.create(factor)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(factorRepository.create(factor)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(factorRepository.create(factor)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(taskRepository.create(task)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(taskRepository.create(task)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(taskRepository.create(task)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(taskRepository.create(task)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(membership)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(membership)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipRepository.findByReference(ORGANIZATION_ID, ReferenceType.ORGANIZATION)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipRepository.findByReference(ORGANIZATION_ID, ReferenceType.ORGANIZATION)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(membership)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipRepository.findByMember("user#1", MemberType.USER)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipRepository.findByMember("user#1", MemberType.USER)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(membership)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(membership)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(groupMembership)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(reporter)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(reporter)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.update(updatableReporter)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(reporter)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(reporter)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findAll()).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findAll()).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(reporter)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByDomain(domain)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByDomain(domain)).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateRepository.create(certificate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateRepository.create(certificate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateRepository.create(certificate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateRepository.create(certificate)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user4)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user5)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user4)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.create(user5)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(environment)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(env)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(env)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(envCreated.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(envCreated.getId())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(environment)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(buildEnv())).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(environmentRepository.findAll(FIXED_REF_ID)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findAll(FIXED_REF_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(buildEnv())).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID)).blockFirst
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticationFlowContextRepository.create(entity)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(roleRepository.findAll(ReferenceType.DOMAIN, "testDomain")).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findAll(ReferenceType.DOMAIN, "testDomain")).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role4)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(token.getToken())))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(accessTokenRepository.create(token).toCompletable()).then(RxJava2Adapter.singleToMono(accessTokenRepository.countByClientId("my-client-id-count")))).test
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.create(token).toCompletable()).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.create(token).toCompletable()).then(RxJava2Adapter.singleToMono(accessTokenRepository.countByClientId("my-client-id-count")))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id"))).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id"))).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventRepository.create(event)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventRepository.create(eventBefore)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventRepository.create(eventAfter)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventRepository.create(event)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventRepository.create(event)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider3)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll(ReferenceType.DOMAIN, "testDomain")).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll(ReferenceType.DOMAIN, "testDomain")).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.create(tag)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.create(tag)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.create(tag)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.create(tag)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(attempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(attempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(unexpectedAttempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(attempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(attempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(unexpectedAttempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(attempt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(attempt)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(scopeRepository.findByDomainAndKeys("testDomain", Arrays.asList("one", "two", "three"))).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeRepository.findByDomainAndKeys("testDomain", Arrays.asList("one", "two", "three"))).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeRepository.create(scope)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authorizationCodeRepository.create(authorizationCode)).block
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | authorizationCodeRepository.create(authorizationCode).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(authorizationCodeRepository.delete(code)))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource2)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource1)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource2)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource3)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource4)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(resource5)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(par)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(par)).then(RxJava2Adapter.maybeToMono(repository.findById(id)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(par)).then(RxJava2Adapter.maybeToMono(repository.findById(id))).then().then(RxJava2Adapter.completableToMono(repository.delete(id)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(par)).then(RxJava2Adapter.maybeToMono(repository.findById(id))).then().then(RxJava2Adapter.completableToMono(repository.delete(id))).then(RxJava2Adapter.maybeToMono(repository.findById(id)))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.create(token).toCompletable()).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.create(token).toCompletable()).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete("my-token")))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.create(token).toCompletable()).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete("my-token"))).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id"))).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id"))).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token")))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(permissionTicket)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(permissionTicket)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(permissionTicket)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.create(excludedElement)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.createIndex(document, indexOptions))).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(SystemTaskMongo::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(SystemTaskMongo::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.insertOne(task))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(task.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.insertOne(task))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(task.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.insertOne(task))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(task.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(task.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(task.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(systemTaskCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(systemTaskCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(toBsonFilter_migrated(logicalOr, filter));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(or(filterCriteria))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(or(filterCriteria))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(and(filterCriteria))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(and(filterCriteria))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(accessPoliciesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_RESOURCE, resource)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(accessPoliciesCollection.find(in(FIELD_RESOURCE, resources))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(accessPolicy.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(accessPolicy.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(accessPolicy.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(accessPolicy.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(accessPolicy.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(accessPolicy.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(accessPoliciesCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(accessPoliciesCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(identitiesCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(identitiesCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.insertOne(identityProvider))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(identityProvider.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.insertOne(identityProvider))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(identityProvider.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.insertOne(identityProvider))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(identityProvider.getId())).single
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("Identity provider must be present for create"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("Identity provider must be present for create"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(identityProvider.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(identityProvider.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(identityProvider.getId())).single
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("Identity provider must be present for update"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("Identity provider must be present for update"))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(identitiesCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(identitiesCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find(eq(FIELD_CERTIFICATE, certificate))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find(eq(FIELD_IDENTITIES, identityProvider))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find(eq(FIELD_FACTORS, factor))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_GRANT_TYPES, extensionGrant)))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(applicationsCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.insertOne(application))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(application.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.insertOne(application))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(application.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.insertOne(application))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(application.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(application.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(application.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(application.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(applicationsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(applicationsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(eq("organizationId", organizationId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(entrypoint))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(entrypoint.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(entrypoint))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(entrypoint.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(entrypoint))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(entrypoint.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(entrypoint.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(entrypoint.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(entrypoint.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(parCollection.insertOne(convert(par)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(par.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(parCollection.insertOne(convert(par)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(par.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(parCollection.findOneAndDelete(eq(FIELD_ID, id))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(usersCollection.find(mongoQuery)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(usersStatusRepartition_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first(Collections.emptyMap()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(registrationsStatusRepartition_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first(Collections.emptyMap()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("An error has occurred while searching users with filter criteria", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(usersCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne((T)user))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(user.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne((T)user))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(user.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne((T)user))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(user.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(user.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(user.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(user.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(policiesCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)))).isEmpty()).map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->!isEmpty)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)))).isEmpty()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)))).isEmpty
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(mongoOperations.getCollection(COLLECTION_NAME).drop()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.insertOne(scope))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(scope.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.insertOne(scope))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(scope.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.insertOne(scope))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(scope.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(scope.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(scope.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(scope.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(scopesCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(scopesCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), in(FIELD_KEY, keys)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType == null ? null : referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(rolesCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.insertOne(role))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(role.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.insertOne(role))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(role.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.insertOne(role))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(role.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(role.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(role.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(role.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(rolesCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(rolesCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), in(FIELD_NAME, names), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(reportersCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(reportersCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.insertOne(reporter))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(reporter.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.insertOne(reporter))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(reporter.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.insertOne(reporter))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(reporter.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(reporter.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(reporter.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(reporter.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(reportersCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(reportersCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(monitoring)))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->monitoring)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(monitoring)))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updateResult)->monitoring)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring)))).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(and(filters))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(and(eq(FIELD_MEMBER_ID, memberId), eq(FIELD_MEMBER_TYPE, memberType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId)).map(RxJavaReactorMigrationUtil.toJdkFunction((filter)->and(eqReference, filter))).switchIfEmpty(Mono.just(eqReference)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((filter)->RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(filter))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (filter)->RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(filter)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.insertOne(membership))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->convert(membership)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.insertOne(membership))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->convert(membership)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.insertOne(membership))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->convert(membership)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->convert(membership)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(membershipsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(membershipsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find().first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find().first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(installation));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(installation)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(installation.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(installation)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(installation.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(installation)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(installation.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(installation));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation)))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(installation.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation)))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(installation.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(installation.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId), eq(FIELD_USER_ID, userId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo))).flatMap((success)->RxJava2Adapter.singleToMono(_findById(scopeApprovalMongo.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo))).flatMap((success)->RxJava2Adapter.singleToMono(_findById(scopeApprovalMongo.getId())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo))).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (success)->RxJava2Adapter.singleToMono(_findById(scopeApprovalMongo.getId()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo))).flatMap((updateResult)->RxJava2Adapter.singleToMono(_findById(scopeApprovalMongo.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo))).flatMap((updateResult)->RxJava2Adapter.singleToMono(_findById(scopeApprovalMongo.getId())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo))).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (updateResult)->RxJava2Adapter.singleToMono(_findById(scopeApprovalMongo.getId()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_SCOPE, scope)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(scopeApprovalsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(scopeApprovalsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user), eq(FIELD_CLIENT_ID, client)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(_findById_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(authorizationCode.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(authorizationCode.getId())).single
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(emailsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.insertOne(email))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(email.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.insertOne(email))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(email.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.insertOne(email))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(email.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(email.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(email.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(email.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(emailsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(emailsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(botDetectionMongoCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(botDetectionMongoCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(botDetectionId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.insertOne(entity))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(entity.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.insertOne(entity))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(entity.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.insertOne(entity))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(entity.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(entity.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(entity.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(entity.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(botDetectionMongoCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(botDetectionMongoCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_APPLICATION, application)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.insertOne(flow))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(flow.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.insertOne(flow))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(flow.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.insertOne(flow))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(flow.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(flow.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(flow.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(flow.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(flowsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(flowsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(eventsCollection.find(and(filters))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert), BackpressureStrategy.BUFFER).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert), BackpressureStrategy.BUFFER).next()))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.insertOne(event))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(event.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.insertOne(event))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(event.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.insertOne(event))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(event.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(event.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(event.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(event.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(eventsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(eventsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(environment));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(environment)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(environment.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(environment)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(environment.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(environment)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(environment.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(environment));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment)))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(environment.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment)))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(environment.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(environment.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(loginAttempt.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(loginAttempt.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(loginAttempt.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(loginAttempt.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(loginAttempt.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(loginAttempt.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(loginAttemptsCollection.deleteOne(eq(FIELD_ID, id))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(loginAttemptsCollection.deleteOne(query(criteria))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(certificatesCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(certificatesCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(certificateId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.insertOne(certificate))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(certificate.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.insertOne(certificate))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(certificate.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.insertOne(certificate))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(certificate.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(certificate.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(certificate.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(certificate.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(certificatesCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(certificatesCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(authContextCollection.insertOne(contextMongo))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(contextMongo.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(authContextCollection.insertOne(contextMongo))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(contextMongo.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(authContextCollection.deleteMany(eq(FIELD_TRANSACTION_ID, transactionId))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(authContextCollection.deleteOne(and(eq(FIELD_TRANSACTION_ID, transactionId), eq(FIELD_VERSION, version)))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(eqReference)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(query)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertTrigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertTrigger)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(alertTrigger.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertTrigger)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(alertTrigger.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertTrigger)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(alertTrigger.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertTrigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(alertTriggerMongo.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(alertTriggerMongo.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(alertTriggerMongo.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(requestObject.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(requestObject.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(requestObjectCollection.findOneAndDelete(eq(FIELD_ID, id))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(formsCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.insertOne(page))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(page.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.insertOne(page))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(page.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.insertOne(page))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(page.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(page.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(page.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(page.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(formsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(formsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(eqReference)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(and(eqReference, query))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertNotifier));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertNotifier)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(alertNotifier.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertNotifier)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(alertNotifier.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertNotifier)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(alertNotifier.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertNotifier));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(alertNotifierMongo.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(alertNotifierMongo.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(alertNotifierMongo.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(resourceCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(res))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(res.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(res))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(res.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(res))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(res.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(ticket));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(permissionTicket.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(permissionTicket.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(permissionTicket.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(ticket));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(permissionTicket.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(permissionTicket.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(permissionTicket.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(permissionTicketCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(permissionTicketCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(tagsCollection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.insertOne(tag))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(tag.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.insertOne(tag))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(tag.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.insertOne(tag))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(tag.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(tag.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(tag.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(tag.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(tagsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(tagsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(factorsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(factorsCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(factorId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.insertOne(authenticator))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.insertOne(authenticator))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.insertOne(authenticator))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(authenticator.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(factorsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(factorsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CREDENTIAL_ID, credentialId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.insertOne(credential))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(credential.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.insertOne(credential))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(credential.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.insertOne(credential))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(credential.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(credential.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(credential.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(credential.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(credentialsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(credentialsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_AAGUID, aaguid)))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(extensionGrantsCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(tokenGranterId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(extensionGrant.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(extensionGrant.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(extensionGrant.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(extensionGrant.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(extensionGrant.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(extensionGrant.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(extensionGrantsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(extensionGrantsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(resource))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(resource.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(resource))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(resource.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(resource))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(resource.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(resourceMongo.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(resourceMongo.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(resourceMongo.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(resourceCollection.find(in(FIELD_ID, resources))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), in(FIELD_ID, resources)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(refreshToken.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(refreshToken.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(refreshTokenCollection.bulkWrite(convert(refreshTokens))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(refreshTokenCollection.deleteOne(eq(FIELD_TOKEN, token))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(refreshTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId)))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(in(HRID_KEY, hrids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organization));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(organization)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(organization.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(organization)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(organization.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(organization)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(organization.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organization));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization)))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(organization.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization)))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(organization.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(organization.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(collection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken)))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(accessToken.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken)))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(accessToken.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(accessTokenCollection.bulkWrite(convert(accessTokens))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(accessTokenCollection.findOneAndDelete(eq(FIELD_TOKEN, token))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(accessTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.from(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId)))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(groupsCollection.find(eq(FIELD_MEMBERS, memberId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(groupsCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.insertOne(group))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(group.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.insertOne(group))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(group.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.insertOne(group))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(group.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(group.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(group.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(group.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(groupsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(groupsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(mongoQuery)).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(mongoQuery)).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(toBsonFilter(criteria.isLogicalOR(), eqAlertEnabled)).switchIfEmpty(Mono.just(new BsonDocument())).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((filter)->RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(filter))))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(toBsonFilter(criteria.isLogicalOR(), eqAlertEnabled)).switchIfEmpty
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (filter)->RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(filter)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.insertOne(domain))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(domain.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.insertOne(domain))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(domain.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.insertOne(domain))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(domain.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(domain.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(domain.getId())).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(domain.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(domainsCollection.deleteOne(eq(FIELD_ID, id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.from(domainsCollection.deleteOne(eq(FIELD_ID, id)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoDatabase.listCollectionNames()), BackpressureStrategy.BUFFER).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).apply(z)), BackpressureStrategy.BUFFER))).blockingSubscribe
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoDatabase.listCollectionNames()), BackpressureStrategy.BUFFER).flatMap
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | (z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).apply(z)), BackpressureStrategy.BUFFER)
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(organizationRepository.findByHrids(hrids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(organizationRepository.findByHrids(hrids)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> identities = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(identitiesRepository.findAllByOrganizationId(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Identity::getIdentity)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identitiesRepository.findAllByOrganizationId(organizationId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> domains = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(domainRestrictionRepository.findAllByOrganizationId(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.DomainRestriction::getDomainRestriction)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRestrictionRepository.findAllByOrganizationId(organizationId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> hrids = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(hridsRepository.findAllByOrganizationId(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Hrid::getHrid)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(hridsRepository.findAllByOrganizationId(organizationId)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(hrids), RxJavaReactorMigrationUtil.toJdkBiFunction((org,hrid)->{
    LOGGER.debug("findById({}) fetch {} hrids", organizationId, hrid.size());
    org.setHrids(hrid);
    return org;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(hrids), RxJavaReactorMigrationUtil.toJdkBiFunction((org,hrid)->{
    LOGGER.debug("findById({}) fetch {} hrids", organizationId, hrid.size());
    org.setHrids(hrid);
    return org;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
}))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
}))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(hrids), RxJavaReactorMigrationUtil.toJdkBiFunction((org,hrid)->{
    LOGGER.debug("findById({}) fetch {} hrids", organizationId, hrid.size());
    org.setHrids(hrid);
    return org;
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organization));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(insert.then(storeIdentities).then(storeDomainRestrictions).then(storeHrids).as(trx::transactional).then(maybeToMono(findById(organization.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organization));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(update.then(storeIdentities).then(storeDomainRestrictions).then(storeHrids).as(trx::transactional).then(maybeToMono(findById(organization.getId())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(organizationId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteDomainRestrictions).then(deleteIdentities).then(deleteHrids).as(trx::transactional)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByHrids_migrated(hrids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByHrids(hrids));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByOrganizationId_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByOrganizationId(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByOrganizationId_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByOrganizationId(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByOrganizationId_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByOrganizationId(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(referenceType, referenceId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcBotDetection.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcBotDetection.class).matching(from(where(REFERENCE_ID_FIELD).is(referenceId).and(where(REF_TYPE_FIELD).is(referenceType.name())))).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcBotDetection.class).matching(from(where(ID_FIELD).is(id))).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcBotDetection.class).matching(from(where(ID_FIELD).is(id))).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(dbClient.delete().from(JdbcBotDetection.class).matching(from(where(ID_FIELD).is(id))).fetch().rowsUpdated()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcSystemTask.class).project("*").matching(from(where("id").is(id))).as(JdbcSystemTask.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcSystemTask.class).project("*").matching(from(where("id").is(id))).as(JdbcSystemTask.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByDomain(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCertificate_migrated(certificate));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCertificate(certificate));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByFactor_migrated(factor));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByFactor(factor));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByDomainAndGrant_migrated(domain, grant));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByDomainAndGrant(domain, grant));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux()))).collectList().flatMap((content)->RxJava2Adapter.singleToMono(countByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<>(content, page, count)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (scope)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(countByDomain(domain)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(dbClient.execute("select count(s." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")) + ") from scopes s where s.domain = :domain").bind("domain", domain).as(Long.class).fetch().first()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<>(data, page, total)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (scope)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(completeWithClaims_migrated(maybeScope, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> scopeClaims = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(claimRepository.findByScopeId(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcScope.Claims::getClaim)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(claimRepository.findByScopeId(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeScope).zipWith(RxJava2Adapter.maybeToMono(scopeClaims), RxJavaReactorMigrationUtil.toJdkBiFunction((scope,claims)->{
    LOGGER.debug("findById({}) fetch {} scopeClaims", id, claims == null ? 0 : claims.size());
    scope.setClaims(claims);
    return scope;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeScope).zipWith(RxJava2Adapter.maybeToMono(scopeClaims), RxJavaReactorMigrationUtil.toJdkBiFunction((scope,claims)->{
    LOGGER.debug("findById({}) fetch {} scopeClaims", id, claims == null ? 0 : claims.size());
    scope.setClaims(claims);
    return scope;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeScope).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeScope).zipWith(RxJava2Adapter.maybeToMono(scopeClaims), RxJavaReactorMigrationUtil.toJdkBiFunction((scope,claims)->{
    LOGGER.debug("findById({}) fetch {} scopeClaims", id, claims == null ? 0 : claims.size());
    scope.setClaims(claims);
    return scope;
}))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).is(key)))).as(JdbcScope.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()).as(RxJava2Adapter::maybeToMono)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).in(keys)))).as(JdbcScope.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux()))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (scope)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()).as(RxJava2Adapter::maybeToMono))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()).as(RxJava2Adapter::maybeToMono))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteClaims.then(action).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteClaims.then(action).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(deleteClaim.then(delete).as(trx::transactional)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByScopeId_migrated(scope));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByScopeId(scope));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userRepository.findByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(userRepository.countByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.countByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(app)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()))).collectList().flatMap((list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.execute(databaseDialectHelper.buildFindUserByReferenceAndEmail(DOMAIN, domain, email, strict)).bind("refId", domain).bind("refType", DOMAIN.name()).bind("email", email).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsername(ReferenceType.DOMAIN.name(), domain, username)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findByUsername(ReferenceType.DOMAIN.name(), domain, username)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(referenceType.name(), referenceId, userId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(referenceType.name(), referenceId, userId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(usersStatusRepartition_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(locked).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(inactive).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(locked).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(inactive).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(disabled).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(locked).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(inactive).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(total).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(registrationsStatusRepartition_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(total).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completed).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteChildEntities(id)).as(trx::transactional)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(completeUser_migrated(userToComplete));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(userToComplete).flatMap((user)->RxJava2Adapter.flowableToFlux(roleRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(entitlementRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(addressesRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(attributesRepository.findByUserId(user.getId())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(userToComplete).flatMap((user)->RxJava2Adapter.flowableToFlux(roleRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(entitlementRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(addressesRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(attributesRepository.findByUserId(user.getId())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByUserId(user.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(entitlementRepository.findByUserId(user.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(addressesRepository.findByUserId(user.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(attributesRepository.findByUserId(user.getId())).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByReference_migrated(refType, refId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByReference(refType, refId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByClient_migrated(refType, refId, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByClient(refType, refId, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refType, refId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refType, refId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByExternalIdAndSource_migrated(refType, refId, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByExternalIdAndSource(refType, refId, externalId, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndSource_migrated(refType, refId, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsernameAndSource(refType, refId, username, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsername_migrated(refType, refId, username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsername(refType, refId, username));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(refType, refId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(refType, refId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countLockedUser_migrated(refType, refId, notLocked, lockedUntil));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countLockedUser(refType, refId, notLocked, lockedUntil));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countLockedUserByClient_migrated(refType, refId, client, notLocked, lockedUntil));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countLockedUserByClient(refType, refId, client, notLocked, lockedUntil));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countDisabledUser_migrated(refType, refId, enabled));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countDisabledUser(refType, refId, enabled));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countDisabledUserByClient_migrated(refType, refId, client, enabled));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countDisabledUserByClient(refType, refId, client, enabled));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countInactiveUser_migrated(refType, refId, threshold));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countInactiveUser(refType, refId, threshold));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countInactiveUserByClient_migrated(refType, refId, client, threshold));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countInactiveUserByClient(refType, refId, client, threshold));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countPreRegisteredUser_migrated(refType, refId, preRegister));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countPreRegisteredUser(refType, refId, preRegister));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countRegistrationCompletedUser_migrated(refType, refId, preRegister, completed));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countRegistrationCompletedUser(refType, refId, preRegister, completed));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertResult.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertResult.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(reporterRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByEntrypoint_migrated(entrypointId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByEntrypoint(entrypointId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(entrypointRepository.findById(id, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeTags(z))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve entrypoint with id={} and organization={}", id, organizationId, error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(entrypointRepository.findById(id, organizationId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeTags(z))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(entrypointRepository.findAllByOrganization(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((entrypoint)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeTags(entrypoint)).flux())))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(entrypointRepository.findAllByOrganization(organizationId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (entrypoint)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeTags(entrypoint)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeTags(entrypoint)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(completeTags_migrated(entrypoint));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(tagRepository.findAllByEntrypoint(entrypoint.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEntrypoint.Tag::getTag)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    entrypoint.setTags(tags);
    return entrypoint;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(tagRepository.findAllByEntrypoint(entrypoint.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEntrypoint.Tag::getTag)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    entrypoint.setTags(tags);
    return entrypoint;
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(tagRepository.findAllByEntrypoint(entrypoint.getId())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(entrypointRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeTags(z))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve entrypoint with id={} ", id, error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(entrypointRepository.findById(id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeTags(z))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteTags(item.getId()).then(action).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteTags(item.getId()).then(action).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteTags(id).then(delete).as(trx::transactional).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete entrypoint with id {}", id, error))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByOrganization_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByOrganization(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByEnvironmentId_migrated(environmentId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByEnvironmentId(environmentId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(parRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve PushedAuthorizationRequest with id {}", id, error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create PushedAuthorizationRequest with id {}", par.getId(), error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertResult.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertResult.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(serviceResourceRepository.deleteById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(serviceResourceRepository.findByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(serviceResourceRepository.findByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.membershipRepository.findByReference(referenceId, referenceType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.membershipRepository.findByReference(referenceId, referenceType.name())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.membershipRepository.findByMember(memberId, memberType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.membershipRepository.findByMember(memberId, memberType.name())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcMembership.class).matching(from(whereClause)).as(JdbcMembership.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.membershipRepository.findByReferenceAndMember(referenceId, referenceType.name(), memberId, memberType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.membershipRepository.findByReferenceAndMember(referenceId, referenceType.name(), memberId, memberType.name())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(membershipRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(membershipRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(membershipRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(membershipRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(referenceId, referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(referenceId, referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByMember_migrated(memberId, memberType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByMember(memberId, memberType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByReferenceAndMember_migrated(referenceId, referenceType, memberId, memberType));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByReferenceAndMember(referenceId, referenceType, memberId, memberType));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndName_migrated(domain, name));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndName(domain, name));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByGroup_migrated(group));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByGroup(group));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUserAndClient_migrated(domain, user, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndUserAndClient(domain, user, client));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUser_migrated(domain, user));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndUser(domain, user));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndUserAndClientAndScope_migrated(domain, user, client, scope));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndUserAndClientAndScope(domain, user, client, scope));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByGroup_migrated(group));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByGroup(group));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByDomain(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain, page));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain, page));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByResource_migrated(resource));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByResource(resource));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndResource_migrated(domain, resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndResource(domain, resource));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByResourceIn_migrated(resources));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByResourceIn(resources));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(factorRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(factorRepository.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorRepository.findByDomain(domain)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(factorRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.factorRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.factorRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.factorRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(factorRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByCode_migrated(code, now));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByCode(code, now));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByDomain(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(resources));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(resources));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndClientAndUser_migrated(domain, client, user));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndClientAndUser(domain, client, user));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndClientAndResources_migrated(domain, client, resources));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndClientAndResources(domain, client, resources));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserIdAndResource_migrated(domain, client, user, resource));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserIdAndResource(domain, client, user, resource));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByIdAndOrganization_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByIdAndOrganization(id, organizationId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByOrganization_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByOrganization(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByApplicationId_migrated(applicationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByApplicationId(applicationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(credentialRepository.findByUserId(referenceType.name(), referenceId, userId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByUserId(referenceType.name(), referenceId, userId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(credentialRepository.findByUsername(referenceType.name(), referenceId, username)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByUsername(referenceType.name(), referenceId, username)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType.name(), referenceId, credentialId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType.name(), referenceId, credentialId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve credential for Id {}", id, error)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve credential for Id {}", id, error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.credentialRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.credentialRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.credentialRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(credentialRepository.deleteById(id).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete credential for Id {}", id, error))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(referenceType, referenceId, userId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUsername_migrated(referenceType, referenceId, username));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUsername(referenceType, referenceId, username));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCredentialId_migrated(referenceType, referenceId, credentialId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCredentialId(referenceType, referenceId, credentialId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByNodeIdAndType_migrated(nodeId, type));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByNodeIdAndType(nodeId, type));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByTypeAndTimeFrame_migrated(type, from, to));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByTypeAndTimeFrame(type, from, to));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findResourcePage_migrated(domain, page, size, whereClause));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((res)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())).flux()), MAX_CONCURRENCY)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(resourceRepository.countByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Resource>(content, page, count))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((res)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())).flux()), MAX_CONCURRENCY)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(resourceRepository.countByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Resource>(content, page, count))))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((res)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())).flux()), MAX_CONCURRENCY)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (res)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resourceRepository.countByDomain(domain)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(completeWithScopes_migrated(maybeResource, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> scopes = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(resourceScopeRepository.findAllByResourceId(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcResource.Scope::getScope)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceScopeRepository.findAllByResourceId(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeResource).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((res,scope)->{
    LOGGER.debug("findById({}) fetch {} resource scopes", id, scope == null ? 0 : scope.size());
    res.setResourceScopes(scope);
    return res;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeResource).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((res,scope)->{
    LOGGER.debug("findById({}) fetch {} resource scopes", id, scope == null ? 0 : scope.size());
    res.setResourceScopes(scope);
    return res;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeResource).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeResource).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((res,scope)->{
    LOGGER.debug("findById({}) fetch {} resource scopes", id, scope == null ? 0 : scope.size());
    res.setResourceScopes(scope);
    return res;
}))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(resourceRepository.findByIdIn(resources)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((resource)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceRepository.findByIdIn(resources)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (resource)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(resourceRepository.findByDomainAndClientAndUser(domain, client, userId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((resource)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceRepository.findByDomainAndClientAndUser(domain, client, userId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (resource)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(resourceRepository.findByDomainAndClientAndResources(domain, client, resources)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((resource)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceRepository.findByDomainAndClientAndResources(domain, client, resources)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (resource)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceRepository.findByDomainAndClientAndUserIdAndResource(domain, client, userId, resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), resource)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourceRepository.findByDomainAndClientAndUserIdAndResource(domain, client, userId, resource)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourceRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertResult.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertResult.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteScopes.then(updateResource).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteScopes.then(updateResource).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteScopes).as(trx::transactional)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByResourceId_migrated(resourceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByResourceId(resourceId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByApplication_migrated(referenceType, referenceId, appId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByApplication(referenceType, referenceId, appId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(requestObjectRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve RequestObject with id {}", id, error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create requestObject with id {}", requestObject.getId(), error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByRole_migrated(roleId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByRole(roleId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all().collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((content)->content.stream().map(this::toAccessPolicy).collect(Collectors.toList()))).flatMap((content)->RxJava2Adapter.singleToMono(accessPolicyRepository.countByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<AccessPolicy>(content, page, count)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(accessPolicyRepository.countByDomain(domain)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(domain, resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(domain, resource)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByResourceIn(resources)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByResourceIn(resources)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(accessPolicyRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(accessPolicyRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessPolicyRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(accessPolicyRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUserAndClient(domain, userId, clientId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUserAndClient(domain, userId, clientId)).filter
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUser(domain, user)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUser(domain, user)).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeApprovalRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeApprovalRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByEnvironmentId_migrated(envId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByEnvironmentId(envId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(formRepository.findAll(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formRepository.findAll(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(formRepository.findAll(referenceType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formRepository.findAll(referenceType.name())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(formRepository.findByClient(referenceType.name(), referenceId, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formRepository.findByClient(referenceType.name(), referenceId, client)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findByTemplate(referenceType.name(), referenceId, template)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findByTemplate(referenceType.name(), referenceId, template)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findByClientAndTemplate(referenceType.name(), referenceId, client, template)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findByClientAndTemplate(referenceType.name(), referenceId, client, template)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findById(referenceType.name(), referenceId, id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findById(referenceType.name(), referenceId, id)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.formRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.formRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.formRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(formRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClient_migrated(referenceType, referenceId, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClient(referenceType, referenceId, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByTemplate(referenceType, referenceId, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientAndTemplate(referenceType, referenceId, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flow).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flow).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(counter).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Group>(content, page, count)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux()), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(counter).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flow).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()).as(RxJava2Adapter::maybeToMono)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(completeWithMembersAndRole_migrated(maybeGroup, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> members = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(memberRepository.findAllByGroup(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcMember::getMember)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(memberRepository.findAllByGroup(id)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> roles = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(roleRepository.findAllByGroup(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcRole::getRole)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findAllByGroup(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
})).zipWith(RxJava2Adapter.maybeToMono(roles), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,role)->{
    LOGGER.debug("findById({}) fetch {} group roles", id, role == null ? 0 : role.size());
    grp.setRoles(role);
    return grp;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
})).zipWith(RxJava2Adapter.maybeToMono(roles), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,role)->{
    LOGGER.debug("findById({}) fetch {} group roles", id, role == null ? 0 : role.size());
    grp.setRoles(role);
    return grp;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
}))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
})).zipWith(RxJava2Adapter.maybeToMono(roles), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,role)->{
    LOGGER.debug("findById({}) fetch {} group roles", id, role == null ? 0 : role.size());
    grp.setRoles(role);
    return grp;
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteChildEntities(id)).as(trx::transactional)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcDomain.class).matching(from(whereClause)).as(JdbcDomain.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAllById(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAllById(ids)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAllByReferenceId(environmentId, ReferenceType.ENVIRONMENT.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAllByReferenceId(environmentId, ReferenceType.ENVIRONMENT.name())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(domainRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)).next()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(referenceId, referenceType.name(), hrid)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findByHrid(referenceId, referenceType.name(), hrid)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)).next());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(insertAction.as(trx::transactional).then(maybeToMono(findById(item.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(updateAction.as(trx::transactional).then(maybeToMono(findById(item.getId())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domainId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(dbClient.delete().from(JdbcDomain.class).matching(from(where("id").is(domainId))).fetch().rowsUpdated().then(deleteChildEntities(domainId)).as(trx::transactional).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to delete Domain with id {}", domainId, error))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("refType", ReferenceType.ENVIRONMENT.name()).bind("refId", environmentId).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcDomain.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::completeDomain)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(completeDomain_migrated(entity));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(entity).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(identitiesRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(tagRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(vHostsRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})))))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(entity).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(identitiesRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(tagRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(vHostsRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})))))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(identitiesRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identitiesRepository.findAllByDomainId(domain.getId())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(tagRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
})))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(tagRepository.findAllByDomainId(domain.getId())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (domain)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(vHostsRepository.findAllByDomainId(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(vHostsRepository.findAllByDomainId(domain.getId())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByReferenceId_migrated(refId, refType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByReferenceId(refId, refType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByHrid_migrated(refId, refType, hrid));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByHrid(refId, refType, hrid));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByDomainId_migrated(domainId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByDomainId(domainId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByDomainId_migrated(domainId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByDomainId(domainId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByDomainId_migrated(domainId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByDomainId(domainId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll(referenceType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll(referenceType.name())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll()).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.identityProviderRepository.findById(referenceType.name(), referenceId, identityProviderId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.identityProviderRepository.findById(referenceType.name(), referenceId, identityProviderId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.identityProviderRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.identityProviderRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.identityProviderRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailRepository.findAllByReference(referenceId, referenceType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findAllByReference(referenceId, referenceType.name())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailRepository.findAllByReferenceAndClient(referenceId, referenceType.name(), client)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findAllByReferenceAndClient(referenceId, referenceType.name(), client)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findByTemplate(referenceId, referenceType.name(), template)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findByTemplate(referenceId, referenceType.name(), template)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findByClientAndTemplate(referenceId, referenceType.name(), client, template)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findByClientAndTemplate(referenceId, referenceType.name(), client, template)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findById(referenceId, referenceType.name(), id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findById(referenceId, referenceType.name(), id)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(emailRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refId, refType, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refId, refType, id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByReference_migrated(refId, refType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByReference(refId, refType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByReferenceAndClient_migrated(refId, refType, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByReferenceAndClient(refId, refType, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(refId, refType, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientAndTemplate(refId, refType, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByTemplate_migrated(refId, refType, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByTemplate(refId, refType, template));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(from.as(JdbcLoginAttempt.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(loginAttemptRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(loginAttemptRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(loginAttemptRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByAlertTriggerId_migrated(alertTriggerId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByAlertTriggerId(alertTriggerId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(permissionTicketRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(extensionGrantRepository.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(extensionGrantRepository.findByDomain(domain)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, name)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, name)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extensionGrantRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extensionGrantRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extensionGrantRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(extensionGrantRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByReference_migrated(refType, refId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByReference(refType, refId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refType, refId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refType, refId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByExternalIdAndSource_migrated(refType, refId, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByExternalIdAndSource(refType, refId, externalId, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndSource_migrated(refType, refId, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsernameAndSource(refType, refId, username, source));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(refType, refId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(refType, refId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByApplicationId_migrated(applicationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByApplicationId(applicationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(eventRepository.findByTimeFrame(LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(eventRepository.findByTimeFrame(LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(eventRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(eventRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(eventRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(eventRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByTimeFrame_migrated(from, to));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByTimeFrame(from, to));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userRepository.findByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(userRepository.countByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(userRepository.countByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count))))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userRepository.countByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP)).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total))))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(app)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()))).collectList().flatMap((list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()))).collectList().flatMap((list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total))))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndSource_migrated(referenceType, referenceId, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.empty()));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeUser(user)).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(referenceType.name(), referenceId, userId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(referenceType.name(), referenceId, userId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(referenceType.name(), referenceId, userId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeUser(z)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeUser(z))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteChildEntities(id)).as(trx::transactional)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(completeUser_migrated(userToComplete));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(userToComplete).flatMap((user)->RxJava2Adapter.flowableToFlux(roleRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(entitlementRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(addressesRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(attributesRepository.findByUserId(user.getId())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcOrganizationUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(userToComplete).flatMap((user)->RxJava2Adapter.flowableToFlux(roleRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(entitlementRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(addressesRepository.findByUserId(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap((user)->RxJava2Adapter.flowableToFlux(attributesRepository.findByUserId(user.getId())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcOrganizationUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByUserId(user.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(entitlementRepository.findByUserId(user.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(addressesRepository.findByUserId(user.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(attributesRepository.findByUserId(user.getId())).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByToken_migrated(token, now));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByToken(token, now));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByOrganization_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByOrganization(organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByApplicationId_migrated(applicationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByApplicationId(applicationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.alertNotifierRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertNotifierRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertNotifier));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(dbClient.insert().into(JdbcAlertNotifier.class).using(toJdbcAlertNotifier(alertNotifier)).then().then(maybeToMono(findById(alertNotifier.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertNotifier));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(dbClient.update().table(JdbcAlertNotifier.class).using(toJdbcAlertNotifier(alertNotifier)).matching(from(where("id").is(alertNotifier.getId()))).then().then(maybeToMono(findById(alertNotifier.getId())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.alertNotifierRepository.deleteById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).doOnError
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("id").is(id))).as(JdbcAuthenticationFlowContext.class).one().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("expire_at").greaterThan(now)))).orderBy(Sort.Order.desc("version")).as(JdbcAuthenticationFlowContext.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("expire_at").greaterThan(now)))).orderBy(Sort.Order.desc("version")).as(JdbcAuthenticationFlowContext.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(insertAction.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(id)).single()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(id)).single
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(flowRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((e)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, SingleSource<Flow>>)this::completeFlow).apply(e)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, SingleSource<Flow>>)this::completeFlow).apply(e)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(dbClient.delete().from(JdbcFlow.class).matching(from(where("id").is(id))).fetch().rowsUpdated().then(deleteChildEntities(id)).as(trx::transactional)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(flowRepository.findById(referenceType.name(), referenceId, id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeFlow(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(referenceType.name(), referenceId, id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeFlow(z))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((flow)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeFlow(flow)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (flow)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeFlow(flow)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeFlow(flow)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(referenceType.name(), referenceId, application)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((flow)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeFlow(flow)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(referenceType.name(), referenceId, application)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (flow)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeFlow(flow)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeFlow(flow)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(completeFlow_migrated(flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(dbClient.select().from(JdbcFlow.JdbcStep.class).matching(from(where("flow_id").is(flow.getId()))).orderBy(Sort.Order.asc("stage_order")).as(JdbcFlow.JdbcStep.class).all().collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((steps)->{
    if (steps != null && !steps.isEmpty()) {
        List<Step> preSteps = new ArrayList<>();
        List<Step> postSteps = new ArrayList<>();
        for (JdbcFlow.JdbcStep jStep : steps) {
            if (jStep.getStage().equals(JdbcFlow.StepType.pre.name())) {
                preSteps.add(convertToStep(jStep));
            } else if (jStep.getStage().equals(JdbcFlow.StepType.post.name())) {
                postSteps.add(convertToStep(jStep));
            } else {
                LOGGER.debug("Unknown step type \'{}\', ignore it!", jStep.getStage());
            }
        }
        if (!preSteps.isEmpty()) {
            flow.setPre(preSteps);
        }
        if (!postSteps.isEmpty()) {
            flow.setPost(postSteps);
        }
    }
    return flow;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(dbClient.select().from(JdbcFlow.JdbcStep.class).matching(from(where("flow_id").is(flow.getId()))).orderBy(Sort.Order.asc("stage_order")).as(JdbcFlow.JdbcStep.class).all().collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((steps)->{
    if (steps != null && !steps.isEmpty()) {
        List<Step> preSteps = new ArrayList<>();
        List<Step> postSteps = new ArrayList<>();
        for (JdbcFlow.JdbcStep jStep : steps) {
            if (jStep.getStage().equals(JdbcFlow.StepType.pre.name())) {
                preSteps.add(convertToStep(jStep));
            } else if (jStep.getStage().equals(JdbcFlow.StepType.post.name())) {
                postSteps.add(convertToStep(jStep));
            } else {
                LOGGER.debug("Unknown step type \'{}\', ignore it!", jStep.getStage());
            }
        }
        if (!preSteps.isEmpty()) {
            flow.setPre(preSteps);
        }
        if (!postSteps.isEmpty()) {
            flow.setPost(postSteps);
        }
    }
    return flow;
}))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByReference_migrated(refType, refId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByReference(refType, refId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(refType, refId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(refType, refId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(roles));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(roles));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refType, refId, role));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refType, refId, role));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByNameAndAssignableType_migrated(refType, refId, name, assignableType));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByNameAndAssignableType(refType, refId, name, assignableType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByNamesAndAssignableType_migrated(refType, refId, names, assignableType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByNamesAndAssignableType(refType, refId, names, assignableType));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment))).flatMapSingle
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findByOrganization(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment))).flatMapSingle
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findByOrganization(organizationId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(environmentRepository.findByIdAndOrganization(id, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap((z)->RxJava2Adapter.singleToMono(retrieveDomainRestrictions(z))).flatMap((z)->RxJava2Adapter.singleToMono(retrieveHrids(z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findByIdAndOrganization(id, organizationId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(retrieveDomainRestrictions(z))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(retrieveHrids(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<Environment> result = RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap((z)->RxJava2Adapter.singleToMono(retrieveDomainRestrictions(z))).flatMap((z)->RxJava2Adapter.singleToMono(retrieveHrids(z))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(retrieveDomainRestrictions(z))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(retrieveHrids(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(result).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to retrieve Environment with id {}", id, error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(result).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(environment));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(insert.then(storeDomainRestrictions).then(storeHrids).as(trx::transactional).then(maybeToMono(findById(environment.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(environment));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(update.then(storeDomainRestrictions(environment, true)).then(storeHrids(environment, true)).as(trx::transactional).then(maybeToMono(findById(environment.getId())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(environmentId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteDomainRestrictions).then(deleteHrids).as(trx::transactional)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(environment));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRestrictionRepository.findAllByEnvironmentId(environment.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setDomainRestrictions)).map(RxJavaReactorMigrationUtil.toJdkFunction((domainRestriction)->environment))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRestrictionRepository.findAllByEnvironmentId(environment.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setDomainRestrictions)).map(RxJavaReactorMigrationUtil.toJdkFunction((domainRestriction)->environment))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRestrictionRepository.findAllByEnvironmentId(environment.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(retrieveHrids_migrated(environment));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(hridsRepository.findAllByEnvironmentId(environment.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setHrids)).map(RxJavaReactorMigrationUtil.toJdkFunction((hrids)->environment))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(hridsRepository.findAllByEnvironmentId(environment.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setHrids)).map(RxJavaReactorMigrationUtil.toJdkFunction((hrids)->environment))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(hridsRepository.findAllByEnvironmentId(environment.getId())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(completeApplication_migrated(entity));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(entity).flatMap((app)->RxJava2Adapter.flowableToFlux(identityRepository.findAllByApplicationId(app.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
}))).flatMap((app)->RxJava2Adapter.flowableToFlux(factorRepository.findAllByApplicationId(app.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
}))).flatMap((app)->RxJava2Adapter.flowableToFlux(scopeRepository.findAllByApplicationId(app.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcApplication.ScopeSettings jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.application.ApplicationScopeSettings> scopeSettings)->{
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        app.getSettings().getOauth().setScopeSettings(scopeSettings);
    }
    return app;
})))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(entity).flatMap((app)->RxJava2Adapter.flowableToFlux(identityRepository.findAllByApplicationId(app.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
}))).flatMap((app)->RxJava2Adapter.flowableToFlux(factorRepository.findAllByApplicationId(app.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
}))).flatMap((app)->RxJava2Adapter.flowableToFlux(scopeRepository.findAllByApplicationId(app.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcApplication.ScopeSettings jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.application.ApplicationScopeSettings> scopeSettings)->{
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        app.getSettings().getOauth().setScopeSettings(scopeSettings);
    }
    return app;
})))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityRepository.findAllByApplicationId(app.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorRepository.findAllByApplicationId(app.getId())).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeRepository.findAllByApplicationId(app.getId())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()), MAX_CONCURRENCY)).collectList().flatMap((data)->RxJava2Adapter.singleToMono(applicationRepository.count()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve all applications (page={}/size={})", page, size, error))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()), MAX_CONCURRENCY)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.count()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByDomain(domain)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()), MAX_CONCURRENCY)).collectList().flatMap((data)->RxJava2Adapter.singleToMono(applicationRepository.countByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve all applications with domain {} (page={}/size={})", domain, page, size, error))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()), MAX_CONCURRENCY)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.countByDomain(domain)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve all applications with domain {} (page={}/size={})", domain, page, size, error))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByCertificate(certificate)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByCertificate(certificate)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.execute("SELECT a.* FROM applications a INNER JOIN application_identities i ON a.id = i.application_id where i." + databaseDialectHelper.toSql(SqlIdentifier.quoted("identity")) + " = :identity").bind("identity", identityProvider).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findAllByFactor(factor)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAllByFactor(factor)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findAllByDomainAndGrant(domain, extensionGrant)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAllByDomainAndGrant(domain, extensionGrant)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByIdIn(ids)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()))).next());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completeApplication(app)).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeApplication(z)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->RxJava2Adapter.singleToMono(completeApplication(z)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(completeApplication(z))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateAction.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(delete.then(deleteChildEntities(id)).as(trx::transactional).then(RxJava2Adapter.completableToMono(applicationRepository.deleteById(id)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(delete.then(deleteChildEntities(id)).as(trx::transactional).then(RxJava2Adapter.completableToMono(applicationRepository.deleteById(id)))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | delete.then(deleteChildEntities(id)).as(trx::transactional).then(RxJava2Adapter.completableToMono(applicationRepository.deleteById(id)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(nodeMonitoringRepository.findByNodeIdAndType(nodeId, type)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(nodeMonitoringRepository.findByNodeIdAndType(nodeId, type)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(nodeMonitoringRepository.findByTypeAndTimeFrame(type, LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(nodeMonitoringRepository.findByTypeAndTimeFrame(type, LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(nodeMonitoringRepository.save(toJdbcEntity(monitoring))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.save(toJdbcEntity(monitoring))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> alertNotifierIds = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(alertTriggerAlertNotifierRepository.findByAlertTriggerId(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertTriggerAlertNotifierRepository.findByAlertTriggerId(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).zipWith(RxJava2Adapter.maybeToMono(alertNotifierIds), RxJavaReactorMigrationUtil.toJdkBiFunction((alertTrigger,ids)->{
    LOGGER.debug("findById({}) fetch {} alert triggers", alertTrigger.getId(), ids.size());
    alertTrigger.setAlertNotifiers(ids);
    return alertTrigger;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).zipWith(RxJava2Adapter.maybeToMono(alertNotifierIds), RxJavaReactorMigrationUtil.toJdkBiFunction((alertTrigger,ids)->{
    LOGGER.debug("findById({}) fetch {} alert triggers", alertTrigger.getId(), ids.size());
    alertTrigger.setAlertNotifiers(ids);
    return alertTrigger;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).zipWith(RxJava2Adapter.maybeToMono(alertNotifierIds), RxJavaReactorMigrationUtil.toJdkBiFunction((alertTrigger,ids)->{
    LOGGER.debug("findById({}) fetch {} alert triggers", alertTrigger.getId(), ids.size());
    alertTrigger.setAlertNotifiers(ids);
    return alertTrigger;
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertTrigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(insert.then(storeAlertNotifiers).as(trx::transactional).then(maybeToMono(findById(alertTrigger.getId())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertTrigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(update.then(storeAlertNotifiers).as(trx::transactional).then(maybeToMono(findById(alertTrigger.getId())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.alertTriggerRepository.deleteById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(execute.as(String.class).fetch().all().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction(this::findById).apply(e))))).doOnError
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction(this::findById).apply(e)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(this.installationRepository.findAll()).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.installationRepository.findAll()).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.installationRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.installationRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.installationRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(installation));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertSpec.then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(this.findById(installation.getId())).single()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(insertSpec.then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(this.findById(installation.getId())).single()))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(installation.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(installation));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateSpec.using(Update.from(updateFields)).matching(from(where("id").is(installation.getId()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(this.findById(installation.getId())).single()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateSpec.using(Update.from(updateFields)).matching(from(where("id").is(installation.getId()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(this.findById(installation.getId())).single()))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(installation.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.installationRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByToken_migrated(token, now));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByToken(token, now));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClientIdAndSubject_migrated(clientId, subject, now));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClientIdAndSubject(clientId, subject, now));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClientId_migrated(clientId, now));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClientId(clientId, now));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByAuthorizationCode_migrated(code, now));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByAuthorizationCode(code, now));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByClientId_migrated(clientId, now));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByClientId(clientId, now));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(token, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve AccessToken", error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(token, LocalDateTime.now(UTC))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create accessToken with id {}", accessToken.getId(), error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Completable.fromMaybe(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByToken(token)).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete AccessToken", error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByToken(token)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (accessToken)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(create(accessToken)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(create(accessToken)).flux
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC))).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC))).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC))).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(tagRepository.findByOrganization(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(tagRepository.findByOrganization(organizationId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(tagRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tagRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tagRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(tagRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken(token, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve RefreshToken", error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken(token, LocalDateTime.now(UTC))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create refreshToken with id {}", refreshToken.getId(), error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (refreshToken)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(create(refreshToken)).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(create(refreshToken)).flux
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.certificateRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.certificateRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.certificateRepository.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.certificateRepository.findByDomain(domain)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.certificateRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve Certificate with id {}", id, error)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.certificateRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve Certificate with id {}", id, error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.certificateRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create certificate with id {}", item.getId(), error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create certificate with id {}", item.getId(), error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to update certificate with id {}", item.getId(), error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to update certificate with id {}", item.getId(), error)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.certificateRepository.deleteById(id).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete Certificate with id {}", id, error))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(insertAction.flatMap((i)->RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create authorizationCode with id {}", authorizationCode.getId(), error))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->dbClient.delete().from(JdbcAuthorizationCode.class).matching(from(where("id").is(id))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(id)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve AuthorizationCode with code {}", code))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code, LocalDateTime.now(UTC))).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(roleRepository.findByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux()))).collectList().flatMap((content)->RxJava2Adapter.singleToMono(roleRepository.countByReference(referenceType.name(), referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Role>(content, page, count)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.countByReference(referenceType.name(), referenceId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Role>(data, page, total)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(roleRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByIdIn(ids)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType.name(), referenceId, role)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), role)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType.name(), referenceId, role)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(referenceType.name(), referenceId, name, assignableType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()).as(RxJava2Adapter::maybeToMono)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(referenceType.name(), referenceId, name, assignableType.name())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(referenceType.name(), referenceId, names, assignableType.name())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).apply(e)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(referenceType.name(), referenceId, names, assignableType.name())).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(action.as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteScopes.then(action).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(deleteScopes.then(action).as(trx::transactional).flatMap((i)->RxJava2Adapter.maybeToMono(this.findById(item.getId())).single())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.findById(item.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(monoToCompletable(delete.then(deleteScopes.as(trx::transactional))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(completeWithScopes_migrated(maybeRole, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> scopes = RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(oauthScopeRepository.findAllByRole(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcRole.OAuthScope::getScope)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(oauthScopeRepository.findAllByRole(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeRole).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((role,scope)->{
    LOGGER.debug("findById({}) fetch {} oauth scopes", id, scope == null ? 0 : scope.size());
    role.setOauthScopes(scope);
    return role;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybeRole).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((role,scope)->{
    LOGGER.debug("findById({}) fetch {} oauth scopes", id, scope == null ? 0 : scope.size());
    role.setOauthScopes(scope);
    return role;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeRole).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeRole).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((role,scope)->{
    LOGGER.debug("findById({}) fetch {} oauth scopes", id, scope == null ? 0 : scope.size());
    role.setOauthScopes(scope);
    return role;
}))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(repository.findById(attemptExpired.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(repository.findById(attemptExpired2.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(repository.findById(attemptNotExpired.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(repository.findById(attemptNotExpired.getId())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(object1.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(object2.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(object1.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(object2.getId())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(object1.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(object2.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(object1.getId())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(object2.getId())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token")).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token")).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute())).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token")).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token")).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token2")).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(codeExpired)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(codeExpired)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(permissionTicketNoExpireAt)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(repository.create(permissionTicket)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enrichProfile_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userRepository.update(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new RuntimeException("Exception thrown for test"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByEmail_migrated(email));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsername(username));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(id, updateUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(asyncSignInUrl_migrated(redirectUri, state));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(request)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(request)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(signOutUrl_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadUserByUsername(authentication));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadUserByUsername(username));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadPreAuthenticatedUser_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadUserByUsername(user.getUsername()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(aggregate(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptyList(), page, size))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptyList(), page, size))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(result)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(result)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonMap("data", 0L))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonMap("data", 0L))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(key_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(key());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(publicKey_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(publicKey());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(privateKey_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(privateKey());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(keys_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(keys());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(publicKeys_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUser(domain, user)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval for domain: {} and user: {}", domain, user);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUser(domain, user)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, client)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval for domain: {}, user: {} and client: {}", domain, user, client);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, client)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).throwable(throwable))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList()).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(consentId)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))).then()).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(consentId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findById(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user))))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(user)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findById(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user))))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(user)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUser_migrated(domain, user));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndUser(domain, user));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUserAndClient_migrated(domain, user, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndUserAndClient(domain, user, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(domain, client, approvals, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(saveConsent(domain, client, approvals, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByConsent_migrated(domain, userId, consentId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByConsent(domain, userId, consentId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUser_migrated(domain, user, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUser(domain, user, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUserAndClient_migrated(domain, user, clientId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUserAndClient(domain, user, clientId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(domain, client, approvals));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(saveConsent(domain, client, approvals, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByConsent_migrated(domain, userId, consentId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByConsent(domain, userId, consentId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUser_migrated(domain, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUser(domain, userId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUserAndClient_migrated(domain, userId, clientId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUserAndClient(domain, userId, clientId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndUsername_migrated(domain, username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndUsername(domain, username));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndUsernameAndSource_migrated(domain, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndUsernameAndSource(domain, username, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByApplication_migrated(domain, application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByApplication(domain, application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(statistics_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(statistics(query));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(upsertFactor_migrated(userId, enrolledFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(upsertFactor(userId, enrolledFactor, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(removeFactor_migrated(userId, factorId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(removeFactor(userId, factorId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUsernameAndSource_migrated(referenceType, referenceId, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByUsernameAndSource(referenceType, referenceId, username, source));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByExternalIdAndSource(referenceType, referenceId, externalId, source));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enhance_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(enhance(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, botDetection, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, botDetection, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateBotDetection, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateBotDetection, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, botDetectionId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, botDetectionId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, botDetection));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, botDetection, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateBotDetection));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateBotDetection, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, botDetectionId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, botDetectionId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validate_migrated(path));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path must not be null or empty"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path must not be null or empty"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path [" + path + "] is invalid"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path [" + path + "] is invalid"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path must start with a \'/\'"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path must start with a \'/\'"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path [" + path + "] is invalid"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidPathException("Path [" + path + "] is invalid"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findById(user.getReferenceType(), user.getReferenceId(), roleId))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findById(user.getReferenceType(), user.getReferenceId(), roleId)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId)).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId)).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty(Mono.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(user.getReferenceId(), membership)).then());
}).apply(y)))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(user.getReferenceId(), membership)).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(user.getReferenceId(), membership)).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.addOrUpdate(user.getReferenceId(), membership)).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
})))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
})))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
})).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(getUserRepository().findByIdIn(ids)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users by ids {}", userIds, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(getUserRepository().findByIdIn(ids)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new UserNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(getUserRepository().findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return create(user);
    }
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getUserRepository().findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return create(user);
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(getUserRepository().create(user))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(getUserRepository().create(user)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new UserNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(getUserRepository().findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))).then().then(RxJava2Adapter.completableToMono(getUserRepository().delete(userId))).then(RxJava2Adapter.singleToMono(eventService.create(event)).then()));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getUserRepository().findById(userId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))).then().then(RxJava2Adapter.completableToMono(getUserRepository().delete(userId))).then(RxJava2Adapter.singleToMono(eventService.create(event)).then()));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))).then().then(RxJava2Adapter.completableToMono(getUserRepository().delete(userId))).then(RxJava2Adapter.singleToMono(eventService.create(event)).then()));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))).then().then(RxJava2Adapter.completableToMono(getUserRepository().delete(userId)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByMember(user.getId())).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Group>, Single<User>>)(groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(new ArrayList<>(roles))).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        })));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupService.findByMember(user.getId())).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Group>, Single<User>>)(groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(new ArrayList<>(roles))).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        })));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(new ArrayList<>(roles))).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    user.setRolesPermissions(roles1);
    return user;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByIdIn(new ArrayList<>(roles))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(setRoles_migrated(principal, user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(setRoles(principal, user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(setRoles_migrated(user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(setRoles(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllAssignable_migrated(referenceType, referenceId, assignableType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllAssignable(referenceType, referenceId, assignableType));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(searchByDomain_migrated(domain, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(searchByDomain(domain, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findSystemRole_migrated(systemRole, assignableType));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findSystemRole(systemRole, assignableType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findRolesByName_migrated(referenceType, referenceId, assignableType, roleNames));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findRolesByName(referenceType, referenceId, assignableType, roleNames));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findDefaultRole_migrated(organizationId, defaultRole, assignableType));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findDefaultRole(organizationId, defaultRole, assignableType));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByIdIn_migrated(ids));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByIdIn(ids));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newRole, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newRole, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, role, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, role, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateRole, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateRole, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, role, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, role, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, roleId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, roleId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(createOrUpdateSystemRoles_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(createOrUpdateSystemRoles());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, role, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, role, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, roleId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, roleId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(createDefaultRoles_migrated(organizationId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(createDefaultRoles(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findMembers_migrated(referenceType, referenceId, groupId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findMembers(referenceType, referenceId, groupId, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByMember_migrated(userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByMember(userId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByName_migrated(referenceType, referenceId, groupName));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, groupName));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newGroup, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newGroup, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, group, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, group, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateGroup, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateGroup, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, group, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, group, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, groupId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, groupId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(assignRoles_migrated(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(assignRoles(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, group));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, group, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, group));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, group, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, groupId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, groupId, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(assignRoles_migrated(referenceType, referenceId, groupId, roles));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(assignRoles(referenceType, referenceId, groupId, roles, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, groupId, roles));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, groupId, roles, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCriteria_migrated(referenceType, referenceId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCriteria(referenceType, referenceId, criteria));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReference_migrated(referenceId, referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReference(referenceId, referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByMember_migrated(memberId, memberType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByMember(memberId, memberType));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addOrUpdate_migrated(organizationId, membership, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addOrUpdate(organizationId, membership, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setPlatformAdmin_migrated(userId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(setPlatformAdmin(userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getMetadata_migrated(memberships));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getMetadata(memberships));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(membershipId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(membershipId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addOrUpdate_migrated(organizationId, membership));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addOrUpdate(organizationId, membership, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(membershipId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(membershipId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(addDomainUserRoleIfNecessary_migrated(organizationId, environmentId, domainId, newMembership, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(addDomainUserRoleIfNecessary(organizationId, environmentId, domainId, newMembership, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validate_migrated(user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Username [%s] is not a valid value", user.getUsername())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Username [%s] is not a valid value", user.getUsername())))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new EmailFormatInvalidException(user.getEmail()))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new EmailFormatInvalidException(user.getEmail()))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("First name [%s] is not a valid value", user.getFirstName())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("First name [%s] is not a valid value", user.getFirstName())))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Last name [%s] is not a valid value", user.getLastName())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Last name [%s] is not a valid value", user.getLastName())))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Display name [%s] is not a valid value", user.getDisplayName())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Display name [%s] is not a valid value", user.getDisplayName())))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Nick name [%s] is not a valid value", user.getNickName())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("Nick name [%s] is not a valid value", user.getNickName())))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("External id [%s] is not a valid value", user.getExternalId())))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException(String.format("External id [%s] is not a valid value", user.getExternalId())))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(event));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(event));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByTimeFrame_migrated(from, to));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByTimeFrame(from, to));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUserId_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUserId(referenceType, referenceId, userId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByUsername_migrated(referenceType, referenceId, username));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByUsername(referenceType, referenceId, username));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCredentialId_migrated(referenceType, referenceId, credentialId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCredentialId(referenceType, referenceId, credentialId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(credential));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(credential));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(update_migrated(referenceType, referenceId, credentialId, credential));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(update(referenceType, referenceId, credentialId, credential));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByUserId_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByUserId(referenceType, referenceId, userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByAaguid_migrated(referenceType, referenceId, aaguid));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByAaguid(referenceType, referenceId, aaguid));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createDefault_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createDefault(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newReporter, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newReporter, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateReporter, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateReporter, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(reporterId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(reporterId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newReporter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newReporter, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateReporter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateReporter, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(reporterId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(reporterId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(createDefault_migrated());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(createDefault());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(organizationId, environmentId, newEnvironment, createdBy));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(organizationId, environmentId, newEnvironment, createdBy));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(organizationRepository.findById(id)).switchIfEmpty(Mono.error(new OrganizationNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(organizationRepository.count()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((aLong)->aLong == 0)).flatMap((z)->RxJava2Adapter.singleToMono(createInternal(organization, null))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.count()).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(createInternal(organization, null))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, organization)));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return createInternal(toCreate, byUser);
}))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, organization)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, organization)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, organization)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, organization)));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return createInternal(toCreate, byUser);
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(organizationId)).flatMap((organization)->RxJava2Adapter.singleToMono(updateInternal(patchOrganization.patch(organization), updatedBy, organization))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(organizationId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (organization)->RxJava2Adapter.singleToMono(updateInternal(patchOrganization.patch(organization), updatedBy, organization))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, owner));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(organizationRepository.create(toCreate)).flatMap((createdOrganization)->RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(entrypointService.createDefaults(createdOrganization)).ignoreElements().then()), roleService.createDefaultRoles(createdOrganization.getId()))).then(Mono.just(createdOrganization))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((organization)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(organization).principal(owner)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(toCreate).principal(owner).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(organizationRepository.create(toCreate)).flatMap((createdOrganization)->RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(entrypointService.createDefaults(createdOrganization)).ignoreElements().then()), roleService.createDefaultRoles(createdOrganization.getId()))).then(Mono.just(createdOrganization))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((organization)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(organization).principal(owner)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(toCreate).principal(owner).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.create(toCreate)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(entrypointService.createDefaults(createdOrganization)).ignoreElements().then()), roleService.createDefaultRoles(createdOrganization.getId()))).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(entrypointService.createDefaults(createdOrganization)).ignoreElements().then()), roleService.createDefaultRoles(createdOrganization.getId()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(entrypointService.createDefaults(createdOrganization)).ignoreElements
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(organization, updatedBy, previous));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(organizationRepository.update(organization)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(previous).principal(updatedBy).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(organizationRepository.update(organization)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(previous).principal(updatedBy).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationRepository.update(organization)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(createDefault_migrated());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(createDefault());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(organizationId, newOrganization, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(organizationId, newOrganization, byUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organizationId, patchOrganization, authenticatedUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(organizationId, patchOrganization, authenticatedUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(id, organizationId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, entrypoint, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(organizationId, entrypoint, principal));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(createDefaults_migrated(organization));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(createDefaults(organization));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(entrypointId, organizationId, entrypoint, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(entrypointId, organizationId, entrypoint, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(entrypointId, organizationId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(entrypointId, organizationId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByReference(referenceId, referenceType)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find memberships by reference id {} and reference type {}", referenceId, referenceType, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipRepository.findByReference(referenceId, referenceType)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByMember(memberId, memberType)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find memberships by member id {} and member type {}", memberId, memberType, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipRepository.findByMember(memberId, memberType)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkMember(organizationId, membership)).then(RxJava2Adapter.completableToMono(checkRole(organizationId, membership))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return createInternal(newMembership, principal);
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)))));
    }
}))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkMember(organizationId, membership)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkMember(organizationId, membership)).then(RxJava2Adapter.completableToMono(checkRole(organizationId, membership)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkMember(organizationId, membership)).then(RxJava2Adapter.completableToMono(checkRole(organizationId, membership))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return createInternal(newMembership, principal);
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)))));
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).switchIfEmpty(Mono.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name()))).flatMap((role)->RxJava2Adapter.flowableToFlux(findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria)).next().switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
})))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).switchIfEmpty
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria)).next
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria)).next().switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(membershipRepository.findById(membershipId)).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable))))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(membershipRepository.findById(membershipId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria)).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
})).flux()))))).ignoreElements().then().then(RxJava2Adapter.completableToMono(addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, principal))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria)).switchIfEmpty
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria)).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
})).flux())))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | ()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
})).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
})).flux
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria)).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
})).flux()))))).ignoreElements().then().then(RxJava2Adapter.completableToMono(addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, principal)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.ENVIRONMENT, environmentId, criteria)).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
})).flux()))))).ignoreElements().then());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.ENVIRONMENT, environmentId, criteria)).switchIfEmpty
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.findByCriteria(ReferenceType.ENVIRONMENT, environmentId, criteria)).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
})).flux())))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | ()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
})).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
})).flux
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(membership, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.create(membership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.create(membership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.create(membership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.create(membership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.create(membership)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkMember_migrated(organizationId, membership));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(orgUserService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId())).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(orgUserService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId())).then()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(orgUserService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId())).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId())).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId())).then()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId())).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkRole_migrated(organizationId, membership));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleService.findById(membership.getRoleId())).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role1)->role1.getAssignableType() == membership.getReferenceType() && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId()))))).switchIfEmpty(Mono.error(new InvalidRoleException("Invalid role"))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleService.findById(membership.getRoleId())).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role1)->role1.getAssignableType() == membership.getReferenceType() && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId()))))).switchIfEmpty(Mono.error(new InvalidRoleException("Invalid role"))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findById(membership.getRoleId())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(role));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(loginSucceeded_migrated(criteria));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(loginSucceeded(criteria));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(loginFailed_migrated(criteria, accountSettings));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(loginFailed(criteria, accountSettings));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(reset_migrated(criteria));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(reset(criteria));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(checkAccount_migrated(criteria, accountSettings));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(checkAccount(criteria, accountSettings));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(factorRepository.findByDomain(domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find factors by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorRepository.findByDomain(domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factor)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factor)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factor)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkFactorConfiguration(factor)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factor));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new FactorConfigurationException(CONFIG_KEY_COUNTRY_CODES, code))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new FactorConfigurationException(CONFIG_KEY_COUNTRY_CODES, code))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(factor)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(factor)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(id)).switchIfEmpty(Mono.error(new FactorNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(factorRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factorToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkFactorConfiguration(factorToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::update).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(factorId)).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId)))).flatMapSingle((factor)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(factorId)).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId)))).flatMapSingle((factor)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v))))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(factorId)).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(factorRepository.findById(factorId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (factor)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(factor));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, factor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, factor, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateFactor, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, factorId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, factorId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, factor));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, factor, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateFactor));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateFactor, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, factorId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, factorId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(domain, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(domain, query, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByCertificate_migrated(certificate));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByCertificate(certificate));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdentityProvider_migrated(identityProvider));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdentityProvider(identityProvider));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByFactor_migrated(factor));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByFactor(factor));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomainAndExtensionGrant_migrated(domain, extensionGrant));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomainAndExtensionGrant(domain, extensionGrant));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientId_migrated(domain, clientId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientId(domain, clientId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newApplication, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newApplication, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateType_migrated(domain, id, type, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(updateType(domain, id, type, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchApplication, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchApplication, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(renewClientSecret_migrated(domain, id, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(renewClientSecret(domain, id, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(count_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(count());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByDomain_migrated(domainId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countByDomain(domainId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTopApplications_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTopApplications());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTopApplicationsByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTopApplicationsByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAll(0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAll(0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAll(0, Integer.MAX_VALUE)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newApplication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newApplication, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchApplication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchApplication, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(renewClientSecret_migrated(domain, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(renewClientSecret(domain, id, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newCertificate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newCertificate, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateCertificate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateCertificate, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(certificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(certificate));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(certificateId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(certificateId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newCertificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newCertificate, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateCertificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateCertificate, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(certificateId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(certificateId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailRepository.findAll(referenceType, referenceId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all emails for {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findAll(referenceType, referenceId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailRepository.findAll()).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all emails", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findAll()).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailRepository.findByClient(referenceType, referenceId, client)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and its client {}", referenceType, referenceId, client, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findByClient(referenceType, referenceId, client)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(emailRepository.findById(emailId)).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findById(emailId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, client, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update0_migrated(referenceType, referenceId, id, updateEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new EmailNotFoundException(id)))).flatMapSingle((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(emailRepository.update(emailToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new EmailNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findById(referenceType, referenceId, id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(emailRepository.update(emailToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(emailRepository.update(emailToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkEmailUniqueness_migrated(referenceType, referenceId, client, emailTemplate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(maybeSource).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new EmailAlreadyExistsException(emailTemplate);
    }
    return true;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(maybeSource).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new EmailAlreadyExistsException(emailTemplate);
    }
    return true;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeSource).hasElement
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClient_migrated(referenceType, referenceId, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClient(referenceType, referenceId, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByTemplate(referenceType, referenceId, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndTemplate_migrated(domain, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndTemplate(domain, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientAndTemplate(referenceType, referenceId, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientAndTemplate_migrated(domain, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientAndTemplate(domain, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(copyFromClient_migrated(domain, clientSource, clientTarget));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(copyFromClient(domain, clientSource, clientTarget));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, client, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, client, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, updateEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, updateEmail, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(emailId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(emailId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newEmail, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, newEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, newEmail, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateEmail, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, updateEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, updateEmail, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(emailId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(emailId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getGrammar_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getGrammar());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(tag, organizationId, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(tag, organizationId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(tagId, organizationId, tag, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(tagId, organizationId, tag, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(tagId, organizationId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(tagId, organizationId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an event", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(eventRepository.findByTimeFrame(from, to)).collectList()).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(eventRepository.findByTimeFrame(from, to)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, res, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, res, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateServiceResource, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateServiceResource, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, resId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, resId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(tagRepository.findAll(organizationId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all tags", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(tagRepository.findAll(organizationId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).tag(tag).principal(principal).type(EventType.TAG_CREATED)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).referenceId(organizationId).principal(principal).type(EventType.TAG_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, organizationId)).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, organizationId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tagRepository.update(tag)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.update(tag)).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, orgaizationId)).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then(RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable))))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, orgaizationId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then(RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then(RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then(RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByEnvironment_migrated(organizationId, environment));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByEnvironment(organizationId, environment));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(search_migrated(organizationId, environmentId, query));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(search(organizationId, environmentId, query));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByHrid_migrated(environmentId, hrid));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByHrid(environmentId, hrid));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllByCriteria_migrated(criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAllByCriteria(criteria));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByIdIn_migrated(ids));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByIdIn(ids));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, environmentId, domain, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(organizationId, environmentId, domain, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domainId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domainId, domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domainId, domain, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domainId, domain, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, environmentId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(organizationId, environmentId, domain, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domainId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domainId, domain, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findAll()).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all reporter", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findAll()).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by domain: {}", domain, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ReporterNotFoundException("Reporter type " + this.environment.getProperty("management.type") + " not found")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporter)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.create(reporter))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporter)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.create(reporter))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporter)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.create(reporter))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkReporterConfiguration(reporter)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (ignore)->RxJava2Adapter.singleToMono(reporterRepository.create(reporter))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).switchIfEmpty(Mono.error(new ReporterNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporterToUpdate)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.update(reporterToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkReporterConfiguration(reporterToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.update(reporterToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(reporterRepository.findById(reporterId)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(reporterRepository.findById(reporterId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporter));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Reporter> result = RxJava2Adapter.monoToSingle(Mono.just(reporter))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | result = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(reporter.getDomain())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))))).count()).flatMap((v)->RxJava2Adapter.singleToMono((Single<Reporter>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Long, Single<Reporter>>)(reporters)->{
    if (reporters > 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter));
    }
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(reporter.getDomain())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))))).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(reporter.getDomain())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))))).count
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(reporter.getDomain())).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Reporter>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Long, Single<Reporter>>)(reporters)->{
    if (reporters > 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(reporter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(result);
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(true));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    Map res = objectMapper.readValue(buffer.bodyAsString(), Map.class);
    Boolean success = (Boolean)res.getOrDefault("success", false);
    Double score = (Double)res.getOrDefault("score", 0.0);
    logger.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= minScore);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isValid_migrated(token));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(isValid(token));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(credentialRepository.findByUserId(referenceType, referenceId, userId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByUserId(referenceType, referenceId, userId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(credentialRepository.findByUsername(referenceType, referenceId, username)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and username: {}", referenceType, referenceId, username, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByUsername(referenceType, referenceId, username)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType, referenceId, credentialId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and credential ID: {}", referenceType, referenceId, credentialId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType, referenceId, credentialId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(credentialRepository.findById(credential.getId())).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(credentialRepository.findById(credential.getId())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType, referenceId, credentialId).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return credentialRepository.update(credentialToUpdate);
})).ignoreElements().then());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType, referenceId, credentialId).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return credentialRepository.update(credentialToUpdate);
})).ignoreElements
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->RxJava2Adapter.completableToMono(credentialRepository.delete(id))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (email)->RxJava2Adapter.completableToMono(credentialRepository.delete(id))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(alertTriggerRepository.findById(id)).switchIfEmpty(Mono.error(new AlertTriggerNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(alertTriggerRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(alertTriggerRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertTrigger)->alertTrigger.getReferenceType() == referenceType && alertTrigger.getReferenceId().equals(referenceId))).switchIfEmpty(Mono.error(new AlertTriggerNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(alertTriggerRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria)).next().flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, alertTrigger)));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return createInternal(alertTrigger, byUser);
}))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria)).next
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, alertTrigger)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, alertTrigger)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, alertTrigger)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria)).next().flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, alertTrigger)));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return createInternal(alertTrigger, byUser);
})))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(this.getById(referenceType, referenceId, alertTriggerId)).flatMap((alertTrigger)->RxJava2Adapter.completableToMono(deleteInternal(alertTrigger, byUser))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getById(referenceType, referenceId, alertTriggerId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (alertTrigger)->RxJava2Adapter.completableToMono(deleteInternal(alertTrigger, byUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerRepository.create(toCreate)).flatMap((created)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE)))).then().then(Mono.just(created))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(alertTrigger).principal(byUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(toCreate).principal(byUser).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerRepository.create(toCreate)).flatMap((created)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE)))).then().then(Mono.just(created))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(alertTrigger).principal(byUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(toCreate).principal(byUser).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.create(toCreate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE)))).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(alertTrigger, updatedBy, previous));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerRepository.update(alertTrigger)).flatMap((updated)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE)))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(previous).principal(updatedBy).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerRepository.update(alertTrigger)).flatMap((updated)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE)))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(previous).principal(updatedBy).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerRepository.update(alertTrigger)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE)))).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteInternal_migrated(alertTrigger, deletedBy));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(alertTriggerRepository.delete(alertTrigger.getId())).then(RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy))).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy).throwable(throwable)))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(alertTriggerRepository.delete(alertTrigger.getId())).then(RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE)))).then())).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(alertTriggerRepository.delete(alertTrigger.getId())).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE)))).then
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getById_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getById(referenceType, referenceId, id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndCriteria_migrated(domainId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndCriteria(domainId, criteria));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, patchAlertTrigger, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, patchAlertTrigger, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, alertTriggerId, byUser));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, alertTriggerId, byUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(entrypointRepository.findById(id, organizationId)).switchIfEmpty(Mono.error(new EntrypointNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(entrypointRepository.findById(id, organizationId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(entrypointId, organizationId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Entrypoint>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Entrypoint, Single<Entrypoint>>)(oldEntrypoint)->{
    Entrypoint toUpdate = new Entrypoint(oldEntrypoint);
    toUpdate.setName(updateEntrypoint.getName());
    toUpdate.setDescription(updateEntrypoint.getDescription());
    toUpdate.setUrl(updateEntrypoint.getUrl());
    toUpdate.setTags(updateEntrypoint.getTags());
    toUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validate(toUpdate, oldEntrypoint)).then(RxJava2Adapter.singleToMono(entrypointRepository.update(toUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))))));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(entrypointId, organizationId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Entrypoint>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Entrypoint, Single<Entrypoint>>)(oldEntrypoint)->{
    Entrypoint toUpdate = new Entrypoint(oldEntrypoint);
    toUpdate.setName(updateEntrypoint.getName());
    toUpdate.setDescription(updateEntrypoint.getDescription());
    toUpdate.setUrl(updateEntrypoint.getUrl());
    toUpdate.setTags(updateEntrypoint.getTags());
    toUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validate(toUpdate, oldEntrypoint)).then(RxJava2Adapter.singleToMono(entrypointRepository.update(toUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validate(toUpdate, oldEntrypoint)).then(RxJava2Adapter.singleToMono(entrypointRepository.update(toUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(validate(toUpdate, oldEntrypoint)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entrypointRepository.update(toUpdate)).doOnSuccess
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(findById(id, organizationId)).flatMap((entrypoint)->RxJava2Adapter.completableToMono(entrypointRepository.delete(id).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).throwable(throwable))))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(id, organizationId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(entrypointRepository.delete(id).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validate(toCreate)).then(RxJava2Adapter.singleToMono(entrypointRepository.create(toCreate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).referenceId(toCreate.getOrganizationId()).principal(principal).type(EventType.ENTRYPOINT_CREATED).throwable(throwable)))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validate(toCreate)).then(RxJava2Adapter.singleToMono(entrypointRepository.create(toCreate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).referenceId(toCreate.getOrganizationId()).principal(principal).type(EventType.ENTRYPOINT_CREATED).throwable(throwable)))))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(validate(toCreate)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entrypointRepository.create(toCreate)).doOnSuccess
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validate_migrated(entrypoint));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(validate(entrypoint, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validate_migrated(entrypoint, oldEntrypoint));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Only the url of the default entrypoint can be updated."))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Only the url of the default entrypoint can be updated."))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(organizationService.findById(entrypoint.getOrganizationId())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(organizationService.findById(entrypoint.getOrganizationId())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(entrypoint.getOrganizationId())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Entrypoint must have a valid url."))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Entrypoint must have a valid url."))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomainAndClient_migrated(domain, client, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomainAndClient(domain, client, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByResources_migrated(resourceIds));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByResources(resourceIds));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(listByDomainAndClientAndUser_migrated(domain, client, userId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(listByDomainAndClientAndUser(domain, client, userId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndClientAndResources_migrated(domain, client, resourceIds));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndClientAndResources(domain, client, resourceIds));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientResource_migrated(domain, client, resourceId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientResource(domain, client, resourceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getMetadata_migrated(resources));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getMetadata(resources));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(newResource, domain, client, userId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(newResource, domain, client, userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(newResource, domain, client, userId, resourceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(newResource, domain, client, userId, resourceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(resource));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(resource));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, client, userId, resourceId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, client, userId, resourceId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(resource));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(resource));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAccessPolicies_migrated(domain, client, user, resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAccessPolicies(domain, client, user, resource));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAccessPoliciesByResources_migrated(resourceIds));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAccessPoliciesByResources(resourceIds));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countAccessPolicyByResource_migrated(resourceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(countAccessPolicyByResource(resourceId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findAccessPolicy_migrated(domain, client, user, resource, accessPolicy));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findAccessPolicy(domain, client, user, resource, accessPolicy));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findAccessPolicy_migrated(accessPolicy));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findAccessPolicy(accessPolicy));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createAccessPolicy_migrated(accessPolicy, domain, client, user, resource));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createAccessPolicy(accessPolicy, domain, client, user, resource));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateAccessPolicy_migrated(accessPolicy, domain, client, user, resource, accessPolicyId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(updateAccessPolicy(accessPolicy, domain, client, user, resource, accessPolicyId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteAccessPolicy_migrated(domain, client, user, resource, accessPolicy));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteAccessPolicy(domain, client, user, resource, accessPolicy));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedResources)->(pagedResources.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedResources.getData())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedResources)->(pagedResources.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedResources.getData())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(environmentRepository.findById(id, organizationId)).switchIfEmpty(Mono.error(new EnvironmentNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(id, organizationId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).switchIfEmpty(Mono.error(new EnvironmentNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(environmentRepository.count()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((aLong)->aLong == 0)).flatMap((z)->RxJava2Adapter.singleToMono(createInternal(environment, null))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.count()).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(createInternal(environment, null))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(environmentRepository.findById(environmentId, organizationId)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(environment, byUser)));
}).apply(v)))).switchIfEmpty(Mono.defer(()->RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Organization organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
})).flatMap((toCreate)->RxJava2Adapter.singleToMono(createInternal(toCreate, byUser))))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(environmentId, organizationId)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(environment, byUser)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(environment, byUser)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(environment, byUser)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (toCreate)->RxJava2Adapter.singleToMono(createInternal(toCreate, byUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, createdBy));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentRepository.create(toCreate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(environment).principal(createdBy)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(toCreate).principal(createdBy).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentRepository.create(toCreate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(environment).principal(createdBy)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(toCreate).principal(createdBy).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.create(toCreate)).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate, updatedBy));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentRepository.update(toUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(updated).principal(updatedBy).oldValue(toUpdate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(toUpdate).principal(updatedBy).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentRepository.update(toUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(updated).principal(updatedBy).oldValue(toUpdate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(toUpdate).principal(updatedBy).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentRepository.update(toUpdate)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(countByClientId(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens);
    return totalToken;
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(countByClientId(application)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByUserId(userId)).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByUserId(userId)))).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.deleteByUserId(userId)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.deleteByUserId(userId)).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByUserId(userId)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(countByClientId_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(0L)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(0L)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(0L)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(0L)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(accessTokenRepository.countByClientId(application.getSettings().getOauth().getClientId()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTotalTokensByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTotalTokensByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTotalTokensByApplication_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTotalTokensByApplication(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTotalTokens_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTotalTokens());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByUserId_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByUserId(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validate_migrated(domain, domainRestrictions));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Domain name cannot contain \'/\' character"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Domain name cannot contain \'/\' character"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Domain can only work in vhost mode"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Domain can only work in vhost mode"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("VHost mode requires at least one VHost"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("VHost mode requires at least one VHost"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Only one vhost can be used to override entrypoint"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Only one vhost can be used to override entrypoint"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("You must select one vhost to override entrypoint"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("You must select one vhost to override entrypoint"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("\'/\' path is not allowed in context-path mode"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("\'/\' path is not allowed in context-path mode"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.merge(chain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validate_migrated(vhost, domainRestrictions));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host is required"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host is required"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] is invalid"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] is invalid"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] must be a subdomain of " + domainRestrictions))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] must be a subdomain of " + domainRestrictions))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host port [" + port + "] is invalid"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host port [" + port + "] is invalid"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(PathValidator.validate(vhost.getPath()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validateDomainVhosts_migrated(domain, domains));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] overlap path defined in another security domain"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] overlap path defined in another security domain"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] is overlapped by another security domain"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] is overlapped by another security domain"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] overlap path defined in another security domain"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] overlap path defined in another security domain"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] is overlapped by another security domain"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] is overlapped by another security domain"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, scope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, scope, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, scope));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndKey_migrated(domain, scopeKey));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndKey(domain, scopeKey));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomainAndKeys_migrated(domain, scopeKeys));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomainAndKeys(domain, scopeKeys));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchScope, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateScope, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateScope));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(scopeId, force, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(scopeId, force, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(domain, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(domain, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateScope_migrated(domain, scopes));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(validateScope(domain, scopes));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, scope, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchScope, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateScope, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(scopeId, force));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(scopeId, force, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId, excludeApps));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId, excludeApps));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByApplication_migrated(referenceType, referenceId, application));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByApplication(referenceType, referenceId, application));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, application, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, application, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, flows, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, flows, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, application, flows, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, application, flows, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getSchema_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getSchema());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId, false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, flow, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, application, flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, application, flow, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, flow, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, flows));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, flows, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, application, flows));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, application, flows, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(tokenGranter));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(tokenGranter));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newExtensionGrant, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newExtensionGrant, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateExtensionGrant, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateExtensionGrant, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, certificateId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, certificateId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newExtensionGrant));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newExtensionGrant, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateExtensionGrant));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateExtensionGrant, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, certificateId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, certificateId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(botDetectionRepository.findByReference(ReferenceType.DOMAIN, domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find bot detections by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(botDetectionRepository.findByReference(ReferenceType.DOMAIN, domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.create(botDetection)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.create(botDetection)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.create(botDetection)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(botDetectionRepository.create(botDetection)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(id)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(botDetectionRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.update(botDetectionToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(botDetectionRepository.update(botDetectionToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(botDetectionRepository.findById(botDetectionId)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (botDetection)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<BotDetection>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<Application>, Single<BotDetection>>)(applications)->{
    if (applications.stream().filter((app)->app.getSettings() != null && app.getSettings().getAccount() != null && botDetectionId.equals(app.getSettings().getAccount().getBotDetectionPlugin())).count() > 0) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<BotDetection>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<Application>, Single<BotDetection>>)(applications)->{
    if (applications.stream().filter((app)->app.getSettings() != null && app.getSettings().getAccount() != null && botDetectionId.equals(app.getSettings().getAccount().getBotDetectionPlugin())).count() > 0) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(this::validateIconUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((scope)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(this::validateIconUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(this::validateIconUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(this::validateIconUri).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateIconUri(toUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((scope1)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).oldValue(oldValue).scope(scope1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validateIconUri(toUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::update).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
})).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
})).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable))))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(scopeId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(scope));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(scopeRepository.findByDomainAndKeys(domain, scopeKeys)).collectList()).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeRepository.findByDomainAndKeys(domain, scopeKeys)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(true));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((domainSet)->domainSet.getData().stream().map(Scope::getKey).collect(Collectors.toSet()))).flatMap((domainScopes)->RxJava2Adapter.singleToMono(this.validateScope(domainScopes, scopes))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (domainScopes)->RxJava2Adapter.singleToMono(this.validateScope(domainScopes, scopes))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("scope " + scope + " is not valid.")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(true));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateIconUri_migrated(scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new MalformedIconUriException(scope.getIconUri()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new MalformedIconUriException(scope.getIconUri()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(scope)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(scope)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll()).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all identity providers", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll()).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll(referenceType, referenceId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find identity providers by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll(referenceType, referenceId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.update(identityToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderRepository.update(identityToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId)))).flatMapSingle((identityProvider)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId)))).flatMapSingle((identityProvider)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v))))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, identityProviderId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (identityProvider)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newIdentityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, identityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, identityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, identityProviderId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, identityProviderId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, identityProviderId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, identityProviderId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, identityProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, identityProvider, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateIdentityProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateIdentityProvider, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, identityProviderId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, identityProviderId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(serviceResourceRepository.findByReference(ReferenceType.DOMAIN, domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(serviceResourceRepository.findByReference(ReferenceType.DOMAIN, domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.update(factorToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.update(factorToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(resourceId)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId)))).flatMapSingle((resource)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(resourceId)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId)))).flatMapSingle((resource)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v))))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(resourceId)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(resourceId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (resource)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(resource));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByCertificate(certificate)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by certificate", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByCertificate(certificate)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByIdentityProvider(identityProvider)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by identity provider", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByIdentityProvider(identityProvider)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByFactor(factor)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by factor", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByFactor(factor)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationRepository.findByIdIn(ids)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by ids {}", ids, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findByIdIn(ids)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No domain set on application")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No domain set on application")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(application.getId())).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(application.getId())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an application", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).throwable(throwable))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create0_migrated(domain, application, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkApplicationUniqueness(domain, application)).then(RxJava2Adapter.singleToMono(validateApplicationMetadata(application))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::setDefaultCertificate).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application1)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).application(application1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkApplicationUniqueness(domain, application)).then(RxJava2Adapter.singleToMono(validateApplicationMetadata(application))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::setDefaultCertificate).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application1)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).application(application1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).throwable(throwable))))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkApplicationUniqueness(domain, application)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkApplicationUniqueness(domain, application)).then(RxJava2Adapter.singleToMono(validateApplicationMetadata(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::setDefaultCertificate).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application1));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update0_migrated(domain, currentApplication, applicationToUpdate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(validateApplicationMetadata(applicationToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateApplicationIdentityProviders).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).oldValue(currentApplication).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(validateApplicationMetadata(applicationToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateApplicationIdentityProviders).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).oldValue(currentApplication).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(validateApplicationMetadata(applicationToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateApplicationIdentityProviders).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::update).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setDefaultCertificate_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(application.getDomain())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((certificates)->{
    if (certificates == null || certificates.isEmpty()) {
        return application;
    }
    Certificate defaultCertificate = certificates.stream().filter((certificate)->"Default".equals(certificate.getName())).findFirst().orElse(certificates.get(0));
    application.setCertificate(defaultCertificate.getId());
    return application;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(application.getDomain())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((certificates)->{
    if (certificates == null || certificates.isEmpty()) {
        return application;
    }
    Certificate defaultCertificate = certificates.stream().filter((certificate)->"Default".equals(certificate.getName())).findFirst().orElse(certificates.get(0));
    application.setCertificate(defaultCertificate.getId());
    return application;
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(certificateService.findByDomain(application.getDomain())).collectList
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkApplicationUniqueness_migrated(domain, application));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findByDomainAndClientId(domain, clientId)).hasElement().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findByDomainAndClientId(domain, clientId)).hasElement().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientId(domain, clientId)).hasElement
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateApplicationIdentityProviders_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((optionalIdentities)->{
    if (optionalIdentities == null || optionalIdentities.isEmpty()) {
        application.setIdentities(Collections.emptySet());
    } else {
        Set<String> identities = optionalIdentities.stream().filter(Optional::isPresent).map(Optional::get).map(IdentityProvider::getId).collect(Collectors.toSet());
        application.setIdentities(identities);
    }
    return application;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((optionalIdentities)->{
    if (optionalIdentities == null || optionalIdentities.isEmpty()) {
        application.setIdentities(Collections.emptySet());
    } else {
        Set<String> identities = optionalIdentities.stream().filter(Optional::isPresent).map(Optional::get).map(IdentityProvider::getId).collect(Collectors.toSet());
        application.setIdentities(identities);
    }
    return application;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (identity)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateApplicationMetadata_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(GrantTypeUtils.validateGrantTypes(application)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateRedirectUris).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateTokenEndpointAuthMethod).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, Single<Application>>)this::validateTlsClientAuth).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(GrantTypeUtils.validateGrantTypes(application)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateRedirectUris).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateTokenEndpointAuthMethod).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, Single<Application>>)this::validateTlsClientAuth).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(GrantTypeUtils.validateGrantTypes(application)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateRedirectUris).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateScopes).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateTokenEndpointAuthMethod).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, Single<Application>>)this::validateTlsClientAuth).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateRedirectUris_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(application.getDomain())).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))).flatMapSingle((domain)->{
    if (GrantTypeUtils.isRedirectUriRequired(oAuthSettings.getGrantTypes()) && CollectionUtils.isEmpty(oAuthSettings.getRedirectUris())) {
        if (AM_V2_VERSION.equals(oAuthSettings.getSoftwareVersion())) {
            oAuthSettings.setSoftwareVersion(null);
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()));
        }
    }
    if (oAuthSettings.getRedirectUris() != null) {
        for (String redirectUri : oAuthSettings.getRedirectUris()) {
            try {
                URI uri = UriBuilder.fromURIString(redirectUri).build();
                if (uri.getScheme() == null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
                }
                if (!domain.isRedirectUriLocalhostAllowed() && UriBuilder.isHttp(uri.getScheme()) && UriBuilder.isLocalhost(uri.getHost())) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")));
                }
                if (!domain.isRedirectUriUnsecuredHttpSchemeAllowed() && uri.getScheme().equalsIgnoreCase("http")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")));
                }
                if (!domain.isRedirectUriWildcardAllowed() && uri.getPath().contains("*")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")));
                }
                if (uri.getFragment() != null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")));
                }
            } catch (IllegalArgumentException | URISyntaxException ex) {
                return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
            }
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(application.getDomain())).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(application.getDomain())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateScopes_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid default scopes"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid default scopes"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scope approvals"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scope approvals"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.validateScope(application.getDomain(), scopes)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Application>>)(isValid)->{
    if (!isValid) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.validateScope(application.getDomain(), scopes)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Application>>)(isValid)->{
    if (!isValid) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.validateScope(application.getDomain(), scopes)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Application>>)(isValid)->{
    if (!isValid) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateTokenEndpointAuthMethod_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Invalid token_endpoint_auth_method for service application (client_credentials grant type)"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Invalid token_endpoint_auth_method for service application (client_credentials grant type)"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateTlsClientAuth_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType, referenceId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType, referenceId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(referenceType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findAll(referenceType));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByClient_migrated(referenceType, referenceId, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByClient(referenceType, referenceId, client));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndClient_migrated(domain, client));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndClient(domain, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByTemplate(referenceType, referenceId, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndTemplate_migrated(domain, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndTemplate(domain, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientAndTemplate(referenceType, referenceId, client, template));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientAndTemplate_migrated(domain, client, template));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientAndTemplate(domain, client, template));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(copyFromClient_migrated(domain, clientSource, clientTarget));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(copyFromClient(domain, clientSource, clientTarget));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, form, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, form, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, form, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, form, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, formId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, formId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, pageId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, pageId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, form, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, form, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, form, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, form, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, pageId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, pageId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(get_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(get());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getOrInitialize_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getOrInitialize());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setAdditionalInformation_migrated(additionalInformation));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(setAdditionalInformation(additionalInformation));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addAdditionalInformation_migrated(additionalInformation));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addAdditionalInformation(additionalInformation));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestedPermission, domain, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(requestedPermission, domain, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(remove_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(remove(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(certificateRepository.findByDomain(domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find certificates by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(certificateRepository.findByDomain(domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(certificateRepository.findAll()).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all certificates", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(certificateRepository.findAll()).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(newCertificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map(RxJavaReactorMigrationUtil.toJdkFunction((schema)->objectMapper.readValue(schema, CertificateSchema.class)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(newCertificate.getType())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate)));
}).apply(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->{
    auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).certificate(certificate));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(id)).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
            }
        });
    }
})).flatMap((v)->RxJava2Adapter.singleToMono((Single<Certificate>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CertificateWithSchema, Single<Certificate>>)(oldCertificate)->{
    Single<Certificate> certificateSingle = Single.create((emitter)->{
        Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
        certificateToUpdate.setName(updateCertificate.getName());
        try {
            CertificateSchema certificateSchema = oldCertificate.getSchema();
            JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
            JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
            certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                try {
                    String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                    String fileInformation = certificateConfiguration.get(key).asText();
                    if (!oldFileInformation.equals(fileInformation)) {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    }
                } catch (IOException ex) {
                    LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                    emitter.onError(ex);
                }
            });
            certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
            certificateToUpdate.setUpdatedAt(new Date());
        } catch (Exception ex) {
            LOGGER.error("An error occurs while trying to update certificate configuration", ex);
            emitter.onError(ex);
        }
        emitter.onSuccess(certificateToUpdate);
    });
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
        Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
    }).apply(o))))).onErrorResumeNext((ex)->{
        LOGGER.error("An error occurs while trying to update a certificate", ex);
        throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
    })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)))));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(id)).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
            }
        });
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(id)).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Certificate>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CertificateWithSchema, Single<Certificate>>)(oldCertificate)->{
    Single<Certificate> certificateSingle = Single.create((emitter)->{
        Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
        certificateToUpdate.setName(updateCertificate.getName());
        try {
            CertificateSchema certificateSchema = oldCertificate.getSchema();
            JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
            JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
            certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                try {
                    String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                    String fileInformation = certificateConfiguration.get(key).asText();
                    if (!oldFileInformation.equals(fileInformation)) {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    }
                } catch (IOException ex) {
                    LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                    emitter.onError(ex);
                }
            });
            certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
            certificateToUpdate.setUpdatedAt(new Date());
        } catch (Exception ex) {
            LOGGER.error("An error occurs while trying to update certificate configuration", ex);
            emitter.onError(ex);
        }
        emitter.onSuccess(certificateToUpdate);
    });
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
        Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
    }).apply(o))))).onErrorResumeNext((ex)->{
        LOGGER.error("An error occurs while trying to update a certificate", ex);
        throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
    })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(o))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(o))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(o))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateRepository.update(certificate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateRepository.update(certificate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(certificateId)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId)))).flatMapSingle((certificate)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(certificateId)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId)))).flatMapSingle((certificate)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v))))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(certificateId)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateRepository.findById(certificateId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (certificate)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificate));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateGrantTypes_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No application to validate grant"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No application to validate grant"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing or invalid grant type."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing or invalid grant type."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException(REFRESH_TOKEN + " grant type must be associated with one of " + String.join(", ", allowedRefreshTokenGrant)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException(REFRESH_TOKEN + " grant type must be associated with one of " + String.join(", ", allowedRefreshTokenGrant)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(this.findByDomainAndClientAndResources(domain, client, Arrays.asList(resourceId))).next());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.findByDomainAndClientAndResources(domain, client, Arrays.asList(resourceId))).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateScopes(toCreate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateIconUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(repository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)(r)->{
    AccessPolicy accessPolicy = new AccessPolicy();
    accessPolicy.setName("Deny all");
    accessPolicy.setDescription("Default deny access policy. Created by Gravitee.io.");
    accessPolicy.setType(AccessPolicyType.GROOVY);
    accessPolicy.setCondition("{\"onRequestScript\":\"import io.gravitee.policy.groovy.PolicyResult.State\\nresult.state = State.FAILURE;\"}");
    accessPolicy.setEnabled(true);
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(accessPolicyRepository.create(accessPolicy)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validateScopes(toCreate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateIconUri).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(repository::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)(r)->{
    AccessPolicy accessPolicy = new AccessPolicy();
    accessPolicy.setName("Deny all");
    accessPolicy.setDescription("Default deny access policy. Created by Gravitee.io.");
    accessPolicy.setType(AccessPolicyType.GROOVY);
    accessPolicy.setCondition("{\"onRequestScript\":\"import io.gravitee.policy.groovy.PolicyResult.State\\nresult.state = State.FAILURE;\"}");
    accessPolicy.setEnabled(true);
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(accessPolicyRepository.create(accessPolicy)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(accessPolicyRepository.create(accessPolicy)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(accessPolicyRepository.create(accessPolicy)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId)))).flatMapSingle(Single::just)).map(RxJavaReactorMigrationUtil.toJdkFunction(newResource::update)).map(RxJavaReactorMigrationUtil.toJdkFunction((toUpdate)->toUpdate.setUpdatedAt(new Date()))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateIconUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)repository::update).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId)))).flatMapSingle(Single::just)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateScopes).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateIconUri).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)repository::update).apply(v))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((found)->RxJava2Adapter.completableToMono(repository.delete(resourceId))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (found)->RxJava2Adapter.completableToMono(repository.delete(resourceId))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap((y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Completable>)(accessPolicy)->accessPolicyRepository.delete(accessPolicy.getId())).apply(y))).then().then(RxJava2Adapter.completableToMono(repository.delete(resource.getId()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Completable>)(accessPolicy)->accessPolicyRepository.delete(accessPolicy.getId())).apply(y))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap((y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Completable>)(accessPolicy)->accessPolicyRepository.delete(accessPolicy.getId())).apply(y))).then().then(RxJava2Adapter.completableToMono(repository.delete(resource.getId())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((r)->accessPolicyRepository.findByDomainAndResource(domain, r.getId()))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(ex));
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(ex));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByResources(resourceIds)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to find access policies by resource ids {}", resourceIds, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByResources(resourceIds)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById(accessPolicy).as(RxJava2Adapter::maybeToMono))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<AccessPolicy>>)(r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return accessPolicyRepository.create(accessPolicy);
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<AccessPolicy>>)(r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return accessPolicyRepository.create(accessPolicy);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById(accessPolicyId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Single<AccessPolicy>>)(oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return accessPolicyRepository.update(policyToUpdate);
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Single<AccessPolicy>>)(oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return accessPolicyRepository.update(policyToUpdate);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->RxJava2Adapter.completableToMono(accessPolicyRepository.delete(accessPolicy))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.completableToMono(accessPolicyRepository.delete(accessPolicy))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateScopes_migrated(toValidate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new MissingScopeException())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new MissingScopeException())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.findByDomainAndKeys(toValidate.getDomain(), toValidate.getResourceScopes())).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Scope>, Single<Resource>>)(scopes)->{
    if (toValidate.getResourceScopes().size() != scopes.size()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.findByDomainAndKeys(toValidate.getDomain(), toValidate.getResourceScopes())).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Scope>, Single<Resource>>)(scopes)->{
    if (toValidate.getResourceScopes().size() != scopes.size()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.findByDomainAndKeys(toValidate.getDomain(), toValidate.getResourceScopes())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Scope>, Single<Resource>>)(scopes)->{
    if (toValidate.getResourceScopes().size() != scopes.size()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateIconUri_migrated(toValidate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new MalformedIconUriException(toValidate.getIconUri()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new MalformedIconUriException(toValidate.getIconUri()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(toValidate)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(toValidate)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findByCriteria(criteria)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findByCriteria(criteria)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authContextRepository.findLastByTransactionId(transactionId)).switchIfEmpty(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}))).retryWhen
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authContextRepository.findLastByTransactionId(transactionId)).switchIfEmpty
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(attempts).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    if (throwable instanceof AuthenticationFlowConsistencyException) {
        if (++retryCount < maxRetries) {
            return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
        }
    }
    return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(attempts).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadContext_migrated(transactionId, expectedVersion));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadContext(transactionId, expectedVersion));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(removeContext_migrated(transactionId, expectedVersion));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(removeContext(transactionId, expectedVersion));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(clearContext_migrated(transactionId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(clearContext(transactionId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findAll(ReferenceType.DOMAIN, domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users by domain {}", domain, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userRepository.findAll(ReferenceType.DOMAIN, domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().update(user)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().update(user)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().update(user)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserRepository().update(user)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(userId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(update(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    if (needToAuditUserFactorsOperation(user1, oldUser)) {
        removeSensitiveFactorsData(user1.getFactors());
        removeSensitiveFactorsData(oldUser.getFactors());
        auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
    }
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(update(user)).doOnSuccess
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(update(userToUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then());
}).apply(y)))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(userId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(update(userToUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(update(userToUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(update(userToUpdate)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(formRepository.findAll(referenceType, referenceId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formRepository.findAll(referenceType, referenceId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(formRepository.findByClient(referenceType, referenceId, client)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and its client {}", referenceType, referenceId, client, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formRepository.findByClient(referenceType, referenceId, client)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomainAndClient(domain, clientSource).flatMapSingle((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return this.create(domain, clientTarget, form);
})).collectList());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(findByDomainAndClient(domain, clientSource).flatMapSingle((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return this.create(domain, clientTarget, form);
})).collectList
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new FormNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formRepository.update(formToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(formRepository.update(formToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a form", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, client, newForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, formId)).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, formId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(formRepository.delete(formId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkFormUniqueness_migrated(referenceType, referenceId, client, formTemplate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(maybeSource).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new FormAlreadyExistsException(formTemplate);
    }
    return true;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(maybeSource).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new FormAlreadyExistsException(formTemplate);
    }
    return true;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeSource).hasElement
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).switchIfEmpty(Mono.error(new DomainNotFoundException(hrid)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((envId)->domainRepository.search(environmentId, query)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(domainRepository::findAllByReferenceId))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).collectList()).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAll()).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findByIdIn(ids)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find domains by id in {}", ids, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findByIdIn(ids)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
    }
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createSystemScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createDefaultCertificate).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).domain(domain).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
    }
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createSystemScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createDefaultCertificate).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
    }
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createSystemScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createDefaultCertificate).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(domainRepository.create(domain))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createSystemScopes).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createDefaultCertificate).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(domain)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(domain)))));
})).flatMap((v)->RxJava2Adapter.singleToMono((Single<Domain>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, Single<Domain>>)(domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(domain)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(domain)))));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(domain)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(domain)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(validateDomain(domain)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(domainRepository.update(domain))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Domain>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, Single<Domain>>)(domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(toPatch)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(toPatch)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(validateDomain(toPatch)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(domainRepository.update(toPatch))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createSystemScopes_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError()).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->domain))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError()).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->domain))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createDefaultCertificate_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateService.create(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->domain))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateService.create(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->domain))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateService.create(domain.getId())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validateDomain_migrated(domain));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Domain must be attached to an environment"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidDomainException("Domain must be attached to an environment"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))).then());
    }
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))).then());
    }
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findByHrid(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid())).map
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))).then());
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(validateDomain_migrated(domain, environment));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(DomainValidator.validate(domain, environment.getDomainRestrictions())).then(RxJava2Adapter.singleToMono(findAll()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Domain>, CompletableSource>toJdkFunction((domains)->VirtualHostValidator.validateDomainVhosts(domain, domains)).apply(y)))).then())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(DomainValidator.validate(domain, environment.getDomainRestrictions())).then(RxJava2Adapter.singleToMono(findAll()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Domain>, CompletableSource>toJdkFunction((domains)->VirtualHostValidator.validateDomainVhosts(domain, domains)).apply(y)))).then())))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(DomainValidator.validate(domain, environment.getDomainRestrictions())).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAll()).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Domain>, CompletableSource>toJdkFunction((domains)->VirtualHostValidator.validateDomainVhosts(domain, domains)).apply(y)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getById_migrated(referenceType, referenceId, notifierId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getById(referenceType, referenceId, notifierId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndCriteria_migrated(domainId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndCriteria(domainId, criteria));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByReferenceAndCriteria_migrated(referenceType, referenceId, criteria));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByReferenceAndCriteria(referenceType, referenceId, criteria));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newAlertNotifier, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newAlertNotifier, byUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, alertNotifierId, patchAlertNotifier, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, alertNotifierId, patchAlertNotifier, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, notifierId, byUser));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, notifierId, byUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.merge(findAllSystem(assignableType), roleRepository.findAll(referenceType, referenceId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->assignableType == null || assignableType == role.getAssignableType())).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find roles by {}: {} assignable to {}", referenceType, referenceId, assignableType, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex)));
})));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new RoleNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isSystem))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType)).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(referenceType, referenceId, roleNames, assignableType)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    String joinedRoles = roleNames.stream().collect(Collectors.joining(", "));
    LOGGER.error("An error occurs while trying to find roles : {}", joinedRoles, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(referenceType, referenceId, roleNames, assignableType)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isDefaultRole))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType)).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Role>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, Single<Role>>)(oldRole)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId)).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
        }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
    }).apply(t)))));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Role>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, Single<Role>>)(oldRole)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId)).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
        }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
    }).apply(t)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId)).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
}).apply(t)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
}).apply(t)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType, referenceId, roleId)).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable))))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType, referenceId, roleId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(upsert_migrated(role));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
    }
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
    }
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType())).map
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
    }
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(roleName, roleId, referenceType, referenceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.findAll(referenceType, referenceId).collect(HashSet<Role>::new, Set::add)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<Role>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashSet<Role>, Single<Set<Role>>>)(roles)->{
    if (roles.stream().filter((role)->!role.getId().equals(roleId)).anyMatch((role)->role.getName().equals(roleName))) {
        throw new RoleAlreadyExistsException(roleName);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(roles));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.findAll(referenceType, referenceId).collect(HashSet<Role>::new, Set::add)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<Role>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashSet<Role>, Single<Set<Role>>>)(roles)->{
    if (roles.stream().filter((role)->!role.getId().equals(roleId)).anyMatch((role)->role.getName().equals(roleName))) {
        throw new RoleAlreadyExistsException(roleName);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(roles));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.findAll(referenceType, referenceId).collect(HashSet<Role>::new, Set::add)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Set<Role>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashSet<Role>, Single<Set<Role>>>)(roles)->{
    if (roles.stream().filter((role)->!role.getId().equals(roleId)).anyMatch((role)->role.getName().equals(roleName))) {
        throw new RoleAlreadyExistsException(roleName);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(roles));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(roles));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAllSystem_migrated(assignableType));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(roleRepository.findAll(ReferenceType.PLATFORM, Platform.DEFAULT)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.isSystem() && !role.isInternalOnly())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->assignableType == null || role.getAssignableType() == assignableType))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(roleRepository.findAll(ReferenceType.PLATFORM, Platform.DEFAULT)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.isSystem() && !role.isInternalOnly())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->assignableType == null || role.getAssignableType() == assignableType))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleRepository.findAll(ReferenceType.PLATFORM, Platform.DEFAULT)).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(extensionGrantRepository.findByDomain(domain)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find extension grants by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(extensionGrantRepository.findByDomain(domain)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id)))).flatMapSingle((tokenGranter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v))))))).flatMap((v)->RxJava2Adapter.singleToMono((Single<ExtensionGrant>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, Single<ExtensionGrant>>)(oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.update(extensionGrantToUpdate)).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
    }).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id)))).flatMapSingle((tokenGranter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v))))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (tokenGranter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<ExtensionGrant>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, Single<ExtensionGrant>>)(oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.update(extensionGrantToUpdate)).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
    }).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.update(extensionGrantToUpdate)).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantRepository.update(extensionGrantToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId)))).flatMapSingle((extensionGrant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId)))).flatMapSingle((extensionGrant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v))))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(extensionGrantId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (extensionGrant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
    if (clients1.size() == 0) {
        return extensionGrant;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (extensionGrant.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return extensionGrant;
    }
})
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findByDomainAndClientAndResources(domain, client, requestedResourcesIds)).collectList().flatMap((fetchedResourceSet)->RxJava2Adapter.singleToMono(this.validatePermissionRequest(requestedPermission, fetchedResourceSet, requestedResourcesIds)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.uma.PermissionRequest> permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<PermissionTicket>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PermissionTicket, Single<PermissionTicket>>)repository::create).apply(v))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceService.findByDomainAndClientAndResources(domain, client, requestedResourcesIds)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validatePermissionRequest(requestedPermission, fetchedResourceSet, requestedResourcesIds)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<PermissionTicket>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PermissionTicket, Single<PermissionTicket>>)repository::create).apply(v))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(repository.findById(id)).switchIfEmpty(Mono.error(new InvalidPermissionTicketException()))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(repository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (permissionTicket)->RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(repository.delete(permissionTicket.getId())).then(Mono.just(permissionTicket)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(repository.delete(permissionTicket.getId())).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validatePermissionRequest_migrated(requestedPermissions, registeredResources, requestedResourcesIds));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_OWNER)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_OWNER)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_SCOPE_RESOURCE)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(InvalidPermissionRequestException.INVALID_SCOPE_RESOURCE)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.installationRepository.find()).switchIfEmpty(Mono.error(new InstallationNotFoundException())));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.installationRepository.find()).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.installationRepository.find()).switchIfEmpty(RxJava2Adapter.singleToMono(createInternal())));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.installationRepository.find()).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.installationRepository.find()).switchIfEmpty(RxJava2Adapter.singleToMono(createInternal()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(get()).flatMap((v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)(installation)->{
    Installation toUpdate = new Installation(installation);
    toUpdate.setAdditionalInformation(additionalInformation);
    return updateInternal(toUpdate);
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(get()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)(installation)->{
    Installation toUpdate = new Installation(installation);
    toUpdate.setAdditionalInformation(additionalInformation);
    return updateInternal(toUpdate);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getOrInitialize()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->installation.getAdditionalInformation().putAll(additionalInformation))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)this::updateInternal).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getOrInitialize()).doOnSuccess
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)this::updateInternal).apply(v))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(this.installationRepository.find()).flatMap((installation)->RxJava2Adapter.completableToMono(installationRepository.delete(installation.getId()))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.installationRepository.find()).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (installation)->RxJava2Adapter.completableToMono(installationRepository.delete(installation.getId()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(installationRepository.create(installation));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(installationRepository.update(toUpdate));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(groupRepository.findAll(referenceType, referenceId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupRepository.findAll(referenceType, referenceId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(groupRepository.findByMember(memberId)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a groups using member ", memberId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupRepository.findByMember(memberId)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(groupRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
})).switchIfEmpty(Mono.error(new GroupNotFoundException(id))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Page<User>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Page<User>>>)(group)->{
    if (group.getMembers() == null || group.getMembers().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)));
    } else {
        List<String> sortedMembers = group.getMembers().stream().sorted().collect(Collectors.toList());
        List<String> pagedMemberIds = sortedMembers.subList(Math.min(sortedMembers.size(), page), Math.min(sortedMembers.size(), page + size));
        CommonUserService service = (group.getReferenceType() == ReferenceType.ORGANIZATION ? organizationUserService : userService);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findByIdIn(pagedMemberIds)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))));
    }
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Page<User>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Page<User>>>)(group)->{
    if (group.getMembers() == null || group.getMembers().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)));
    } else {
        List<String> sortedMembers = group.getMembers().stream().sorted().collect(Collectors.toList());
        List<String> pagedMemberIds = sortedMembers.subList(Math.min(sortedMembers.size(), page), Math.min(sortedMembers.size(), page + size));
        CommonUserService service = (group.getReferenceType() == ReferenceType.ORGANIZATION ? organizationUserService : userService);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findByIdIn(pagedMemberIds)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findByIdIn(pagedMemberIds)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(service.findByIdIn(pagedMemberIds)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(groupRepository.findByIdIn(ids)).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a group using ids {}", ids, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupRepository.findByIdIn(ids)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, newGroup.getName())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(this::setMembers).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, newGroup.getName())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(this::setMembers).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, newGroup.getName())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(this::setMembers).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, newGroup.getName())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(this::setMembers).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap((e)->RxJava2Adapter.maybeToMono(groupRepository.findByName(referenceType, referenceId, updateGroup.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
})))).flatMapSingle
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findByName(referenceType, referenceId, updateGroup.getName())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(setMembers(groupToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(setMembers(groupToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::update).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable))))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(assignRoles0_migrated(referenceType, referenceId, groupId, roles, principal, revoke));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    if (revoke) {
        if (groupToUpdate.getRoles() != null) {
            groupToUpdate.getRoles().removeAll(roles);
        }
    } else {
        groupToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(groupRepository.update(groupToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    if (revoke) {
        if (groupToUpdate.getRoles() != null) {
            groupToUpdate.getRoles().removeAll(roles);
        }
    } else {
        groupToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(groupRepository.update(groupToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    if (revoke) {
        if (groupToUpdate.getRoles() != null) {
            groupToUpdate.getRoles().removeAll(roles);
        }
    } else {
        groupToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(groupRepository.update(groupToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(groupRepository.update(groupToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkRoles(roles)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(groupRepository.update(groupToUpdate))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setMembers_migrated(group));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findByIdIn(userMembers)).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((userIds)->{
    group.setMembers(userIds);
    return group;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findByIdIn(userMembers)).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((userIds)->{
    group.setMembers(userIds);
    return group;
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(service.findByIdIn(userMembers)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(group)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkRoles_migrated(roles));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.alertNotifierRepository.findById(notifierId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId))).switchIfEmpty(Mono.error(new AlertNotifierNotFoundException(notifierId))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertNotifierRepository.findById(notifierId)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getById(referenceType, referenceId, alertNotifierId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<AlertNotifier>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AlertNotifier, Single<AlertNotifier>>)(alertNotifier)->{
    AlertNotifier toUpdate = patchAlertNotifier.patch(alertNotifier);
    if (toUpdate.equals(alertNotifier)) {
        return RxJava2Adapter.monoToSingle(Mono.just(alertNotifier));
    }
    return updateInternal(toUpdate, byUser, alertNotifier);
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getById(referenceType, referenceId, alertNotifierId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AlertNotifier>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AlertNotifier, Single<AlertNotifier>>)(alertNotifier)->{
    AlertNotifier toUpdate = patchAlertNotifier.patch(alertNotifier);
    if (toUpdate.equals(alertNotifier)) {
        return RxJava2Adapter.monoToSingle(Mono.just(alertNotifier));
    }
    return updateInternal(toUpdate, byUser, alertNotifier);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(alertNotifier));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(this.getById(referenceType, referenceId, notifierId)).flatMap((alertNotifier)->RxJava2Adapter.completableToMono(deleteInternal(alertNotifier, byUser))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getById(referenceType, referenceId, notifierId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (alertNotifier)->RxJava2Adapter.completableToMono(deleteInternal(alertNotifier, byUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertNotifierRepository.create(toCreate)).flatMap((updated)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE)))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(alertTrigger).principal(byUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(toCreate).principal(byUser).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertNotifierRepository.create(toCreate)).flatMap((updated)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE)))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(alertTrigger).principal(byUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(toCreate).principal(byUser).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.create(toCreate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE)))).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(alertNotifier, updatedBy, previous));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertNotifierRepository.update(alertNotifier)).flatMap((updated)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE)))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(previous).principal(updatedBy).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertNotifierRepository.update(alertNotifier)).flatMap((updated)->RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE)))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(previous).principal(updatedBy).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertNotifierRepository.update(alertNotifier)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE)))).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteInternal_migrated(alertNotifier, deletedBy));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(alertNotifierRepository.delete(alertNotifier.getId())).then(RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy))).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy).throwable(throwable)))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(alertNotifierRepository.delete(alertNotifier.getId())).then(RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE)))).then())).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(alertNotifierRepository.delete(alertNotifier.getId())).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE)))).then
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort(getFlowComparator()).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(defaultFlows(referenceType, referenceId)))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to find all flows for {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).filter
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort(getFlowComparator()).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(defaultFlows(referenceType, referenceId))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(referenceType, referenceId, application)).sort(getFlowComparator()).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(defaultFlows(referenceType, referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->{
    flow.setApplication(application);
    return flow;
})))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to find all flows for {} {} and application {}", referenceType, referenceId, application, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(referenceType, referenceId, application)).sort
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(referenceType, referenceId, application)).sort(getFlowComparator()).switchIfEmpty(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(defaultFlows(referenceType, referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->{
    flow.setApplication(application);
    return flow;
}))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(flowRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new FlowNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(referenceType, referenceId, id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.update(flowToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.update(flowToUpdate)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(flowRepository.findById(id)).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(id)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(flowRepository.delete(id)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate0_migrated(referenceType, referenceId, application, flows, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Multiple flows have the same Id"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Multiple flows have the same Id"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update flows", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.create(flow)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).throwable(throwable))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.create(flow)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).throwable(throwable))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.create(flow)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.create(flow)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowRepository.create(flow)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.create(event)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(entrypoint)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Organization())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEntrypoint)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEntrypoint)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Organization())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEntrypoint)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEntrypoint)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEntrypoint)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(entrypointRepository.delete(ENTRYPOINT_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same")))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new PermissionTicket().setId("success"))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same"))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.fromIterable(request).map(RxJavaReactorMigrationUtil.toJdkFunction((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()).setUserId("user_" + s.getResourceId()))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")), new Resource().setId("two").setResourceScopes(Arrays.asList("not", "same"))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.fromIterable(request).map(RxJavaReactorMigrationUtil.toJdkFunction((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new PermissionTicket().setId("success"))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b", "c")), new Resource().setId("two").setResourceScopes(Arrays.asList("c", "d"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.create(permissionTicketArgumentCaptor.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new PermissionTicket().setId("success"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById("id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new PermissionTicket())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById("id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById("id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new PermissionTicket().setId("id"))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(repository.delete("id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ScopeApproval())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser(DOMAIN, "userId")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(dummyScopeApproval)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser(DOMAIN, "userId")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(dummyScopeApproval)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalRepository.delete("my-consent")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(scopeApproval)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser("my-domain", "user-id")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(scopeApproval)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndUser("my-domain", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdAndUserId("my-domain", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdAndUserId("my-domain", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient("my-domain", "user-id", "client-id")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(scopeApproval)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndUserAndClient("my-domain", "user-id", "client-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new BotDetection())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(botDetectionRepository.findByReference(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new BotDetection())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(botDetectionRepository.findByReference(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(botDetectionRepository.create(any(BotDetection.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new BotDetection())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(botDetectionRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new BotDetection())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(botDetectionRepository.update(any(BotDetection.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new BotDetection())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById(detection.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(detection)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(botDetectionRepository.delete(detection.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById(detection.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(detection)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(botDetectionRepository.findById(detection.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(detection)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Sets.newHashSet(app))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById("my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById("my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById("my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Group())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByDomain(DOMAIN)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupService.findByDomain(DOMAIN)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN, 1, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(pagedGroups)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN, 1, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.create(any(Group.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.create(any(Group.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, updateGroup.getName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.update(any(Group.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Group())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(groupRepository.delete("my-group")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Group())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(groupRepository.delete("my-group")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(TechnicalException::new)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(roles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(roles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userService.findByIdIn(any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(group)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(organizationUserService.findByIdIn(any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new User())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Domain())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findByIdIn(Arrays.asList("1", "2"))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Domain())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findByIdIn(Arrays.asList("1", "2"))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Environment())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainRepository.create(any(Domain.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.create(anyString(), any(NewSystemScope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(certificateService.create(eq(domain.getId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Certificate())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipService.addOrUpdate(eq(ORGANIZATION_ID), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Role())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Environment())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when((domainRepository.findAll())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainRepository.create(any(Domain.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Environment())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainRepository.update(any(Domain.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Environment())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainRepository.update(any(Domain.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Environment())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainRepository.update(any(Domain.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(otherDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(domainRepository.delete(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(mockApplications)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(certificate)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(certificateService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(identityProvider)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(identityProviderService.delete(eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(extensionGrant)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(extensionGrantService.delete(eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(role))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(scope), 0, 1))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeService.delete(SCOPE_ID, true)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(group)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(groupService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(form)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(formService.delete(eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailTemplateService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(email)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(emailTemplateService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(reporterService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(reporter)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(reporterService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(flowService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByReference(DOMAIN_ID, ReferenceType.DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(membershipService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(factor)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(factorService.delete(DOMAIN_ID, FACTOR_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(resourceService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Collections.singletonList(resource)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(resourceService.delete(resource)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertTrigger)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(alertTriggerService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq(ALERT_TRIGGER_ID), isNull())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierService.findByDomainAndCriteria(DOMAIN_ID, new AlertNotifierCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(alertNotifierService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq(ALERT_NOTIFIER_ID), isNull())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(domainRepository.delete(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, 1))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailTemplateService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(reporterService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByReference(DOMAIN_ID, ReferenceType.DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(resourceService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierService.findByDomainAndCriteria(DOMAIN_ID, new AlertNotifierCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAllByCriteria(eq(criteria))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById("my-resource")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ServiceResource())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById("my-resource")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceRepository.findByReference(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new ServiceResource())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(resourceRepository.create(argThat((bean)->bean.getName().equals(resource.getName())))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(record)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(resourceRepository.create(argThat((bean)->bean.getName().equals(resource.getName())))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById(record.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(record)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(resourceRepository.update(argThat((bean)->bean.getId().equals(record.getId())))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(record)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById(record.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(record)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(resourceRepository.delete(record.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(resourceRepository.findById(record.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(record)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(factor)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new User())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq(1), eq(1))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(pageUsers)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq(1), eq(1))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain(DOMAIN, "my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain(DOMAIN, "my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain(DOMAIN, "my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(credential)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(credentialService.delete(credential.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "error")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(formOne, formTwo)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Form())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(formOne)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(form)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(0, 1)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(0, 1)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventRepository.create(any(Event.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(newEvent)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventRepository.create(any(Event.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), argThat((criteria)->criteria.getRoleId().isPresent()))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException("user-id"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), argThat((criteria)->criteria.getRoleId().isPresent()))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Membership())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new GroupNotFoundException("group-id"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findDefaultRole("orga#1", DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(environmentUserRole)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Membership())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq("domain#1"), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findDefaultRole("orga#1", DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(environmentUserRole)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findDefaultRole("orga#1", DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(environmentUserRole)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Membership())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq("domain#1"), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Membership())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(platformAdminRole)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.PLATFORM), eq(Platform.DEFAULT), argThat((criteria)->criteria != null && criteria.getUserId().get().equals(userId)))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(platformAdminRole)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.PLATFORM), eq(Platform.DEFAULT), argThat((criteria)->criteria != null && criteria.getUserId().get().equals(userId)))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alreadyExisting)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(environment)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(environment)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(environment)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(0L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentRepository.create(argThat((environment)->environment.getId().equals(Environment.DEFAULT)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultEnvironment)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentRepository.create(argThat((environment)->environment.getId().equals(ENVIRONMENT_ID)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new OrganizationNotFoundException(ORGANIZATION_ID))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEnvironment)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingEnvironment)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentRepository.update(argThat((environment)->environment.getId().equals(ENVIRONMENT_ID)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Credential())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialRepository.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Credential())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialRepository.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialRepository.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Credential())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialRepository.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialRepository.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Credential())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialRepository.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(credentialRepository.create(any(Credential.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Credential())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(credentialRepository.create(any(Credential.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Credential())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(credentialRepository.update(any(Credential.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Credential())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Credential())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(credentialRepository.update(any(Credential.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Credential())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(credentialRepository.delete("my-credential")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(alertTriggerRepository.findById(ALERT_TRIGGER_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(alertTriggerRepository.findById(ALERT_TRIGGER_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertTrigger)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(existingAlertTrigger)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(loginAttemptRepository.findByCriteria(loginAttemptCriteria)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(loginAttempt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(loginAttemptRepository.update(loginAttempt)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(loginAttempt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(loginAttemptRepository.findByCriteria(loginAttemptCriteria)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(loginAttempt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(loginAttemptRepository.update(loginAttempt)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(loginAttempt)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(new Application()), 0, 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 1, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(pageClients)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 1, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationRepository.findByIdentityProvider("client-idp")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationRepository.findByIdentityProvider("client-idp")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationRepository.findByCertificate("client-certificate")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationRepository.findByCertificate("client-certificate")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationRepository.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationRepository.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findAll(0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page(Collections.singleton(new Application()), 0, 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findAll(0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findAll(1, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(pageClients)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.findAll(1, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.countByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.countByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.create(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipService.addOrUpdate(eq(ORGANIZATION_ID), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Role())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.create(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "client_id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.create(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toPatch)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderService.findById("id1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idp1)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderService.findById("id2")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idp2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderService.findById("id1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idp1)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderService.findById("id2")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idp2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderService.findById("id1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idp1)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderService.findById("id2")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idp2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById(existingClient.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingClient)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationRepository.delete(existingClient.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formService.findByDomainAndClient(existingClient.getDomain(), existingClient.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(form)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(formService.delete(eq("my-domain"), eq(form.getId()))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailTemplateService.findByClient(ReferenceType.DOMAIN, existingClient.getDomain(), existingClient.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(email)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(emailTemplateService.delete(email.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByReference(existingClient.getId(), ReferenceType.APPLICATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(membershipService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById(existingClient.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingClient)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationRepository.delete(existingClient.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(formService.findByDomainAndClient(existingClient.getDomain(), existingClient.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailTemplateService.findByClient(ReferenceType.DOMAIN, existingClient.getDomain(), existingClient.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByReference(existingClient.getId(), ReferenceType.APPLICATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(TechnicalException::new)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, Collections.emptyList())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById("my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Role())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById("my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById("my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Role())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalManagementException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findByIdIn(Arrays.asList("my-role"))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Role())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findByIdIn(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleRepository.create(any(Role.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(role)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleRepository.update(any(Role.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(role)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.ORGANIZATION, ORGANIZATION_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleRepository.update(argThat((r)->r.getPermissionAcls().equals(Permission.unflatten(updateRole.getPermissions()))))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(role)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Role())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any(Event.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Role())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(TechnicalException::new)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleRepository.delete("my-role")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new ExtensionGrant())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(extensionGrantRepository.create(any(ExtensionGrant.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(extensionGrantRepository.create(any(ExtensionGrant.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(extensionGrantRepository.update(any(ExtensionGrant.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById(extensionGrant.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(extensionGrant)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(new Application()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById(extensionGrant.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(extensionGrant)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant.getGrantType())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(new Application()))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(extensionGrant, extensionGrant2)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById(extensionGrant2.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(extensionGrant2)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(extensionGrantRepository.delete(extensionGrant2.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant2.getGrantType() + "~" + extensionGrant2.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant2.getGrantType())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(new Application()))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(extensionGrant, extensionGrant2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ExtensionGrant())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingExtensionGrant)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(extensionGrantRepository.delete("my-extension-grant")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(existingExtensionGrant)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, "my-extension-grant~my-extension-grant")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, "my-extension-grant")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(credential)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(credentialService.delete(credential.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(alertNotifier)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(alertNotifierToUpdate)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Email())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByTemplate(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Email())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByTemplate(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByTemplate(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByTemplate(eq(ReferenceType.DOMAIN), eq(DOMAIN), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(emailRepository.create(any(Email.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Email())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByTemplate(eq(ReferenceType.DOMAIN), eq(DOMAIN), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByTemplate(eq(ReferenceType.DOMAIN), eq(DOMAIN), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Email())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Email())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(emailRepository.update(any(Email.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Email())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findById("my-email")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findById("my-email")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Email())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(emailRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(TechnicalException::new)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findById(email.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(email)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(emailRepository.delete(email.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mailOne, mailTwo)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "error")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid)).collectList
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Email())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mailOne)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Factor())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(factorRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Factor())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(factorRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(factorRepository.create(any(Factor.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Factor())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(factorRepository.create(any(Factor.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Factor())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(factorRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(factorRepository.create(any(Factor.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Factor())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(factorRepository.update(any(Factor.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Factor())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Factor())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(factorRepository.update(any(Factor.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById(factor.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(factor)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByFactor(factor.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(factorRepository.findById(factor.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(factor)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByFactor(factor.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(factorRepository.delete(factor.getId())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById("my-identity-provider")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new IdentityProvider())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById("my-identity-provider")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById("my-identity-provider")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new IdentityProvider())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(identityProvider)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(identityProviderRepository.create(any(IdentityProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idp)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(identityProviderRepository.create(any(IdentityProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new IdentityProvider())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(identityProviderRepository.update(any(IdentityProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idp)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new IdentityProvider())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByIdentityProvider("my-identity-provider")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new IdentityProvider())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingIdentityProvider)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(identityProviderRepository.delete("my-identity-provider")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByIdentityProvider("my-identity-provider")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Flow())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, DOMAIN)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, DOMAIN)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, DOMAIN)).collectList()).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, DOMAIN)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById("my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById("my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById("my-flow")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(flowRepository.delete("my-flow")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(newFlow)), RxJava2Adapter.monoToSingle(Mono.just(newFlow2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(newFlow)), RxJava2Adapter.monoToSingle(Mono.just(newFlow2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(existingFlow, existingFlow2)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, updateFlow.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, updateFlow2.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updateFlow)), RxJava2Adapter.monoToSingle(Mono.just(updateFlow2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updateFlow)), RxJava2Adapter.monoToSingle(Mono.just(updateFlow2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(existingFlow)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, updateFlow.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updateFlow2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updateFlow)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(existingFlow, existingFlow2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(existingFlow, existingFlow2)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, existingFlow2.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow2)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(flowRepository.findById(existingFlow.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingFlow)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(flowRepository.delete(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Tag())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tagRepository.create(any(Tag.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Tag())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Tag())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(spyHttpRequest_migrated(httpRequest));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromFuture(spyHttpRequest));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(new Scope()), 0, 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, 1)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKeys(DOMAIN, searchingScopes)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKeys(DOMAIN, searchingScopes)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.create(any(Scope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "MY-SCOPE")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.create(any(Scope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "MY_scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.create(any(Scope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toPatch)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toPatch)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("toPatchId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toUpdate)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toUpdate)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toUpdate)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("toUpdateId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("toUpdateId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(toUpdate)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("toUpdateId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(scope)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeRepository.delete("my-scope")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(role))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(application))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.update(anyString(), anyString(), any(UpdateRole.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Role())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(scope)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeRepository.delete("my-scope")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeRepository.findById("scope-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(scope)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Certificate())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Certificate())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateRepository.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(certificate)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByCertificate("my-certificate")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(certificateRepository.delete("my-certificate")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Event())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Certificate())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByCertificate("my-certificate")).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificatePluginService.getSchema(CertificateServiceImpl.DEFAULT_CERTIFICATE_PLUGIN)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just("{\n  \"type\" : \"object\",\n  \"id\" : \"urn:jsonschema:io:gravitee:am:certificate:pkcs12:PKCS12Configuration\",\n  \"properties\" : {\n    \"content\" : {\n      \"title\": \"PKCS#12 file\",\n      \"description\": \"PKCS file\",\n      \"type\" : \"string\",\n      \"widget\" : \"file\"\n    },\n    \"storepass\" : {\n      \"title\": \"Keystore password\",\n      \"description\": \"The password which is used to protect the integrity of the keystore.\",\n      \"type\" : \"string\"\n    },\n    \"alias\" : {\n      \"title\": \"Key alias\",\n      \"description\": \"Alias which identify the keystore entry.\",\n      \"type\" : \"string\"\n    },\n    \"keypass\" : {\n      \"title\": \"Key password\",\n      \"description\": \"The password used to protect the private key of the generated key pair.\",\n      \"type\" : \"string\"\n    }\n  },\n  \"required\": [\n    \"content\",\n    \"storepass\",\n    \"alias\",\n    \"keypass\"\n  ]\n}")))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(context)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(context)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(authFlowContextRepository.delete(SESSION_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(applications)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app1")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(2L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app2")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(applications)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(applications)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app1")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(2L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app2")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(applications)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.deleteByUserId("userId")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.deleteByUserId("userId")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(organization)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(0L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.create(argThat((organization)->organization.getId().equals(Organization.DEFAULT)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleService.createDefaultRoles("DEFAULT")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(entrypointService.createDefaults(defaultOrganization)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Entrypoint())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.count()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(0L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.create(argThat((organization)->organization.getId().equals(Organization.DEFAULT)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleService.createDefaultRoles(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(entrypointService.createDefaults(any(Organization.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Entrypoint())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.create(argThat((organization)->organization.getId().equals(ORGANIZATION_ID)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingOrganization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingOrganization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationRepository.update(argThat((organization)->organization.getId().equals(ORGANIZATION_ID)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingOrganization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId(RESOURCE_ID))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Resource().setId(RESOURCE_ID))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomainAndKeys(DOMAIN_ID, Arrays.asList("scope"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Arrays.asList(new Scope("scope")))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Resource().setId(RESOURCE_ID))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(repository.delete(RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(exitingRS)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomainAndKeys(DOMAIN_ID, Arrays.asList("scope"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(exitingRS)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(exitingRS)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(exitingRS)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.update(exitingRS)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(exitingRS)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Resource())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessPolicyRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new AccessPolicy())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new ArrayIndexOutOfBoundsException())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(new Resource()), 0, 1))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(repository.findByResources(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptyList(), 0, 0))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(repository.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Collections.emptyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(repository.findByDomainAndClientAndResources(eq(DOMAIN_ID), eq(CLIENT_ID), anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.update(toUpdate)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(toUpdate)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(accessPolicyRepository.findByDomainAndResource(toDelete.getDomain(), toDelete.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(repository.delete(RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(accessPolicyRepository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(accessPolicy)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).collectList
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(accessPolicyRepository.findByResources(resourceIds)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(accessPolicy)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findAccessPoliciesByResources(resourceIds)).collectList()).test
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(service.findAccessPoliciesByResources(resourceIds)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(accessPolicyRepository.findByResources(resourceIds)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessPolicyRepository.countByResource(RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(1L)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessPolicyRepository.countByResource(RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessPolicy)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessPolicy)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessPolicyRepository.create(accessPolicy)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessPolicy)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessPolicy)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(accessPolicyRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessPolicy)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessPolicyRepository.delete(POLICY_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userService.findByIdIn(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new User())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(applicationService.findByIdIn(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Application())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(request));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap((z)->profile(z, authentication).as(RxJava2Adapter::maybeToMono))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap((z)->profile(z, authentication).as(RxJava2Adapter::maybeToMono))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(retrieveUserFromIdToken_migrated(authContext, idToken));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((jwtClaimsSet)->createUser(authContext, jwtClaimsSet.getClaims())))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((jwtClaimsSet)->createUser(authContext, jwtClaimsSet.getClaims())))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
})).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(new Token(accessToken, TokenTypeHint.ACCESS_TOKEN))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(new Token(accessToken, TokenTypeHint.ACCESS_TOKEN))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(new Token(idToken, TokenTypeHint.ID_TOKEN))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(new Token(idToken, TokenTypeHint.ID_TOKEN))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(token, authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(retrieveUserFromIdToken(authentication.getContext(), token.getValue()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(retrieveUserFromIdToken(authentication.getContext(), idToken));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("No suitable value to retrieve user information"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("No suitable value to retrieve user information"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(provider.key()).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKey));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(verify_migrated(context));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(verify(context));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enroll_migrated(account));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(enroll(account));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(sendChallenge_migrated(context));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(sendChallenge(context));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(changeVariableFactorSecurity_migrated(factor));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(factor)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(factor)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(generateQrCode_migrated(user, enrolledFactor));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(introspectionTokenService.introspect(token, offlineVerification)).flatMap((e)->RxJava2Adapter.maybeToMono(clientSyncService.findByDomainAndClientId(e.getDomain(), e.getAud())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.oidc.Client client)->new OAuth2AuthResponse(e, client))))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(introspectionTokenService.introspect(token, offlineVerification)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientSyncService.findByDomainAndClientId(e.getDomain(), e.getAud())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(introspect_migrated(token, offlineVerification));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(introspect(token, offlineVerification));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByClientId_migrated(clientId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByClientId(clientId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndClientId_migrated(domain, clientId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndClientId(domain, clientId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTemplates_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTemplates());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (authenticationProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (authenticationProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(get_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(get(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getUserProvider_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getUserProvider(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(get_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(get(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByAlgorithm_migrated(algorithm));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByAlgorithm(algorithm));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByExtensionPoint_migrated(extensionPoint, client, filter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByExtensionPoint(extensionPoint, client, filter));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client != null ? RxJava2Adapter.monoToMaybe(Mono.just(client)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client != null ? RxJava2Adapter.monoToMaybe(Mono.just(client)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | optClient.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(optClient.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | optClient.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(optClient.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(templates));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain.getId())).collectList().flatMap((reporters)->RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain.getId())).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.common.auth.user.impl.UserAuthenticationManagerImpl.UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return connect(user);
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(authentication, domain, client, user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->eventManager.publishEvent(AuthenticationEvent.FAILURE, new AuthenticationDetails(authentication, domain, client, throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError()).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.common.auth.user.impl.UserAuthenticationManagerImpl.UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return connect(user);
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(lastException));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(lastException));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<UserAuthenticationManagerImpl.UserAuthentication, MaybeSource<User>>)(userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
        }
    } else {
        return userAuthenticationService.loadPreAuthenticatedUser(user);
    }
}).apply(e)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError()).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<UserAuthenticationManagerImpl.UserAuthentication, MaybeSource<User>>)(userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
        }
    } else {
        return userAuthenticationService.loadPreAuthenticatedUser(user);
    }
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(preAuthentication(client, authentication, authProvider)).then(RxJava2Adapter.maybeToMono(loadUserByUsername0(client, authentication, authProvider, preAuthenticated))).flatMap((z)->RxJava2Adapter.completableToMono(postAuthentication(client, authentication, authProvider, z)).then(Mono.just(z)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(preAuthentication(client, authentication, authProvider)).then(RxJava2Adapter.maybeToMono(loadUserByUsername0(client, authentication, authProvider, preAuthenticated))).flatMap((z)->RxJava2Adapter.completableToMono(postAuthentication(client, authentication, authProvider, z)).then(Mono.just(z)))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(preAuthentication(client, authentication, authProvider)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(preAuthentication(client, authentication, authProvider)).then(RxJava2Adapter.maybeToMono(loadUserByUsername0(client, authentication, authProvider, preAuthenticated)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(postAuthentication(client, authentication, authProvider, z)).then
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, preAuthenticated));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(authProvider)).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            }).apply(a)))));
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}))).onErrorResumeNext((error)->{
    logger.debug("Unable to authenticate [{}] with authentication provider [{}]", authentication.getPrincipal(), authProvider, error);
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(authProvider)).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            }).apply(a)))));
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.get(authProvider)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            }).apply(a)))));
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
        }).apply(a)))));
    } else {
        return authenticationProvider.loadUserByUsername(authentication);
    }
}).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
        }).apply(a)))));
    } else {
        return authenticationProvider.loadUserByUsername(authentication);
    }
}).apply(y)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
}).apply(a)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
}).apply(a)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(preAuthentication_migrated(client, authentication, source));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(preAuthentication(client, authentication.getPrincipal().toString(), source));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(postAuthentication_migrated(client, authentication, source, userAuthentication));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(postAuthentication(client, authentication.getPrincipal().toString(), source, userAuthentication));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(preAuthentication_migrated(client, username, source));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(loginAttemptService.checkAccount(criteria, accountSettings)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(loginAttemptService.checkAccount(criteria, accountSettings)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptService.checkAccount(criteria, accountSettings)).map
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(postAuthentication_migrated(client, username, source, userAuthentication));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(loginAttemptService.loginSucceeded(criteria));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(criteria.domain(), criteria.username(), criteria.identityProvider())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(loginAttemptService.loginFailed(criteria, accountSettings)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(criteria.domain(), criteria.username(), criteria.identityProvider())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(loginAttemptService.loginFailed(criteria, accountSettings)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(criteria.domain(), criteria.username(), criteria.identityProvider())).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(loginAttemptService.loginFailed(criteria, accountSettings)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(loginAttemptService.loginFailed(criteria, accountSettings)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(loginAttemptService.loginFailed(criteria, accountSettings)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(authenticate_migrated(client, authentication, preAuthenticated));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(authenticate(client, authentication, preAuthenticated));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(client, username, request));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadUserByUsername(client, username, request));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadPreAuthenticatedUser_migrated(subject, request));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadPreAuthenticatedUser(subject, request));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(connect_migrated(user, afterAuthentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(connect(user, afterAuthentication));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(authenticate_migrated(client, authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(authenticate(client, authentication, false));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadPreAuthenticatedUser_migrated(subject));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadPreAuthenticatedUser(subject, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(connect_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(connect(user, true));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(connect_migrated(principal, afterAuthentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(connect(principal, afterAuthentication));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadPreAuthenticatedUser_migrated(subject, request));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadPreAuthenticatedUser(subject, request));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadPreAuthenticatedUser_migrated(principal));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loadPreAuthenticatedUser(principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(lockAccount_migrated(criteria, accountSettings, client, user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(lockAccount(criteria, accountSettings, client, user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(connect_migrated(principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(connect(principal, true));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndExternalIdAndSource_migrated(domain, externalId, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndExternalIdAndSource(domain, externalId, source));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByDomainAndUsernameAndSource_migrated(domain, username, source));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByDomainAndUsernameAndSource(domain, username, source));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomainAndCriteria_migrated(domain, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomainAndCriteria(domain, criteria));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enhance_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(enhance(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addFactor_migrated(userId, enrolledFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addFactor(userId, enrolledFactor, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encode(jwt, certificateProvider));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encode_migrated(jwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encode(jwt, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encodeUserinfo_migrated(jwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encodeUserinfo(jwt, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encodeAuthorization_migrated(jwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encodeAuthorization(jwt, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(decodeAndVerify_migrated(jwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(decodeAndVerify(jwt, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(decodeAndVerify_migrated(jwt, certificateProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(decodeAndVerify(jwt, certificateProvider));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(decode_migrated(jwt));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(decode(jwt));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationsSource).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(applicationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(applicationId)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(token)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client))).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<JWT>>)(jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return RxJava2Adapter.monoToSingle(Mono.just(jwt));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(jwt.getJti())).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    })));
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(token)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(token)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decode(token)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<JWT>>)(jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return RxJava2Adapter.monoToSingle(Mono.just(jwt));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(jwt.getJti())).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    })));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(jwt.getJti())).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    if (accessToken.getExpireAt().before(new Date())) {
        throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
    }
    return jwt;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(jwt.getJti())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Map<String, String>> singlePageRendering = RxJava2Adapter.monoToSingle(Mono.just(errorParams))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | singlePageRendering = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.jwtService.decode(jarm)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->{
    Map<String, String> result = new HashMap<>();
    result.put(ERROR_PARAM, (String)jwt.get(ERROR_PARAM));
    result.put(ERROR_DESCRIPTION_PARAM, (String)jwt.get(ERROR_DESCRIPTION_PARAM));
    return result;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.jwtService.decode(jarm)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.jwtService.encode(jwt, certificateProvider)).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setValue_migrated(payload));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.jwtService.decodeAndVerify(payload, certificateProvider)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jwt)->{
    this.lastLogin = new Date(jwt.getExp() * 1000 - this.timeout());
    this.setData(jwt);
})).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->this))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.jwtService.decodeAndVerify(payload, certificateProvider)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jwt)->{
    this.lastLogin = new Date(jwt.getExp() * 1000 - this.timeout());
    this.setData(jwt);
})).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->this))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.jwtService.decodeAndVerify(payload, certificateProvider)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider != null ? RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider != null ? RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificate.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(certificate.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificate.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(certificate.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKey));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<CookieSession> sessionObs = RxJava2Adapter.monoToSingle(Mono.just(session))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | sessionObs = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(session.setValue(sessionCookie.getValue())).flatMap((v)->RxJava2Adapter.singleToMono((Single<CookieSession>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CookieSession, Single<CookieSession>>)(currentSession)->{
    String userId = currentSession.get(USER_ID_KEY);
    if (!StringUtils.isEmpty(userId)) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(userId)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap((z)->RxJava2Adapter.singleToMono(userService.enhance(z))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(RxJava2Adapter.singleToMono(cleanupSession(currentSession)))).onErrorResumeNext(cleanupSession(currentSession));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
    }
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(session.setValue(sessionCookie.getValue())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<CookieSession>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CookieSession, Single<CookieSession>>)(currentSession)->{
    String userId = currentSession.get(USER_ID_KEY);
    if (!StringUtils.isEmpty(userId)) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(userId)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap((z)->RxJava2Adapter.singleToMono(userService.enhance(z))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(RxJava2Adapter.singleToMono(cleanupSession(currentSession)))).onErrorResumeNext(cleanupSession(currentSession));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(userId)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap((z)->RxJava2Adapter.singleToMono(userService.enhance(z))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(RxJava2Adapter.singleToMono(cleanupSession(currentSession)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(userId)).doOnSuccess
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(userService.enhance(z))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(userId)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap((z)->RxJava2Adapter.singleToMono(userService.enhance(z))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(RxJava2Adapter.singleToMono(cleanupSession(currentSession)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((t)->logger.warn("Unable to restore the session", t)))).doFinally
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(sessionObs).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(cleanupSession_migrated(currentSession));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.defer(()->{
    currentSession.setValue(null);
    return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())).defaultIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(signedResponseAlg)).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(signedResponseAlg)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(signedResponseAlg)).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())).defaultIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(decode(certificateProvider, jwt)).map(RxJavaReactorMigrationUtil.toJdkFunction(JWT::new)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(decode(certificateProvider, jwt)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(sign_migrated(certificateProvider, jwt));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        String encodedToken = certificateProvider.getJwtBuilder().sign(jwt);
        emitter.onSuccess(encodedToken);
    } catch (Exception ex) {
        logger.error("Failed to sign JWT", ex);
        emitter.onError(new InvalidTokenException("The JWT token couldn\'t be signed", ex));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getClient_migrated(clientId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(clientSyncService.findById(clientId)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(clientId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(clientSyncService.findById(clientId)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(clientId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientSyncService.findById(clientId)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(clientId))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.search(ReferenceType.DOMAIN, domain, criteria, 0, 2)).map(RxJavaReactorMigrationUtil.toJdkFunction((p)->new ArrayList<>(p.getData()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.search(ReferenceType.DOMAIN, domain, criteria, 0, 2)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(saveOrUpdate(principal, afterAuthentication)).flatMap((user)->RxJava2Adapter.completableToMono(checkAccountStatus(user)).then(Mono.defer(()->RxJava2Adapter.singleToMono(userService.enhance(user))))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(saveOrUpdate(principal, afterAuthentication)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAccountStatus(user)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(userService.enhance(user))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty(Mono.error(new UserNotFoundException(subject))).flatMap((z)->RxJava2Adapter.maybeToMono(identityProviderManager.get(z.getSource())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(update(z, idpUser, false)).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(a)))));
}).apply(v)))).switchIfEmpty(Mono.defer(()->RxJava2Adapter.singleToMono(userService.enhance(z))))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.get(z.getSource())).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).apply(v)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(update(z, idpUser, false)).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(a)))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(update(z, idpUser, false)).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(a)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(update(z, idpUser, false)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(a)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(userService.enhance(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(userService.update(user)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).type(EventType.USER_LOCKED).domain(criteria.domain()).client(criteria.client()).principal(null).user(user1)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.update(user)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveOrUpdate_migrated(principal, afterAuthentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle((existingUser)->update(existingUser, principal, afterAuthentication)).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return create(principal, afterAuthentication);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkAccountStatus_migrated(user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new AccountDisabledException("Account is disabled for user " + user.getUsername()))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new AccountDisabledException("Account is disabled for user " + user.getUsername()))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(existingUser, principal, afterAuthentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.update(existingUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(principal, afterAuthentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.create(newUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(domainExecutionPolicies));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(applicationExecutionPolicies));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Stream.concat(domainExecutionPolicies.stream(), applicationExecutionPolicies.stream()).collect(Collectors.toList())));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm("unknown")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm("RS512")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(rs512CertProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get("notExistingId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get("existingId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(rs256CertProvider)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource(domainId, username, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(createdUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(User.class))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(User.class))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource(domainId, username, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(createdUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(User.class))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(User.class))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowManager.findByExtensionPoint(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowManager.findByExtensionPoint(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(policy))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowManager.findByExtensionPoint(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Arrays.asList(policy, policy))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username")));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-2")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username")));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new AccountDisabledException(idpUser.getUsername())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username")));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("username")));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("username")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(loginAttemptService.checkAccount(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("username")));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(Mono.empty());
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("username")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(loginAttemptService.checkAccount(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(authenticationFlowContextService.clearContext(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), (CertificateProvider)eq(null))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("token")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(client.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(requestedClient));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(requestedClient));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessTokenRepository.findByToken(jwt.getJti())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new JWTException("invalid token"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessTokenRepository.findByToken(jwt.getJti())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(accessTokenRepository.findByToken(jwt.getJti())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessToken)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), (CertificateProvider)eq(null))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("token")))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(flow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domainFlow, appFlow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domainFlow, appFlow)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domainFlow, appFlow)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enrichAuthFlowContext_migrated(executionContext));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(authContextRepository.create(authContext));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (arg)->RxJava2Adapter.monoToSingle(Mono.just(arg.getArgument(0)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono((user != null) ? RxJava2Adapter.monoToMaybe(Mono.just(user)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (user != null) ? RxJava2Adapter.monoToMaybe(Mono.just(user)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (user != null) ? RxJava2Adapter.monoToMaybe(Mono.just(user)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userDetailsService.loadUserByUsername((String)authentication.getPrincipal())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        throw new BadCredentialsException("Bad credentials");
    }
    return createUser(authentication.getContext(), user);
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userDetailsService.loadUserByUsername((String)authentication.getPrincipal())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userDetailsService.loadUserByUsername(username)).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->createUser(new SimpleAuthenticationContext(), user))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userDetailsService.loadUserByUsername(username)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("username"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        String username = (String)authentication.getPrincipal();
        String password = (String)authentication.getCredentials();
        AuthenticationResponse response = authenticator.authenticate(new AuthenticationRequest(username, new Credential(password), ReturnAttributes.ALL_USER.value()));
        if (response.getResult()) {
            LdapEntry userEntry = response.getLdapEntry();
            return userEntry;
        } else {
            LOGGER.debug("Failed to authenticate user", response.getMessage());
            throw new BadCredentialsException(response.getMessage());
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs during LDAP authentication", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction((ldapUser)->createUser(authentication.getContext(), ldapUser))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        SearchFilter searchFilter = createSearchFilter(userSearchExecutor, username);
        SearchResult userSearchResult = userSearchExecutor.search(searchConnectionFactory, searchFilter).getResult();
        LdapEntry userEntry = userSearchResult.getEntry();
        if (userEntry != null) {
            return userEntry;
        } else {
            throw new UsernameNotFoundException(username);
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs while searching for a LDAP user", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction((ldapUser)->createUser(new SimpleAuthenticationContext(), ldapUser))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    Map<String, String> bodyResponse = URLEncodedUtils.format(httpResponse.bodyAsString());
    return new Token(bodyResponse.get("access_token"), TokenTypeHint.ACCESS_TOKEN);
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    Map<String, String> bodyResponse = URLEncodedUtils.format(httpResponse.bodyAsString());
    return new Token(bodyResponse.get("access_token"), TokenTypeHint.ACCESS_TOKEN);
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(findUserByMultipleField(username)).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Document>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
}).apply(e)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(findUserByMultipleField(username)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Document>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findUserByMultipleField_migrated(value));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(usersCol.find(query))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(usersCol.find(query))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findUserByUsername(encodedUsername)).map(RxJavaReactorMigrationUtil.toJdkFunction((document)->createUser(new SimpleAuthenticationContext(), document))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findUserByUsername(encodedUsername)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findUserByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCol.find(query).first()), BackpressureStrategy.BUFFER).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCol.find(query).first()), BackpressureStrategy.BUFFER).next()))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCol.find(query).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByUsername(username)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        Document document = new Document();
        document.put(FIELD_ID, user.getId() != null ? user.getId() : RandomString.generate());
        document.put(configuration.getUsernameField(), username);
        if (user.getCredentials() != null) {
            if (configuration.isUseDedicatedSalt()) {
                byte[] salt = createSalt();
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials(), salt));
                document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
            } else {
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials()));
            }
        }
        if (user.getAdditionalInformation() != null) {
            document.putAll(user.getAdditionalInformation());
        }
        document.put(FIELD_CREATED_AT, new Date());
        document.put(FIELD_UPDATED_AT, document.get(FIELD_CREATED_AT));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(document.getString(FIELD_ID))).single()));
    }
}).apply(v))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findByUsername(username)).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        Document document = new Document();
        document.put(FIELD_ID, user.getId() != null ? user.getId() : RandomString.generate());
        document.put(configuration.getUsernameField(), username);
        if (user.getCredentials() != null) {
            if (configuration.isUseDedicatedSalt()) {
                byte[] salt = createSalt();
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials(), salt));
                document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
            } else {
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials()));
            }
        }
        if (user.getAdditionalInformation() != null) {
            document.putAll(user.getAdditionalInformation());
        }
        document.put(FIELD_CREATED_AT, new Date());
        document.put(FIELD_UPDATED_AT, document.get(FIELD_CREATED_AT));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(document.getString(FIELD_ID))).single()));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document))).flatMap((success)->RxJava2Adapter.maybeToMono(findById(document.getString(FIELD_ID))).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(document.getString(FIELD_ID))).single
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findById(id)).switchIfEmpty(Mono.error(new UserNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(oldUser.getId())).single()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(oldUser.getId())).single
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findById(id)).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap((idpUser)->Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id)))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findById(id)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getWellKnownUri()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = createResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating the user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = updateResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(updateUser.getUsername(), userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating the user", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting the user", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByUser_migrated(usersResourceConfiguration, readResourceConfiguration, user));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while searching user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching the user", ex))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching the user", ex))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, httpURI, httpMethod, httpHeaders, httpBody));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(responseHandler);
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while authenticating the user", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadByUsername0_migrated(authenticationContext, user));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when loading pre-authenticated user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when when loading pre-authenticated user", ex))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when when loading pre-authenticated user", ex))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, httpURI, httpMethod, httpHeaders, httpBody));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(responseHandler);
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", state)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap((z)->this.profile(z, authentication).as(RxJava2Adapter::maybeToMono))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap((z)->this.profile(z, authentication).as(RxJava2Adapter::maybeToMono))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, auth));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(cut.asyncSignInUrl("https://gravitee.io", state)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(asyncSignInUrl_migrated(redirectUri, state));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    String body = httpResponse.bodyAsString();
    String[] tokenResponse = body.split("&");
    String token = null;
    String tokenSecret = null;
    String callbackState = null;
    for (String responsePair : tokenResponse) {
        String[] pair = responsePair.split("=");
        if (pair.length > 1) {
            if (OAUTH_TOKEN.equals(pair[0])) {
                token = pair[1];
            }
            if (OAUTH_TOKEN_SECRET.equals(pair[0])) {
                tokenSecret = pair[1];
            }
            if ("oauth_callback_confirmed".equals(pair[0])) {
                callbackState = pair[1];
            }
        }
    }
    if ("true".equalsIgnoreCase(callbackState)) {
        tokenMemory.put(token, tokenSecret);
        UriBuilder builder = UriBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
        builder.addParameter(OAUTH_TOKEN, token);
        Request request = new Request();
        request.setMethod(HttpMethod.GET);
        request.setUri(builder.build().toString());
        return request;
    }
    throw new BadCredentialsException("Token returned by Twitter mismatch");
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    String body = httpResponse.bodyAsString();
    String[] tokenResponse = body.split("&");
    String token = null;
    String tokenSecret = null;
    String callbackState = null;
    for (String responsePair : tokenResponse) {
        String[] pair = responsePair.split("=");
        if (pair.length > 1) {
            if (OAUTH_TOKEN.equals(pair[0])) {
                token = pair[1];
            }
            if (OAUTH_TOKEN_SECRET.equals(pair[0])) {
                tokenSecret = pair[1];
            }
            if ("oauth_callback_confirmed".equals(pair[0])) {
                callbackState = pair[1];
            }
        }
    }
    if ("true".equalsIgnoreCase(callbackState)) {
        tokenMemory.put(token, tokenSecret);
        UriBuilder builder = UriBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
        builder.addParameter(OAUTH_TOKEN, token);
        Request request = new Request();
        request.setMethod(HttpMethod.GET);
        request.setUri(builder.build().toString());
        return request;
    }
    throw new BadCredentialsException("Token returned by Twitter mismatch");
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing OAuth Token"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing OAuth Token"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing Token Verifier"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing Token Verifier"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(token, authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", RandomString.generate())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", RandomString.generate())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", RandomString.generate())).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", RandomString.generate())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(selectUserByMultipleField(username)).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Map<String, Object>>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
}).apply(e)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(selectUserByMultipleField(username)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Map<String, Object>>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(selectUserByMultipleField_migrated(username));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->{
    Statement statement = connection.createStatement(sql);
    for (int i = 0; i < args.length; ++i) {
        statement = statement.bind(i, username);
    }
    return RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe());
})).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->{
    Statement statement = connection.createStatement(sql);
    for (int i = 0; i < args.length; ++i) {
        statement = statement.bind(i, username);
    }
    return RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe());
})).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow)))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(selectUserByUsername(username)).map(RxJavaReactorMigrationUtil.toJdkFunction((attributes)->createUser(new SimpleAuthenticationContext(), attributes))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(selectUserByUsername(username)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(selectUserByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(selectUserByEmail(email)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::createUser)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(selectUserByEmail(email)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(selectUserByEmail_migrated(email));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(query(sql, email)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(query(sql, email)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(sql, email)).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(selectUserByUsername(username)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::createUser)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(selectUserByUsername(username)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Connection, Single<User>>)(cnx)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(selectUserByUsername(cnx, user.getUsername())).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
        if (!isEmpty) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
        } else {
            String sql;
            Object[] args;
            if (configuration.isUseDedicatedSalt()) {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
                args = new Object[6];
                byte[] salt = createSalt();
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
                args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
                args[4] = user.getEmail();
                args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            } else {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
                args = new Object[5];
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
                args[3] = user.getEmail();
                args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            }
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
        }
    }).apply(x))))).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe());
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Connection, Single<User>>)(cnx)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(selectUserByUsername(cnx, user.getUsername())).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
        if (!isEmpty) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
        } else {
            String sql;
            Object[] args;
            if (configuration.isUseDedicatedSalt()) {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
                args = new Object[6];
                byte[] salt = createSalt();
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
                args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
                args[4] = user.getEmail();
                args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            } else {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
                args = new Object[5];
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
                args[3] = user.getEmail();
                args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            }
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
        }
    }).apply(x))))).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe());
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(selectUserByUsername(cnx, user.getUsername())).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x))))).doFinally
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(selectUserByUsername(cnx, user.getUsername())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(selectUserByUsername_migrated(cnx, username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(query(cnx, sql, username)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(query(cnx, sql, username)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(cnx, sql, username)).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Single<User>>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)));
    }
    ((DefaultUser)updateUser).setId(id);
    return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(sql, args)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Single<User>>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)));
    }
    ((DefaultUser)updateUser).setId(id);
    return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(query(sql, id)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)).flatMap((y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Completable>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y))).then());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(sql, id)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Completable>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(selectUserByUsername_migrated(username));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(query(sql, username)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.flowableToFlux(query(sql, username)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(query(sql, username)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(query_migrated(connection, sql, args));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(query_migrated(sql, args));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flux().flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->query(connection, sql, args).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flux().flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->query(connection, sql, args).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flux
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userProvider.create(user)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userProvider.update(createdUser.getId(), updateUser)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userProvider.create(user)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (rp)->RxJava2Adapter.singleToMono(Single.fromPublisher(rp.getRowsUpdated()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", state)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Missing authorization code"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString("access_token");
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString("access_token");
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject());
})).flatMap((z)->RxJava2Adapter.maybeToMono(requestEmailAddress(accessToken)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<java.lang.String> address)->{
    address.ifPresent((java.lang.String value)->{
        ((DefaultUser)z).setEmail(value);
        ((DefaultUser)z).setUsername(value);
        z.getAdditionalInformation().put(StandardClaims.EMAIL, value);
        z.getAdditionalInformation().put(StandardClaims.PREFERRED_USERNAME, value);
    });
    return z;
})))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject());
})).flatMap((z)->RxJava2Adapter.maybeToMono(requestEmailAddress(accessToken)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<java.lang.String> address)->{
    address.ifPresent((java.lang.String value)->{
        ((DefaultUser)z).setEmail(value);
        ((DefaultUser)z).setUsername(value);
        z.getAdditionalInformation().put(StandardClaims.EMAIL, value);
        z.getAdditionalInformation().put(StandardClaims.PREFERRED_USERNAME, value);
    });
    return z;
})))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestEmailAddress(accessToken)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(requestEmailAddress_migrated(accessToken));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() == 200) {
        String email = null;
        JsonObject payload = httpClientResponse.bodyAsJsonObject();
        if (payload != null && payload.containsKey("elements")) {
            JsonArray elements = payload.getJsonArray("elements");
            for (int i = 0; i < elements.size(); ++i) {
                JsonObject emailPayload = elements.getJsonObject(i);
                if (emailPayload != null && emailPayload.containsKey("handle~")) {
                    JsonObject handle = emailPayload.getJsonObject("handle~");
                    email = handle.getString("emailAddress");
                    break;
                }
            }
        }
        return Optional.ofNullable(email);
    } else {
        LOGGER.warn("Unable to retrieve the LinkedIn email address : {}", httpClientResponse.statusMessage());
        return Optional.empty();
    }
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() == 200) {
        String email = null;
        JsonObject payload = httpClientResponse.bodyAsJsonObject();
        if (payload != null && payload.containsKey("elements")) {
            JsonArray elements = payload.getJsonArray("elements");
            for (int i = 0; i < elements.size(); ++i) {
                JsonObject emailPayload = elements.getJsonObject(i);
                if (emailPayload != null && emailPayload.containsKey("handle~")) {
                    JsonObject handle = emailPayload.getJsonObject("handle~");
                    email = handle.getString("emailAddress");
                    break;
                }
            }
        }
        return Optional.ofNullable(email);
    } else {
        LOGGER.warn("Unable to retrieve the LinkedIn email address : {}", httpClientResponse.statusMessage());
        return Optional.empty();
    }
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(Optional.empty())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(Optional.empty())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(provider.asyncSignInUrl("https://gravitee.io", state)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, (String)context.get(KEY_ORGANIZATION_ID), username, "gravitee")).filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (user.getPassword() == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        return false;
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    DefaultUser idpUser = new DefaultUser(user.getUsername());
    idpUser.setId(user.getId());
    idpUser.setCredentials(user.getPassword());
    idpUser.setEmail(user.getEmail());
    idpUser.setAdditionalInformation(user.getAdditionalInformation() == null ? new HashMap<>() : user.getAdditionalInformation());
    idpUser.setFirstName(user.getFirstName());
    idpUser.setLastName(user.getLastName());
    idpUser.setAccountExpired(!user.isAccountNonExpired());
    idpUser.setCreatedAt(user.getCreatedAt());
    idpUser.setEnabled(user.isEnabled());
    idpUser.setUpdatedAt(user.getUpdatedAt());
    return idpUser;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, (String)context.get(KEY_ORGANIZATION_ID), username, "gravitee")).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKey));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKeys));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(keys));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKey));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(certificateKeys));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(keys));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(grant_migrated(tokenRequest));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(grant(tokenRequest));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
})).flux().next());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, auditsOperation, (count,audits)->new Page<>(audits, page, count)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeHistogram(criteria, query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeGroupBy(criteria, query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeCount(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))))
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::bulk))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeHistogram_migrated(criteria, query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((docs)->{
    Map<Long, Long> successResult = new HashMap<>();
    Map<Long, Long> failureResult = new HashMap<>();
    docs.forEach((document)->{
        Long timestamp = ((Number)((Document)document.get("_id")).get("_id")).longValue();
        Long successAttempts = ((Number)document.get(fieldSuccess)).longValue();
        Long failureAttempts = ((Number)document.get(fieldFailure)).longValue();
        successResult.put(timestamp, successAttempts);
        failureResult.put(timestamp, failureAttempts);
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((docs)->{
    Map<Long, Long> successResult = new HashMap<>();
    Map<Long, Long> failureResult = new HashMap<>();
    docs.forEach((document)->{
        Long timestamp = ((Number)((Document)document.get("_id")).get("_id")).longValue();
        Long successAttempts = ((Number)document.get(fieldSuccess)).longValue();
        Long failureAttempts = ((Number)document.get(fieldFailure)).longValue();
        successResult.put(timestamp, successAttempts);
        failureResult.put(timestamp, failureAttempts);
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeGroupBy_migrated(criteria, query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((docs)->docs.stream().collect(Collectors.toMap((d)->((Document)d.get("_id")).get("_id"), (d)->d.get("count")))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((docs)->docs.stream().collect(Collectors.toMap((d)->((Document)d.get("_id")).get("_id"), (d)->d.get("count")))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeCount_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L)).map(RxJavaReactorMigrationUtil.toJdkFunction((data)->Collections.singletonMap("data", data)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L)).map(RxJavaReactorMigrationUtil.toJdkFunction((data)->Collections.singletonMap("data", data)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(bulk_migrated(audits));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.empty()));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(reportableCollection.bulkWrite(this.convert(audits)))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(reportableCollection.bulkWrite(this.convert(audits)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(histogram.fetch().all().collectList());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(buildAndProcessHistogram_migrated(dbClient, referenceType, referenceId, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(buildAndProcessHistogram(dbClient, referenceType, referenceId, criteria));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptyList(), page, size))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptyList(), page, size))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes).collectList().flatMap((content)->total.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long value)->new Page<Audit>(content, page, value)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve reports for referenceType {} and referenceId {}", referenceType, referenceId, error)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes).collectList().flatMap((content)->total.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long value)->new Page<Audit>(content, page, value)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve reports for referenceType {} and referenceId {}", referenceType, referenceId, error)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeHistogramAggregation(referenceType, referenceId, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeGroupBy(groupByQuery, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeCount(searchQuery));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeHistogramAggregation_migrated(referenceType, referenceId, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(result)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(result)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(dialectHelper.buildAndProcessHistogram(dbClient, referenceType, referenceId, criteria)).map(RxJavaReactorMigrationUtil.toJdkFunction((stats)->{
    Map<Long, Long> successResult = new TreeMap<>();
    Map<Long, Long> failureResult = new TreeMap<>();
    stats.forEach((slotValue)->{
        Long timestamp = ((Number)slotValue.get("slot")).longValue();
        Long attempts = ((Number)slotValue.get("attempts")).longValue();
        if (((String)slotValue.get("status")).equalsIgnoreCase("success")) {
            successResult.put(timestamp, attempts);
        } else {
            failureResult.put(timestamp, attempts);
        }
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(dialectHelper.buildAndProcessHistogram(dbClient, referenceType, referenceId, criteria)).map(RxJavaReactorMigrationUtil.toJdkFunction((stats)->{
    Map<Long, Long> successResult = new TreeMap<>();
    Map<Long, Long> failureResult = new TreeMap<>();
    stats.forEach((slotValue)->{
        Long timestamp = ((Number)slotValue.get("slot")).longValue();
        Long attempts = ((Number)slotValue.get("attempts")).longValue();
        if (((String)slotValue.get("status")).equalsIgnoreCase("success")) {
            successResult.put(timestamp, attempts);
        } else {
            failureResult.put(timestamp, attempts);
        }
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(dialectHelper.buildAndProcessHistogram(dbClient, referenceType, referenceId, criteria)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeCount_migrated(searchQuery));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonMap("data", 0L))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonMap("data", 0L))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(count.as(Long.class).fetch().first().switchIfEmpty(Mono.just(0L)).map(RxJavaReactorMigrationUtil.toJdkFunction((data)->Collections.singletonMap("data", data)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(count.as(Long.class).fetch().first().switchIfEmpty(Mono.just(0L)).map(RxJavaReactorMigrationUtil.toJdkFunction((data)->Collections.singletonMap("data", data)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeGroupBy_migrated(searchQuery, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(monoToSingle(groupBy.fetch().all().collectMap((f)->f.get(convertFieldName(criteria)), (f)->f.get("counter"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(auditMono.doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve the Report with referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, error)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(auditMono.doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve the Report with referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, error)))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(bulk_migrated(audits));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.empty()));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))).doOnError((error)->LOGGER.error("Error during bulk loading", error)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))).doOnError
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAuditReporter.this::bulk))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(buildAndProcessHistogram_migrated(dbClient, referenceType, referenceId, criteria));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Flux.fromIterable(intervals.keySet()).flatMap((slot)->{
    String beginSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot), ZoneId.of(ZoneOffset.UTC.getId())));
    String endSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot + criteria.interval()), ZoneId.of(ZoneOffset.UTC.getId())));
    String query = " SELECT " + slot + " as slot, o.status, COUNT(o.status) as attempts " + queryBuilder.toString() + whereClauseBuilder.toString() + " AND \'" + beginSlot + "\' <= a.timestamp and \'" + endSlot + "\' >= a.timestamp  GROUP BY o.status ORDER BY o.status ";
    for (Map.Entry<String, Object> bind : bindings.entrySet()) {
        Object value = bind.getValue();
        if (value instanceof List) {
            String types = ((List<String>)value).stream().collect(Collectors.joining("\',\'", "\'", "\'"));
            query = query.replaceAll(":" + bind.getKey(), types);
        } else if (value instanceof LocalDateTime) {
            query = query.replaceAll(":" + bind.getKey(), "\'" + dateTimeFormatter.format((LocalDateTime)value) + "\'");
        } else {
            query = query.replaceAll(":" + bind.getKey(), "\'" + String.valueOf(value) + "\'");
        }
    }
    return dbClient.execute(query).fetch().all();
}).collectList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Flux.fromIterable(intervals.keySet()).flatMap((slot)->{
    String beginSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot), ZoneId.of(ZoneOffset.UTC.getId())));
    String endSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot + criteria.interval()), ZoneId.of(ZoneOffset.UTC.getId())));
    String query = " SELECT " + slot + " as slot, o.status, COUNT(o.status) as attempts " + queryBuilder.toString() + whereClauseBuilder.toString() + " AND \'" + beginSlot + "\' <= a.timestamp and \'" + endSlot + "\' >= a.timestamp  GROUP BY o.status ORDER BY o.status ";
    for (Map.Entry<String, Object> bind : bindings.entrySet()) {
        Object value = bind.getValue();
        if (value instanceof List) {
            String types = ((List<String>)value).stream().collect(Collectors.joining("\',\'", "\'", "\'"));
            query = query.replaceAll(":" + bind.getKey(), types);
        } else if (value instanceof LocalDateTime) {
            query = query.replaceAll(":" + bind.getKey(), "\'" + dateTimeFormatter.format((LocalDateTime)value) + "\'");
        } else {
            query = query.replaceAll(":" + bind.getKey(), "\'" + String.valueOf(value) + "\'");
        }
    }
    return dbClient.execute(query).fetch().all();
}).collectList()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(referenceType, referenceId, criteria, analyticsType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    final String key = SharedSecret.generate();
    final String barCode = QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), account), 200, 200);
    return new Enrollment(key, barCode);
})));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    final String key = enrolledFactor.getSecurity().getValue();
    final String username = user.getUsername();
    return QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), username), 200, 200);
})));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(sendMessage_migrated(message));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(sendMessage(message));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(send_migrated(target));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(send(target));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(verify_migrated(challenge));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(verify(challenge));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validate_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(validate(context));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validate_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(validate(context));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(verifyToken_migrated(token));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(verifyToken(token));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(register_migrated(client, user, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(register(client, user, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(confirmRegistration_migrated(client, user, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(confirmRegistration(client, user, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resetPassword_migrated(client, user, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(resetPassword(client, user, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(forgotPassword_migrated(inputParameters, client, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(forgotPassword(inputParameters, client, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addFactor_migrated(userId, enrolledFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addFactor(userId, enrolledFactor, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(register_migrated(client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(register(client, user, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resetPassword_migrated(client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(resetPassword(client, user, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(forgotPassword_migrated(email, client));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(forgotPassword(params, client, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(confirmRegistration_migrated(client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(confirmRegistration(client, user, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticationProvider.loadUserByUsername(endUserAuthentication)).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProvider.loadUserByUsername(endUserAuthentication)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRepository.findAllByReferenceId(domain.getReferenceId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((d)->!domain.getId().equals(d.getId()))).collectList()).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAllByReferenceId(domain.getReferenceId())).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider())).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getAuthorizeUrl(identityProvider.getId(), context)).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getAuthorizeUrl(identityProvider.getId(), context)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProviderId, context));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(identityProviderId)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(identityProviderId)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v))))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.get(identityProviderId)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
    if (HttpMethod.GET == request.getMethod()) {
        return request.getUri();
    } else {
        final Map<String, String> queryParams = getParams(request.getBody());
        queryParams.put(ACTION_KEY, request.getUri());
        return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
    }
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(signInURL).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(enrolledFactor).flatMap((factor)->RxJava2Adapter.singleToMono(userService.addFactor(user.getId(), factor, new DefaultUser(user))))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(enrolledFactor).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (factor)->RxJava2Adapter.singleToMono(userService.addFactor(user.getId(), factor, new DefaultUser(user)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (entry)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(entry.getValue().enroll(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(entry.getValue().enroll(user.getUsername())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | query.getUserName() != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).collectList()) : RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), query.getCredID())).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | query.getUserName() != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).collectList()) : RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), query.getCredID())).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), query.getCredID())).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(fetchCredentials).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Authenticator>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, Single<List<Authenticator>>>)(credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
    }
}).apply(v)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(fetchCredentials).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Authenticator>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, Single<List<Authenticator>>>)(credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID())).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return create(authenticator);
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.update(credential)).then());
        });
    }
}).apply(y)))).then()).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID())).collectList
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return create(authenticator);
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.update(credential)).then());
        });
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.update(credential)).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialService.update(credential)).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.create(credential)).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.create(credential)).then()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(credentialService.create(credential)).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(generateCredID_migrated(username, claim));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    String credID = jwtBuilder.sign(new JWT(Collections.singletonMap(claim, username))).split("\\.")[2];
    emitter.onSuccess(credID);
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceService.findById(resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction((res)->resourcePluginManager.create(res.getType(), res.getConfiguration())))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourceService.findById(resourceId)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
    context.put(Parameters.CLIENT_ID, stateJwt.get("c"));
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider())).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtParser.parse(token))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<UserToken>>toJdkFunction((jwt)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    })));
}).apply(v)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<UserToken>>toJdkFunction((jwt)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    })));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
    return new UserToken(user, optionalClient.orElse(null), jwt);
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
    return new UserToken(user, optionalClient.orElse(null), jwt);
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source)).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return identityProviderManager.getUserProvider(source);
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->userProvider.create(convert(user)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_REGISTERED).throwable(throwable))))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source)).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return identityProviderManager.getUserProvider(source);
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->userProvider.create(convert(user)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source)).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return identityProviderManager.getUserProvider(source);
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source)).hasElement
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return identityProviderManager.getUserProvider(source);
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User needs to complete the activation process")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(Mono.just(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId())).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(Mono.just(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(Mono.just(user1)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId())).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId())).then(Mono.just(user1)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId())).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user1));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new EmailFormatInvalidException(email)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal).type(EventType.FORGOT_PASSWORD_REQUESTED).throwable(throwable)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return userService.update(enhanceUser(user, optUser.get()));
    });
}).apply(a)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return userService.update(enhanceUser(user, optUser.get()));
    });
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).apply(a))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))).defaultIfEmpty(Optional.empty()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findQuery).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(Optional.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientSyncService.findById(audience)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientSyncService.findById(audience)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(idToken)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientSyncService.findByClientId(jwt.getAud())).apply(e)))).flatMap((z)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, z)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z))).onErrorResumeNext((java.lang.Throwable ex)->(ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))).as(RxJava2Adapter::maybeToMono))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decode(idToken)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientSyncService.findByClientId(jwt.getAud())).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, z)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, z)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientSyncService.findById(endUser.getClient())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(endUser.getClient()))))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientSyncService.findById(endUser.getClient())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(endUser.getClient()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl(authentication).as(RxJava2Adapter::maybeToMono)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endpoint)->handler.handle(Future.succeededFuture(endpoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    LOGGER.warn("Unable to sign the end user out of the external OIDC \'{}\', only sign out of AM", client.getClientId(), err);
    handler.handle(Future.succeededFuture(Optional.empty()));
}))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, endpoint));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).map(RxJavaReactorMigrationUtil.toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(routingContext.request(), routingContext.get(CONTEXT_PATH) + "/logout/callback");
    UriBuilder builder = UriBuilder.fromHttpUrl(endpoint.getUri());
    builder.addParameter(Parameters.POST_LOGOUT_REDIRECT_URI, redirectUri);
    builder.addParameter(Parameters.ID_TOKEN_HINT, (String)endUser.getAdditionalInformation().get(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY));
    builder.addParameter(io.gravitee.am.common.oauth2.Parameters.STATE, state);
    return Optional.of(builder.buildString());
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).map(RxJavaReactorMigrationUtil.toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(routingContext.request(), routingContext.get(CONTEXT_PATH) + "/logout/callback");
    UriBuilder builder = UriBuilder.fromHttpUrl(endpoint.getUri());
    builder.addParameter(Parameters.POST_LOGOUT_REDIRECT_URI, redirectUri);
    builder.addParameter(Parameters.ID_TOKEN_HINT, (String)endUser.getAdditionalInformation().get(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY));
    builder.addParameter(io.gravitee.am.common.oauth2.Parameters.STATE, state);
    return Optional.of(builder.buildString());
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.resetPassword(eq(client), eq(user), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new ResetPasswordResponse())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.resetPassword(eq(client), eq(user), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(resetPasswordResponse)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decode("idToken")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify("idToken", client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), any(CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("jwtstatevalue")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authProvider.signOutUrl(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(req)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(authProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), any(CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("jwtstatevalue")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authProvider.signOutUrl(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(req)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(authProvider)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Client())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(user))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(user))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(user))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(user))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(user))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Arrays.asList(user, user))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Arrays.asList(user, user))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByEmail(user.getEmail())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndExternalIdAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByEmail(user.getEmail())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByEmail(user.getEmail())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(credentialService.deleteByUserId(any(), any(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query2.getUserName())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(credential)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userAuthenticationManager.connect(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(EndUserAuthentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(EndUserAuthentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(BadCredentialsException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(EndUserAuthentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(appClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("test")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.confirmRegistration(eq(client), eq(user), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new RegistrationResponse())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.confirmRegistration(eq(client), eq(user), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(registrationResponse)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new RegistrationResponse())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(registrationResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException("test"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidUserException("Username invalid"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new EmailFormatInvalidException("test"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException("email@test.com"))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email.test.com")), eq(client), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new EmailFormatInvalidException("email.test.com"))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new EnforceUserIdentityException())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new EnforceUserIdentityException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new Enrollment(this.configuration.countries())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->new Enrollment(SharedSecret.generate()))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication with type EMAIL")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(generateCodeAndSendEmail_migrated(context, provider, enrolledFactor));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(provider.sendMessage(emailWrapper.getEmail())).then(Mono.just(enrolledFactor).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).apply(v)))).then())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(provider.sendMessage(emailWrapper.getEmail())).then(Mono.just(enrolledFactor).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).apply(v)))).then())))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(provider.sendMessage(emailWrapper.getEmail())).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).apply(v)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Code can\'t be sent"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Code can\'t be sent"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Email can\'t be sent"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalException("Email can\'t be sent"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    int counter = factor.getSecurity().getData(FactorDataKeys.KEY_MOVING_FACTOR, Integer.class);
    factor.getSecurity().putData(FactorDataKeys.KEY_MOVING_FACTOR, counter + 1);
    factor.getSecurity().removeData(FactorDataKeys.KEY_EXPIRE_AT);
    return factor;
})));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.addFactor(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(smtpProvider.sendMessage(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(get_migrated(userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(get(userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getActivity_migrated(user, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getActivity(user, criteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(upsertFactor_migrated(userId, enrolledFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(upsertFactor(userId, enrolledFactor, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(removeFactor_migrated(userId, factorId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(removeFactor(userId, factorId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getFactors_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getFactors(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getFactor_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getFactor(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getWebAuthnCredentials_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getWebAuthnCredentials(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getWebAuthnCredential_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getWebAuthnCredential(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporter).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->{
    if (Objects.isNull(result) || Objects.isNull(result.getData())) {
        return new Page<>(new ArrayList<>(), 0, 0);
    }
    return result;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporter).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return userRepository.update(user);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return userRepository.update(user);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return userRepository.update(user);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return userRepository.update(user);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return userRepository.update(user);
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return userRepository.update(user);
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).collectList());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(credentialService.findByUserId(ReferenceType.DOMAIN, user.getReferenceId(), user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((credential)->{
    removeSensitiveData(credential);
    return credential;
})).collectList());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialService.findByUserId(ReferenceType.DOMAIN, user.getReferenceId(), user.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(credentialService.findById(id)).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).map(RxJavaReactorMigrationUtil.toJdkFunction((credential)->{
    removeSensitiveData(credential);
    return credential;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(credentialService.findById(id)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(accountService.update(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((er)->AccountResponseHandler.handleUpdateUserResponse(routingContext, er.getMessage())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(accountService.update(user)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(factorProvider.enroll(endUser.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->{
    final EnrolledFactor enrolledFactor = buildEnrolledFactor(factor, enrollment, account, endUser);
    if (factorProvider.checkSecurityFactor(enrolledFactor)) {
        return enrolledFactor;
    }
    throw new InvalidFactorAttributeException("Invalid account information");
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(factorProvider.enroll(endUser.getUsername())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolve_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(resolveAuthorizedScopes(tokenRequest, client, endUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveAuthorizedScopes_migrated(request, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("Invalid scope(s): " + invalidScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("Invalid scope(s): " + invalidScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("Invalid scope(s): " + requestScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("Invalid scope(s): " + requestScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token")))).flatMapSingle((user)->enhance(user, accessToken))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->processClaims(user, accessToken))).flatMap((v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Map<String, Object>, Single<String>>)(claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeUserinfo(jwt, client)).flatMap((userinfo)->RxJava2Adapter.singleToMono(jweService.encryptUserinfo(userinfo, client))));
    }
}).apply(v)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token")))).flatMapSingle((user)->enhance(user, accessToken))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Map<String, Object>, Single<String>>)(claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeUserinfo(jwt, client)).flatMap((userinfo)->RxJava2Adapter.singleToMono(jweService.encryptUserinfo(userinfo, client))));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeUserinfo(jwt, client)).flatMap((userinfo)->RxJava2Adapter.singleToMono(jweService.encryptUserinfo(userinfo, client))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encodeUserinfo(jwt, client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (userinfo)->RxJava2Adapter.singleToMono(jweService.encryptUserinfo(userinfo, client))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enhance_migrated(user, accessToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(user)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.enhance(user)).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    Map<String, Object> userClaims = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    if (user.getRolesPermissions() != null && !user.getRolesPermissions().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.ROLES, user.getRolesPermissions().stream().map(Role::getName).collect(Collectors.toList()));
    }
    if (user.getGroups() != null && !user.getGroups().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.GROUPS, user.getGroups());
    }
    user1.setAdditionalInformation(userClaims);
    return user1;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.enhance(user)).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    Map<String, Object> userClaims = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    if (user.getRolesPermissions() != null && !user.getRolesPermissions().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.ROLES, user.getRolesPermissions().stream().map(Role::getName).collect(Collectors.toList()));
    }
    if (user.getGroups() != null && !user.getGroups().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.GROUPS, user.getGroups());
    }
    user1.setAdditionalInformation(userClaims);
    return user1;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.enhance(user)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encryptIdToken_migrated(signedJwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encryptIdToken(signedJwt, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encryptUserinfo_migrated(signedJwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encryptUserinfo(signedJwt, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(decrypt_migrated(jwt, client, encRequired));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(decrypt(jwt, client, encRequired));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(decrypt_migrated(jwt, encRequired));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(decrypt(jwt, encRequired));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isEncrypted_migrated(jwt));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(isEncrypted(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encryptAuthorization_migrated(signedJwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encryptAuthorization(signedJwt, client));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(token, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).flatMap((e)->RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(e.getJti())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.oauth2.model.AccessToken accessToken)->convertAccessToken(e)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(token, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(e.getJti())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(refreshToken, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).flatMap((e)->RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken(e.getJti())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.oauth2.model.RefreshToken refreshToken1)->convertRefreshToken(e)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(refreshToken, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken(e.getJti())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(introspectionTokenService.introspect(token, false)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convertAccessToken)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(introspectionTokenService.introspect(token, false)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->createExecutionContext(oAuth2Request, client, endUser))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<Token>>)(executionContext)->{
    JWT accessToken = createAccessTokenJWT(oAuth2Request, client, endUser, executionContext);
    JWT refreshToken = oAuth2Request.isSupportRefreshToken() ? createRefreshTokenJWT(oAuth2Request, client, endUser, accessToken) : null;
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->RxJava2Adapter.singleToMono(tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((token)->storeTokens(accessToken, refreshToken, oAuth2Request))));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<Token>>)(executionContext)->{
    JWT accessToken = createAccessTokenJWT(oAuth2Request, client, endUser, executionContext);
    JWT refreshToken = oAuth2Request.isSupportRefreshToken() ? createRefreshTokenJWT(oAuth2Request, client, endUser, accessToken) : null;
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->RxJava2Adapter.singleToMono(tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((token)->storeTokens(accessToken, refreshToken, oAuth2Request))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->RxJava2Adapter.singleToMono(tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((token)->storeTokens(accessToken, refreshToken, oAuth2Request))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (accessToken1)->RxJava2Adapter.singleToMono(tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(getRefreshToken(refreshToken, client)).switchIfEmpty(Mono.error(new InvalidGrantException("Refresh token is invalid"))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<Token>>)(refreshToken1)->{
    if (refreshToken1.getExpireAt().before(new Date())) {
        throw new InvalidGrantException("Refresh token is expired");
    }
    if (!refreshToken1.getClientId().equals(tokenRequest.getClientId())) {
        throw new InvalidGrantException("Refresh token was issued to another client");
    }
    if (refreshToken1.getAdditionalInformation().get("permissions") != null) {
        tokenRequest.setPermissions((List<PermissionRequest>)refreshToken1.getAdditionalInformation().get("permissions"));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(refreshToken1.getValue())).then(Mono.just(refreshToken1)));
}).apply(v))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getRefreshToken(refreshToken, client)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<Token>>)(refreshToken1)->{
    if (refreshToken1.getExpireAt().before(new Date())) {
        throw new InvalidGrantException("Refresh token is expired");
    }
    if (!refreshToken1.getClientId().equals(tokenRequest.getClientId())) {
        throw new InvalidGrantException("Refresh token was issued to another client");
    }
    if (refreshToken1.getAdditionalInformation().get("permissions") != null) {
        tokenRequest.setPermissions((List<PermissionRequest>)refreshToken1.getAdditionalInformation().get("permissions"));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(refreshToken1.getValue())).then(Mono.just(refreshToken1)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(refreshToken1.getValue())).then(Mono.just(refreshToken1)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.delete(refreshToken1.getValue())).then
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getAccessToken_migrated(accessToken, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getAccessToken(accessToken, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getRefreshToken_migrated(refreshToken, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getRefreshToken(refreshToken, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(introspect_migrated(token));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(introspect(token));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(oAuth2Request, client, endUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(refresh_migrated(refreshToken, tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(refresh(refreshToken, tokenRequest, client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteAccessToken_migrated(accessToken));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteAccessToken(accessToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteRefreshToken_migrated(refreshToken));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteRefreshToken(refreshToken));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enhance_migrated(accessToken, oAuth2Request, client, endUser, executionContext));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(enhance(accessToken, oAuth2Request, client, endUser, executionContext));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((certificateProvider)->certificateProvider.getProvider().keys())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
})));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client.getJwks()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((provider)->provider.getProvider().privateKey())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
})));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException(jwksUri + " is not valid.")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(jwk.get()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(jwk.get()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getKeys_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getKeys());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getKeys_migrated(client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getKeys(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getDomainPrivateKeys_migrated());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getDomainPrivateKeys());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getKeys_migrated(jwksUri));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getKeys(jwksUri));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getKey_migrated(jwkSet, kid));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getKey(jwkSet, kid));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(filter_migrated(jwkSet, filter));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(filter(jwkSet, filter));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code)).switchIfEmpty(RxJava2Adapter.maybeToMono(handleInvalidCode(code))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))).flatMap((z)->authorizationCodeRepository.delete(z.getId()).as(RxJava2Adapter::maybeToMono)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findByCode(code)).switchIfEmpty(RxJava2Adapter.maybeToMono(handleInvalidCode(code)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(handleInvalidCode_migrated(code));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(accessToken.getRefreshToken()))));
    }
    return deleteAccessTokenAction;
})).then(Mono.error(new InvalidGrantException("The authorization code " + code + " is invalid.")))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(accessToken.getRefreshToken()))));
    }
    return deleteAccessTokenAction;
})).then(Mono.error(new InvalidGrantException("The authorization code " + code + " is invalid.")))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(accessToken.getRefreshToken()))));
    }
    return deleteAccessTokenAction;
})).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(accessToken.getRefreshToken()))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(deleteAccessTokenAction).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(accessToken.getRefreshToken())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationRequest, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(authorizationRequest, user));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(remove_migrated(code, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(remove(code, client));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(assertClient_migrated(assertionType, assertion, basePath));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(assertClient(assertionType, assertion, basePath));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(prepareResponse_migrated(authorizationRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
    IDTokenResponse response = new IDTokenResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setIdToken(idToken);
    response.setState(authorizationRequest.getState());
    return response;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
    IDTokenResponse response = new IDTokenResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setIdToken(idToken);
    response.setState(authorizationRequest.getState());
    return response;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    ImplicitResponse response = new ImplicitResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setAccessToken(accessToken);
    response.setState(authorizationRequest.getState());
    return response;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    ImplicitResponse response = new ImplicitResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setAccessToken(accessToken);
    response.setState(authorizationRequest.getState());
    return response;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(prepareResponse(authorizationRequest, client, endUser)).flatMap((response)->RxJava2Adapter.singleToMono(processResponse(response, authorizationRequest, client, endUser))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(prepareResponse(authorizationRequest, client, endUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (response)->RxJava2Adapter.singleToMono(processResponse(response, authorizationRequest, client, endUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(processResponse_migrated(authorizationResponse, authorizationRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeAuthorization(jwtAuthorizationResponse.build(), client)).flatMap((authorization)->RxJava2Adapter.singleToMono(jweService.encryptAuthorization(authorization, client))).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->{
    jwtAuthorizationResponse.setResponseType(authorizationRequest.getResponseType());
    jwtAuthorizationResponse.setResponseMode(authorizationRequest.getResponseMode());
    jwtAuthorizationResponse.setToken(token);
    return jwtAuthorizationResponse;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeAuthorization(jwtAuthorizationResponse.build(), client)).flatMap((authorization)->RxJava2Adapter.singleToMono(jweService.encryptAuthorization(authorization, client))).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->{
    jwtAuthorizationResponse.setResponseType(authorizationRequest.getResponseType());
    jwtAuthorizationResponse.setResponseMode(authorizationRequest.getResponseMode());
    jwtAuthorizationResponse.setToken(token);
    return jwtAuthorizationResponse;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encodeAuthorization(jwtAuthorizationResponse.build(), client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (authorization)->RxJava2Adapter.singleToMono(jweService.encryptAuthorization(authorization, client))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(run_migrated(authorizationRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(run(authorizationRequest, client, endUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(oAuth2Request, client, user, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, user, executionContext));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(oAuth2Request, client, user, executionContext));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extractUser_migrated(idToken, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(extractUser(idToken, client));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(scopeManager.findAll()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getAll());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revoke_migrated(request, client));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revoke(request, client));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(parseRequest_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("A refresh token must be supplied."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("A refresh token must be supplied."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client)).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(getTokenService().refresh(refreshToken, tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.gateway.handler.oauth2.service.token.Token refreshToken1)->{
    if (refreshToken1.getSubject() != null) {
        tokenRequest1.setSubject(refreshToken1.getSubject());
    }
    final Set<String> originalScopes = (refreshToken1.getScope() != null ? new HashSet(Arrays.asList(refreshToken1.getScope().split("\\s+"))) : null);
    final Set<String> requestedScopes = tokenRequest1.getScopes();
    if (requestedScopes == null || requestedScopes.isEmpty()) {
        tokenRequest1.setScopes(originalScopes);
    } else if (originalScopes != null && !originalScopes.isEmpty()) {
        Set<String> filteredScopes = requestedScopes.stream().filter(originalScopes::contains).collect(Collectors.toSet());
        tokenRequest1.setScopes(filteredScopes);
    }
    tokenRequest1.setRefreshToken(refreshToken1.getAdditionalInformation());
    return tokenRequest1;
})))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client)).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(getTokenService().refresh(refreshToken, tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.gateway.handler.oauth2.service.token.Token refreshToken1)->{
    if (refreshToken1.getSubject() != null) {
        tokenRequest1.setSubject(refreshToken1.getSubject());
    }
    final Set<String> originalScopes = (refreshToken1.getScope() != null ? new HashSet(Arrays.asList(refreshToken1.getScope().split("\\s+"))) : null);
    final Set<String> requestedScopes = tokenRequest1.getScopes();
    if (requestedScopes == null || requestedScopes.isEmpty()) {
        tokenRequest1.setScopes(originalScopes);
    } else if (originalScopes != null && !originalScopes.isEmpty()) {
        Set<String> filteredScopes = requestedScopes.stream().filter(originalScopes::contains).collect(Collectors.toSet());
        tokenRequest1.setScopes(filteredScopes);
    }
    tokenRequest1.setRefreshToken(refreshToken1.getAdditionalInformation());
    return tokenRequest1;
})))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getTokenService().refresh(refreshToken, tokenRequest, client)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resolveResourceOwner_migrated(tokenRequest, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(userAuthenticationManager.loadPreAuthenticatedUser(subject, tokenRequest).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveRequest_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).apply(e)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(parseRequest_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resolveResourceOwner_migrated(tokenRequest, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveRequest_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(tokenRequestResolver.resolve(tokenRequest, client, endUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveRequest(tokenRequest, client, endUser)).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(createOAuth2Request(tokenRequest1, client, endUser))).flatMap((oAuth2Request)->RxJava2Adapter.singleToMono(createAccessToken(oAuth2Request, client, endUser)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveRequest(tokenRequest, client, endUser)).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(createOAuth2Request(tokenRequest1, client, endUser))).flatMap((oAuth2Request)->RxJava2Adapter.singleToMono(createAccessToken(oAuth2Request, client, endUser)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resolveRequest(tokenRequest, client, endUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (tokenRequest1)->RxJava2Adapter.singleToMono(createOAuth2Request(tokenRequest1, client, endUser))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (oAuth2Request)->RxJava2Adapter.singleToMono(createAccessToken(oAuth2Request, client, endUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOAuth2Request_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest.createOAuth2Request()).map(RxJavaReactorMigrationUtil.toJdkFunction((oAuth2Request)->{
    if (endUser != null) {
        oAuth2Request.setSubject(endUser.getId());
    }
    oAuth2Request.setSupportRefreshToken(isSupportRefreshToken(client));
    return oAuth2Request;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest.createOAuth2Request()).map(RxJavaReactorMigrationUtil.toJdkFunction((oAuth2Request)->{
    if (endUser != null) {
        oAuth2Request.setSubject(endUser.getId());
    }
    oAuth2Request.setSupportRefreshToken(isSupportRefreshToken(client));
    return oAuth2Request;
}))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createAccessToken_migrated(oAuth2Request, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(grant_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(grant(tokenRequest, client));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(fire_migrated(rules, executionContext));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(fire(rules, executionContext));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkConsent_migrated(client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(checkConsent(client, user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(client, approvals, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(saveConsent(client, approvals, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getConsentInformation_migrated(consent));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getConsentInformation(consent));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(introspect_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(introspect(request));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(readRequestObject_migrated(request, client, encRequired));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(readRequestObject(request, client, encRequired));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(readRequestObjectFromURI_migrated(requestUri, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(readRequestObjectFromURI(requestUri, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(registerRequestObject_migrated(request, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(registerRequestObject(request, client));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(readFromURI_migrated(requestUri, client, oidcMetadata));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(readFromURI(requestUri, client, oidcMetadata));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(registerParameters_migrated(par, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(registerParameters(par, client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteRequestUri_migrated(uriIdentifier));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteRequestUri(uriIdentifier));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(prepareResponse_migrated(authorizationRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(authorizationCodeService.create(authorizationRequest, endUser)).flatMap((v)->RxJava2Adapter.singleToMono((Single<AuthorizationResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AuthorizationCode, Single<AuthorizationResponse>>)(code)->{
    HybridResponse hybridResponse = new HybridResponse();
    hybridResponse.setRedirectUri(authorizationRequest.getRedirectUri());
    hybridResponse.setState(authorizationRequest.getState());
    hybridResponse.setCode(code.getCode());
    OAuth2Request oAuth2Request = authorizationRequest.createOAuth2Request();
    oAuth2Request.setGrantType(GrantType.HYBRID);
    oAuth2Request.setSubject(endUser.getId());
    oAuth2Request.getContext().put(Claims.c_hash, code.getCode());
    oAuth2Request.getContext().put(Claims.s_hash, authorizationRequest.getState());
    switch (authorizationRequest.getResponseType()) {
    case ResponseType.CODE_ID_TOKEN: 
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
            hybridResponse.setIdToken(idToken);
            return hybridResponse;
        })));
    
    default: 
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
            hybridResponse.setAccessToken(accessToken);
            return hybridResponse;
        })));
    
    }
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(authorizationCodeService.create(authorizationRequest, endUser)).flatMap((v)->RxJava2Adapter.singleToMono((Single<AuthorizationResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AuthorizationCode, Single<AuthorizationResponse>>)(code)->{
    HybridResponse hybridResponse = new HybridResponse();
    hybridResponse.setRedirectUri(authorizationRequest.getRedirectUri());
    hybridResponse.setState(authorizationRequest.getState());
    hybridResponse.setCode(code.getCode());
    OAuth2Request oAuth2Request = authorizationRequest.createOAuth2Request();
    oAuth2Request.setGrantType(GrantType.HYBRID);
    oAuth2Request.setSubject(endUser.getId());
    oAuth2Request.getContext().put(Claims.c_hash, code.getCode());
    oAuth2Request.getContext().put(Claims.s_hash, authorizationRequest.getState());
    switch (authorizationRequest.getResponseType()) {
    case ResponseType.CODE_ID_TOKEN: 
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
            hybridResponse.setIdToken(idToken);
            return hybridResponse;
        })));
    
    default: 
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
            hybridResponse.setAccessToken(accessToken);
            return hybridResponse;
        })));
    
    }
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authorizationCodeService.create(authorizationRequest, endUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AuthorizationResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AuthorizationCode, Single<AuthorizationResponse>>)(code)->{
    HybridResponse hybridResponse = new HybridResponse();
    hybridResponse.setRedirectUri(authorizationRequest.getRedirectUri());
    hybridResponse.setState(authorizationRequest.getState());
    hybridResponse.setCode(code.getCode());
    OAuth2Request oAuth2Request = authorizationRequest.createOAuth2Request();
    oAuth2Request.setGrantType(GrantType.HYBRID);
    oAuth2Request.setSubject(endUser.getId());
    oAuth2Request.getContext().put(Claims.c_hash, code.getCode());
    oAuth2Request.getContext().put(Claims.s_hash, authorizationRequest.getState());
    switch (authorizationRequest.getResponseType()) {
    case ResponseType.CODE_ID_TOKEN: 
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
            hybridResponse.setIdToken(idToken);
            return hybridResponse;
        })));
    
    default: 
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
            hybridResponse.setAccessToken(accessToken);
            return hybridResponse;
        })));
    
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
    hybridResponse.setIdToken(idToken);
    return hybridResponse;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, endUser)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    hybridResponse.setAccessToken(accessToken);
    return hybridResponse;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tokenService.create(oAuth2Request, client, endUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolve_migrated(authorizationRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveAuthorizedScopes(authorizationRequest, client, endUser)).flatMap((request)->RxJava2Adapter.singleToMono(resolveRedirectUri(request, client)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveAuthorizedScopes(authorizationRequest, client, endUser)).flatMap((request)->RxJava2Adapter.singleToMono(resolveRedirectUri(request, client)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resolveAuthorizedScopes(authorizationRequest, client, endUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (request)->RxJava2Adapter.singleToMono(resolveRedirectUri(request, client))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveRedirectUri_migrated(authorizationRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(authorizationRequest)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(authorizationRequest)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(tokenService.getAccessToken(token, client)).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown access token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteAccessToken(accessToken.getValue());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(tokenService.getAccessToken(token, client)).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown access token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteAccessToken(accessToken.getValue());
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tokenService.getAccessToken(token, client)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteAccessToken(accessToken.getValue());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(tokenService.getRefreshToken(token, client)).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown refresh token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteRefreshToken(refreshToken.getValue());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(tokenService.getRefreshToken(token, client)).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown refresh token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteRefreshToken(refreshToken.getValue());
}).apply(y)))).then()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tokenService.getRefreshToken(token, client)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteRefreshToken(refreshToken.getValue());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeAuthorization(jwtException.build(), client)).flatMap((authorization)->RxJava2Adapter.singleToMono(jweService.encryptAuthorization(authorization, client)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encodeAuthorization(jwtException.build(), client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (authorization)->RxJava2Adapter.singleToMono(jweService.encryptAuthorization(authorization, client))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findAccessPolicies(domain.getId(), client.getId(), accessToken.getSub(), resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicy::getId)).collectList()).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceService.findAccessPolicies(domain.getId(), client.getId(), accessToken.getSub(), resource)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(resourceService.findAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(accessPolicyId)))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourceService.findAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | consentInformation = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userConsentService.checkConsent(client, user)).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<String>, Single<List<Scope>>>)(approvedConsent)->{
    if (approvedConsent.containsAll(requestedConsents)) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
    }
    Set<String> requiredConsent = requestedConsents.stream().filter((requestedScope)->!approvedConsent.contains(requestedScope)).collect(Collectors.toSet());
    return userConsentService.getConsentInformation(requiredConsent);
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userConsentService.checkConsent(client, user)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<String>, Single<List<Scope>>>)(approvedConsent)->{
    if (approvedConsent.containsAll(requestedConsents)) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
    }
    Set<String> requiredConsent = requestedConsents.stream().filter((requestedScope)->!approvedConsent.contains(requestedScope)).collect(Collectors.toSet());
    return userConsentService.getConsentInformation(requiredConsent);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(toPatch, request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(toPatch, request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(toUpdate, request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(toUpdate, request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(delete_migrated(toDelete));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(delete(toDelete));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(renewSecret_migrated(toRenew, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(renewSecret(toRenew, basePath));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(renewClientSecret_migrated(domain, id, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(renewClientSecret(domain, id, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(clientId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(clientId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(renewClientSecret_migrated(domain, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(renewClientSecret(domain, id, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(clientId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(clientId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((flow)->flow.handle(authorizationRequest.getResponseType())))).switchIfEmpty
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(unsupportedAssertionType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.validateJWT(assertion, basePath)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return validateSignatureWithHMAC(jwt);
        } else {
            return validateSignatureWithPublicKey(jwt);
        }
    }
}).apply(v)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.validateJWT(assertion, basePath)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return validateSignatureWithHMAC(jwt);
        } else {
            return validateSignatureWithPublicKey(jwt);
        }
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(unsupportedAssertionType));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(validateJWT_migrated(assertion, basePath));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("assertion has expired"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("assertion has expired"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new ServerErrorException("Unable to retrieve discovery token endpoint."))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new ServerErrorException("Unable to retrieve discovery token endpoint."))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("JWT Assertion must be signed with PS256"))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("JWT Assertion must be signed with PS256"))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(jwt)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(jwt)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(validateSignatureWithPublicKey_migrated(jwt));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClientJwkSet(client)).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClientJwkSet(client)).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v))))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClientJwkSet(client)).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClientJwkSet(client)).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.getClientJwkSet(client)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException(ex.getMessage()))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException(ex.getMessage()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(validateSignatureWithHMAC_migrated(jwt));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v))))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(NOT_VALID)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException(ex.getMessage()))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException(ex.getMessage()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getClientJwkSet_migrated(client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(jwkService.getKeys(client.getJwksUri()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(client.getJwks())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(client.getJwks())))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(handleRequestObjectValue_migrated(context));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestObjectService.readRequestObject(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile())).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestObjectService.readRequestObject(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile())).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestObjectService.readRequestObject(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateRequestObjectClaims_migrated(context, jwt));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(e)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(e)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(jwt)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(handleRequestObjectURI_migrated(context));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY))).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->{
    final String uriIdentifier = requestUri.substring(PushedAuthorizationRequestService.PAR_URN_PREFIX.length());
    context.put(REQUEST_URI_ID_KEY, uriIdentifier);
    return jwt;
}))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY))).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->{
    final String uriIdentifier = requestUri.substring(PushedAuthorizationRequestService.PAR_URN_PREFIX.length());
    context.put(REQUEST_URI_ID_KEY, uriIdentifier);
    return jwt;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestObjectService.readRequestObjectFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY))).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestObjectService.readRequestObjectFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY))).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestObjectService.readRequestObjectFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (jwt)->RxJava2Adapter.singleToMono(validateRequestObjectClaims(context, jwt))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.introspect(introspectionRequest.getToken())).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(accessToken.getSubject())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tokenService.introspect(introspectionRequest.getToken())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(accessToken.getSubject())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(accessToken.getSubject())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(accessToken.getSubject())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.introspect(introspectionRequest.getToken())).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(accessToken.getSubject())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(new IntrospectionResponse(false))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(dcrService.create(request, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (request)->RxJava2Adapter.singleToMono(dcrService.create(request, UriBuilderRequest.resolveProxyRequest(context)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extractRequest_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(context.getBodyAsJson().mapTo(DynamicClientRegistrationRequest.class))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(context.getBodyAsJson().mapTo(DynamicClientRegistrationRequest.class))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException(ex.getMessage()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException(ex.getMessage()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException(sanitizedMessage))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException(sanitizedMessage))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(ex)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub())).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(this.resourceService.create(request, domain.getId(), client.getId(), accessToken.getSub())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (request)->RxJava2Adapter.singleToMono(this.resourceService.create(request, domain.getId(), client.getId(), accessToken.getSub()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.resourceService.findByDomainAndClientAndUserAndResource(domain.getId(), client.getId(), accessToken.getSub(), resource_id)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource_id)))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.resourceService.findByDomainAndClientAndUserAndResource(domain.getId(), client.getId(), accessToken.getSub(), resource_id)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(this.resourceService.update(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (request)->RxJava2Adapter.singleToMono(this.resourceService.update(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extractRequest_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(context.getBodyAsJson()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JsonObject, SingleSource<JsonObject>>toJdkFunction(this::bodyValidation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((body)->body.mapTo(NewResource.class)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(context.getBodyAsJson()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JsonObject, SingleSource<JsonObject>>toJdkFunction(this::bodyValidation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((body)->body.mapTo(NewResource.class)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JsonObject, SingleSource<JsonObject>>toJdkFunction(this::bodyValidation).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(bodyValidation_migrated(body));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("missing resource_scopes"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("missing resource_scopes"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(body)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(body)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(introspectionService.introspect(createRequest(context))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((introspectionResponse)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(introspectionResponse))))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(introspectionService.introspect(createRequest(context))).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(parRepository.findById(identifier)).switchIfEmpty(Mono.error(new InvalidRequestUriException())).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PushedAuthorizationRequest, Single<JWT>>)(Function<PushedAuthorizationRequest, Single<JWT>>)(req)->{
    if (req.getParameters() != null && req.getExpireAt() != null && req.getExpireAt().after(new Date())) {
        final String request = req.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST);
        if (request != null) {
            return readRequestObject(client, request);
        } else if (this.domain.usePlainFapiProfile()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")));
        } else {
            final JWTClaimsSet.Builder builder = new JWTClaimsSet.Builder().audience(oidcMetadata.getIssuer()).expirationTime(req.getExpireAt());
            req.getParameters().toSingleValueMap().forEach(builder::claim);
            return RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())));
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()));
}).apply(v))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(identifier)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PushedAuthorizationRequest, Single<JWT>>)(Function<PushedAuthorizationRequest, Single<JWT>>)(req)->{
    if (req.getParameters() != null && req.getExpireAt() != null && req.getExpireAt().after(new Date())) {
        final String request = req.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST);
        if (request != null) {
            return readRequestObject(client, request);
        } else if (this.domain.usePlainFapiProfile()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")));
        } else {
            final JWTClaimsSet.Builder builder = new JWTClaimsSet.Builder().audience(oidcMetadata.getIssuer()).expirationTime(req.getExpireAt());
            req.getParameters().toSingleValueMap().forEach(builder::claim);
            return RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())));
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Invalid request_uri")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable registrationValidation = RxJava2Adapter.monoToCompletable(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->{
    String clientId = jwtClientAssertion(par) ? getClientIdFromAssertion(par) : par.getParameters().getFirst(Parameters.CLIENT_ID);
    if (!client.getClientId().equals(clientId)) {
        throw new InvalidRequestException();
    }
    if (par.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST_URI) != null) {
        throw new InvalidRequestException("request_uri not authorized");
    }
})))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | registrationValidation = RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->RxJava2Adapter.singleToMono(readRequestObject(client, request)).map(RxJavaReactorMigrationUtil.toJdkFunction((com.nimbusds.jwt.JWT jwt)->checkRedirectUriParameter(jwt, client))))).then())
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(readRequestObject(client, request)).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->checkRedirectUriParameter(par, client)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->RxJava2Adapter.singleToMono(parRepository.create(par)))).map(RxJavaReactorMigrationUtil.toJdkFunction((parPersisted)->{
    final PushedAuthorizationRequestResponse response = new PushedAuthorizationRequestResponse();
    response.setRequestUri(PAR_URN_PREFIX + parPersisted.getId());
    final long exp = (parPersisted.getExpireAt().getTime() - Instant.now().toEpochMilli()) / 1000;
    response.setExp(exp);
    return response;
})));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(parRepository.create(par))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(readRequestObject_migrated(client, request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectClaims)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectAlgorithm)).flatMap((jwt)->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectClaims)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectAlgorithm)).flatMap((jwt)->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
})).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (jwt)->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateSignature_migrated(jwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(signedJwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(throwable));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt id_token")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(signedJwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(throwable));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt userinfo")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(JWTParser.parse(jwt) instanceof EncryptedJWT));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Request object must be encrypted using RSA-OAEP with A256GCM")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to perform Json Web Decryption, unsupported algorithm: " + algorithm.getName())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Request Object must be encrypted")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(parsedJwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->RxJava2Adapter.fluxToFlowable(Flux.fromIterable(jwkset.getKeys())))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map(RxJavaReactorMigrationUtil.toJdkFunction((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Optional::isPresent)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::get)).next().single());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->RxJava2Adapter.fluxToFlowable(Flux.fromIterable(jwkset.getKeys())))).filter
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (jwkset)->RxJava2Adapter.fluxToFlowable(Flux.fromIterable(jwkset.getKeys()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(signedJwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(throwable));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt authorization")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encrypt_migrated(jwe, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encrypt(jwe, client, JWKFilter.RSA_KEY_ENCRYPTION(), (jwk)->new RSAEncrypter(JWKConverter.convert((RSAKey)jwk))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encrypt(jwe, client, JWKFilter.CURVE_KEY_ENCRYPTION(), (jwk)->{
    if (KeyType.EC.getValue().equals(jwk.getKty())) {
        return new ECDHEncrypter(JWKConverter.convert((ECKey)jwk));
    }
    return new X25519Encrypter(JWKConverter.convert((OKPKey)jwk));
}));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encrypt(jwe, client, JWKFilter.OCT_KEY_ENCRYPTION(algorithm), (jwk)->new AESEncrypter(JWKConverter.convert((OCTKey)jwk))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encrypt(jwe, client, JWKFilter.OCT_KEY_ENCRYPTION(jwe.getHeader().getEncryptionMethod()), (jwk)->new DirectEncrypter(JWKConverter.convert((OCTKey)jwk))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(encrypt(jwe, client, JWKFilter.OCT_KEY_ENCRYPTION(), (jwk)->{
    OctetSequenceKey octKey = JWKConverter.convert((OCTKey)jwk);
    return new PasswordBasedEncrypter(octKey.getKeyValue().decode(), PasswordBasedEncrypter.MIN_SALT_LENGTH, PasswordBasedEncrypter.MIN_RECOMMENDED_ITERATION_COUNT);
}));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to perform Json Web Encryption, unsupported algorithm: " + algorithm.getName()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to perform Json Web Encryption, unsupported algorithm: " + algorithm.getName()))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(encrypt_migrated(jwe, client, filter, function));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).flatMap((z)->jwkService.filter(z, filter).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk))))).map(RxJavaReactorMigrationUtil.toJdkFunction((encrypter)->{
    jwe.encrypt(encrypter);
    return jwe.serialize();
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).flatMap((z)->jwkService.filter(z, filter).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk))))).map(RxJavaReactorMigrationUtil.toJdkFunction((encrypter)->{
    jwe.encrypt(encrypter);
    return jwe.serialize();
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).flatMap((z)->jwkService.filter(z, filter).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk))))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).flatMap((z)->jwkService.filter(z, filter).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).flatMap
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then(RxJava2Adapter.singleToMono(flow.run(request, client, endUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then(RxJava2Adapter.singleToMono(flow.run(request, client, endUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client))).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))).flatMapSingle
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(grant_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->handleRequest(tokenRequest, client, user.orElse(null))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).apply(e)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(parseRequest_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Missing parameter: ticket"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Missing parameter: ticket"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Requesting party token"), new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Requesting party token"), new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resolveResourceOwner_migrated(tokenRequest, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<User>>toJdkFunction((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).apply(e)))).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<User>>toJdkFunction((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).apply(e)))).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<User>>toJdkFunction((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveRequestedScopes(tokenRequest, client)).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(this.resolvePermissions(tokenRequest1, client, endUser))).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(this.createOAuth2Request(tokenRequest1, client, endUser))).flatMap((oAuth2Request)->RxJava2Adapter.singleToMono(this.executePolicies(oAuth2Request, client, endUser))).flatMap((oAuth2Request)->RxJava2Adapter.singleToMono(getTokenService().create(oAuth2Request, client, endUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->this.handleUpgradedToken(tokenRequest, token)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveRequestedScopes(tokenRequest, client)).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(this.resolvePermissions(tokenRequest1, client, endUser))).flatMap((tokenRequest1)->RxJava2Adapter.singleToMono(this.createOAuth2Request(tokenRequest1, client, endUser))).flatMap((oAuth2Request)->RxJava2Adapter.singleToMono(this.executePolicies(oAuth2Request, client, endUser))).flatMap((oAuth2Request)->RxJava2Adapter.singleToMono(getTokenService().create(oAuth2Request, client, endUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->this.handleUpgradedToken(tokenRequest, token)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resolveRequestedScopes(tokenRequest, client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (tokenRequest1)->RxJava2Adapter.singleToMono(this.resolvePermissions(tokenRequest1, client, endUser))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (tokenRequest1)->RxJava2Adapter.singleToMono(this.createOAuth2Request(tokenRequest1, client, endUser))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (oAuth2Request)->RxJava2Adapter.singleToMono(this.executePolicies(oAuth2Request, client, endUser))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (oAuth2Request)->RxJava2Adapter.singleToMono(getTokenService().create(oAuth2Request, client, endUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveRequestedScopes_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("At least one of the scopes included in the request does not match client pre-registered scopes"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("At least one of the scopes included in the request does not match client pre-registered scopes"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolvePermissions_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.permissionTicketService.remove(tokenRequest.getTicket())).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicket::getPermissionRequest)).flatMap((v)->RxJava2Adapter.singleToMono((Single<TokenRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<PermissionRequest>, Single<TokenRequest>>)(permissionRequests)->{
    List<String> resourceIds = permissionRequests.stream().map(PermissionRequest::getResourceId).collect(Collectors.toList());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findByResources(resourceIds)).collectList().flatMap((resourceSet)->RxJava2Adapter.singleToMono(this.checkRequestedScopesMatchResource(tokenRequest, resourceSet))).flatMap((resourceMap)->RxJava2Adapter.singleToMono(this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap))).flatMap((resolvedPermissionRequests)->RxJava2Adapter.singleToMono(this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests))).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
        tokenRequest.setPermissions(extendedPermissionRequests);
        return tokenRequest;
    })));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.permissionTicketService.remove(tokenRequest.getTicket())).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicket::getPermissionRequest)).flatMap((v)->RxJava2Adapter.singleToMono((Single<TokenRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<PermissionRequest>, Single<TokenRequest>>)(permissionRequests)->{
    List<String> resourceIds = permissionRequests.stream().map(PermissionRequest::getResourceId).collect(Collectors.toList());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findByResources(resourceIds)).collectList().flatMap((resourceSet)->RxJava2Adapter.singleToMono(this.checkRequestedScopesMatchResource(tokenRequest, resourceSet))).flatMap((resourceMap)->RxJava2Adapter.singleToMono(this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap))).flatMap((resolvedPermissionRequests)->RxJava2Adapter.singleToMono(this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests))).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
        tokenRequest.setPermissions(extendedPermissionRequests);
        return tokenRequest;
    })));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.permissionTicketService.remove(tokenRequest.getTicket())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<TokenRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<PermissionRequest>, Single<TokenRequest>>)(permissionRequests)->{
    List<String> resourceIds = permissionRequests.stream().map(PermissionRequest::getResourceId).collect(Collectors.toList());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findByResources(resourceIds)).collectList().flatMap((resourceSet)->RxJava2Adapter.singleToMono(this.checkRequestedScopesMatchResource(tokenRequest, resourceSet))).flatMap((resourceMap)->RxJava2Adapter.singleToMono(this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap))).flatMap((resolvedPermissionRequests)->RxJava2Adapter.singleToMono(this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests))).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
        tokenRequest.setPermissions(extendedPermissionRequests);
        return tokenRequest;
    })));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findByResources(resourceIds)).collectList().flatMap((resourceSet)->RxJava2Adapter.singleToMono(this.checkRequestedScopesMatchResource(tokenRequest, resourceSet))).flatMap((resourceMap)->RxJava2Adapter.singleToMono(this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap))).flatMap((resolvedPermissionRequests)->RxJava2Adapter.singleToMono(this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests))).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
    tokenRequest.setPermissions(extendedPermissionRequests);
    return tokenRequest;
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceService.findByResources(resourceIds)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (resourceSet)->RxJava2Adapter.singleToMono(this.checkRequestedScopesMatchResource(tokenRequest, resourceSet))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (resourceMap)->RxJava2Adapter.singleToMono(this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (resolvedPermissionRequests)->RxJava2Adapter.singleToMono(this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("At least one of the scopes included in the request does not match resource registered scopes"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidScopeException("At least one of the scopes included in the request does not match resource registered scopes"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(resourceSet.stream().collect(Collectors.toMap(Resource::getId, (resource)->resource)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(resourceSet.stream().collect(Collectors.toMap(Resource::getId, (resource)->resource)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveScopeRequestAssessment_migrated(tokenRequest, requestedPermissions, fetchedResources));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions.stream().map((permissionRequest)->{
    Set<String> registeredScopes = new HashSet(fetchedResources.get(permissionRequest.getResourceId()).getResourceScopes());
    permissionRequest.getResourceScopes().addAll(tokenRequest.getScopes().stream().filter(registeredScopes::contains).collect(Collectors.toSet()));
    return permissionRequest;
}).collect(Collectors.toList()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions.stream().map((permissionRequest)->{
    Set<String> registeredScopes = new HashSet(fetchedResources.get(permissionRequest.getResourceId()).getResourceScopes());
    permissionRequest.getResourceScopes().addAll(tokenRequest.getScopes().stream().filter(registeredScopes::contains).collect(Collectors.toSet()));
    return permissionRequest;
}).collect(Collectors.toList()))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extendPermissionWithRPT_migrated(tokenRequest, client, endUser, requestedPermissions));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client)).flatMap((rpt)->RxJava2Adapter.singleToMono(this.checkRequestingPartyToken(rpt, client, endUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((rpt)->this.mergePermissions(rpt, requestedPermissions)))).onErrorResumeNext((throwable)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client)).flatMap((rpt)->RxJava2Adapter.singleToMono(this.checkRequestingPartyToken(rpt, client, endUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((rpt)->this.mergePermissions(rpt, requestedPermissions)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (rpt)->RxJava2Adapter.singleToMono(this.checkRequestingPartyToken(rpt, client, endUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (throwable)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(requestedPermissions)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRequestingPartyToken_migrated(rpt, client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidTokenException::new))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidTokenException::new))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(rpt)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(rpt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOAuth2Request_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveRequest_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("Should not be used"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException("Should not be used"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executePolicies_migrated(oAuth2Request, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findAccessPoliciesByResources(resourceIds)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
})).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<OAuth2Request>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Rule>, Single<OAuth2Request>>)(rules)->{
    if (rules.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
    }
    ExecutionContext simpleExecutionContext = new SimpleExecutionContext(oAuth2Request, oAuth2Request.getHttpResponse());
    ExecutionContext executionContext = executionContextFactory.create(simpleExecutionContext);
    executionContext.setAttribute("client", new ClientProperties(client));
    if (endUser != null) {
        executionContext.setAttribute("user", new UserProperties(endUser));
    }
    return rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters"))));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findAccessPoliciesByResources(resourceIds)).map(RxJavaReactorMigrationUtil.toJdkFunction((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
})).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<OAuth2Request>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Rule>, Single<OAuth2Request>>)(rules)->{
    if (rules.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
    }
    ExecutionContext simpleExecutionContext = new SimpleExecutionContext(oAuth2Request, oAuth2Request.getHttpResponse());
    ExecutionContext executionContext = executionContextFactory.create(simpleExecutionContext);
    executionContext.setAttribute("client", new ClientProperties(client));
    if (endUser != null) {
        executionContext.setAttribute("user", new UserProperties(endUser));
    }
    return rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters"))));
}).apply(v)))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceService.findAccessPoliciesByResources(resourceIds)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<OAuth2Request>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Rule>, Single<OAuth2Request>>)(rules)->{
    if (rules.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
    }
    ExecutionContext simpleExecutionContext = new SimpleExecutionContext(oAuth2Request, oAuth2Request.getHttpResponse());
    ExecutionContext executionContext = executionContextFactory.create(simpleExecutionContext);
    executionContext.setAttribute("client", new ClientProperties(client));
    if (endUser != null) {
        executionContext.setAttribute("user", new UserProperties(endUser));
    }
    return rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters"))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jweService.decrypt(request, encRequired).onErrorResumeNext((err)->{
    if (err instanceof InvalidRequestObjectException) {
        return RxJava2Adapter.monoToSingle(Mono.error(err));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<JWT>>toJdkFunction((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then(Mono.defer(()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))));
}).apply(v)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jweService.decrypt(request, encRequired).onErrorResumeNext((err)->{
    if (err instanceof InvalidRequestObjectException) {
        return RxJava2Adapter.monoToSingle(Mono.error(err));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
})).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(err));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<JWT>>toJdkFunction((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then(Mono.defer(()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then(Mono.defer(()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(requestObjectRepository.findById(identifier)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<RequestObject, Single<JWT>>)(Function<RequestObject, Single<JWT>>)(req)->{
    if (req.getExpireAt().after(new Date())) {
        return readRequestObject(req.getPayload(), client, false);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(v))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(identifier)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<RequestObject, Single<JWT>>)(Function<RequestObject, Single<JWT>>)(req)->{
    if (req.getExpireAt().after(new Date())) {
        return readRequestObject(req.getPayload(), client, false);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<JWT>>)(Function<String, Single<JWT>>)(s)->readRequestObject(s, client, false)).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<JWT>>)(Function<String, Single<JWT>>)(s)->readRequestObject(s, client, false)).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException(requestUri + " is not valid.")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then(Mono.defer(()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return requestObjectRepository.create(requestObject);
    }
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<RequestObject, SingleSource<RequestObjectRegistrationResponse>>toJdkFunction((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return RxJava2Adapter.monoToSingle(Mono.just(response));
}).apply(v)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return requestObjectRepository.create(requestObject);
    }
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<RequestObject, SingleSource<RequestObjectRegistrationResponse>>toJdkFunction((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return RxJava2Adapter.monoToSingle(Mono.just(response));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(response));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateSignature_migrated(jwt, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkRequestObjectAlgorithm_migrated(jwt));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidRequestObjectException("Request object must be signed"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidRequestObjectException("Request object must be signed"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidRequestObjectException("Request object must be signed with PS256"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidRequestObjectException("Request object must be signed with PS256"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(prepareResponse_migrated(authorizationRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(authorizationCodeService.create(authorizationRequest, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((code)->{
    AuthorizationCodeResponse response = new AuthorizationCodeResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setCode(code.getCode());
    response.setState(authorizationRequest.getState());
    return response;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(authorizationCodeService.create(authorizationRequest, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((code)->{
    AuthorizationCodeResponse response = new AuthorizationCodeResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setCode(code.getCode());
    response.setState(authorizationRequest.getState());
    return response;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authorizationCodeService.create(authorizationRequest, endUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enhanceIDToken_migrated(accessToken, client, user, oAuth2Request, executionContext));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, user, executionContext)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<Token>>)(idToken)->{
    Map<String, Object> additionalInformation = new HashMap<>(accessToken.getAdditionalInformation());
    additionalInformation.put(ResponseType.ID_TOKEN, idToken);
    accessToken.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, user, executionContext)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<Token>>)(idToken)->{
    Map<String, Object> additionalInformation = new HashMap<>(accessToken.getAdditionalInformation());
    additionalInformation.put(ResponseType.ID_TOKEN, idToken);
    accessToken.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(idTokenService.create(oAuth2Request, client, user, executionContext)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<Token>>)(idToken)->{
    Map<String, Object> additionalInformation = new HashMap<>(accessToken.getAdditionalInformation());
    additionalInformation.put(ResponseType.ID_TOKEN, idToken);
    accessToken.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(parseRequest_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Missing parameter: username"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Missing parameter: username"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Missing parameter: password"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Missing parameter: password"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resolveResourceOwner_migrated(tokenRequest, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.authenticate(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.authenticate(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.authenticate(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage()))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(parseRequest_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Missing parameter: code"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Missing parameter: code"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client)).flatMap((tokenRequest1)->RxJava2Adapter.maybeToMono(authorizationCodeService.remove(code, client)).flatMap((z)->RxJava2Adapter.maybeToMono(authenticationFlowContextService.removeContext(z.getTransactionId(), z.getContextVersion()).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.AuthenticationFlowContext ctx)->{
    checkRedirectUris(tokenRequest1, z);
    checkPKCE(tokenRequest1, z);
    tokenRequest1.setSubject(z.getSubject());
    tokenRequest1.setScopes(z.getScopes());
    if (z.getRequestParameters() != null) {
        z.getRequestParameters().forEach((java.lang.String key, java.util.List<java.lang.String> value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", z.getCode());
    decodedAuthorizationCode.put("transactionId", z.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
}))).single())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client)).flatMap((tokenRequest1)->RxJava2Adapter.maybeToMono(authorizationCodeService.remove(code, client)).flatMap((z)->RxJava2Adapter.maybeToMono(authenticationFlowContextService.removeContext(z.getTransactionId(), z.getContextVersion()).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.AuthenticationFlowContext ctx)->{
    checkRedirectUris(tokenRequest1, z);
    checkPKCE(tokenRequest1, z);
    tokenRequest1.setSubject(z.getSubject());
    tokenRequest1.setScopes(z.getScopes());
    if (z.getRequestParameters() != null) {
        z.getRequestParameters().forEach((java.lang.String key, java.util.List<java.lang.String> value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", z.getCode());
    decodedAuthorizationCode.put("transactionId", z.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
}))).single())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(super.parseRequest(tokenRequest, client)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeService.remove(code, client)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationFlowContextService.removeContext(z.getTransactionId(), z.getContextVersion()).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resolveResourceOwner_migrated(tokenRequest, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(userAuthenticationManager.loadPreAuthenticatedUser(tokenRequest.getSubject(), tokenRequest).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveRequest_migrated(tokenRequest, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwkService.getKeys()).map(RxJavaReactorMigrationUtil.toJdkFunction(JWKConverter::convert))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwkService.getKeys()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(parseRequest_migrated(tokenRequest, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resolveResourceOwner_migrated(tokenRequest, client));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantProvider.grant(convert(tokenRequest))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantProvider.grant(convert(tokenRequest))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantProvider.grant(convert(tokenRequest))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
})).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).apply(t)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(user));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), user.getId(), client.getClientId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
})).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeApproval::getScope))).collect
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), user.getId(), client.getClientId())).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.getAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((scopes)->{
    List<Scope> requestedScopes = new ArrayList<>();
    for (String requestScope : consent) {
        Scope requestedScope = scopes.stream().filter((scope)->scope.getKey().equalsIgnoreCase(requestScope)).findAny().orElse(new Scope(requestScope));
        requestedScopes.add(requestedScope);
    }
    return requestedScopes;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.getAll()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->executionContext != null ? executionContext : createExecution(oAuth2Request, client, user))).flatMap((v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<String>>)(executionContext1)->{
    IDToken idToken = createIDTokenJWT(oAuth2Request, client, user, executionContext);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
        if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
            oAuth2Request.getContext().forEach((claimName,claimValue)->{
                if (claimValue != null) {
                    CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                    String digestAlgorithm = defaultDigestAlgorithm;
                    if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                        digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                    }
                    idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
                }
            });
        }
        return jwtService.encode(idToken, certificateProvider);
    })).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
        if (client.getIdTokenEncryptedResponseAlg() != null) {
            return jweService.encryptIdToken(signedIdToken, client);
        }
        return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
    }).apply(z)))));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<String>>)(executionContext1)->{
    IDToken idToken = createIDTokenJWT(oAuth2Request, client, user, executionContext);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
        if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
            oAuth2Request.getContext().forEach((claimName,claimValue)->{
                if (claimValue != null) {
                    CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                    String digestAlgorithm = defaultDigestAlgorithm;
                    if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                        digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                    }
                    idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
                }
            });
        }
        return jwtService.encode(idToken, certificateProvider);
    })).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
        if (client.getIdTokenEncryptedResponseAlg() != null) {
            return jweService.encryptIdToken(signedIdToken, client);
        }
        return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
    }).apply(z)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return jwtService.encode(idToken, certificateProvider);
})).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return jweService.encryptIdToken(signedIdToken, client);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return jwtService.encode(idToken, certificateProvider);
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return jweService.encryptIdToken(signedIdToken, client);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, client)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<User>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
        if (!user.getReferenceId().equals(domain.getId())) {
            throw new UserNotFoundException(jwt.getSub());
        }
        return user;
    })));
}).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, client)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<User>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
        if (!user.getReferenceId().equals(domain.getId())) {
            throw new UserNotFoundException(jwt.getSub());
        }
        return user;
    })));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    if (!user.getReferenceId().equals(domain.getId())) {
        throw new UserNotFoundException(jwt.getSub());
    }
    return user;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Client client = application.toClient();
    if (client.getAuthorizedGrantTypes() == null) {
        client.setAuthorizedGrantTypes(Collections.emptyList());
    }
    return client;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationService.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No domain set on client")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.create(convert(client))).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.create(convert(client))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No domain set on client")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.update(convert(client))).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.update(convert(client))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.renewClientSecret(domain, id, principal)).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.renewClientSecret(domain, id, principal)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClient(context)).map(RxJavaReactorMigrationUtil.toJdkFunction(DynamicClientRegistrationResponse::fromClient)).map(RxJavaReactorMigrationUtil.toJdkFunction((response)->{
    response.setRegistrationAccessToken(null);
    response.setRegistrationClientUri(null);
    return response;
}))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.getClient(context)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap((client)->RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (request)->RxJava2Adapter.singleToMono(dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap((client)->RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (request)->RxJava2Adapter.singleToMono(dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(dcrService::delete)).map(RxJavaReactorMigrationUtil.toJdkFunction(this.clientSyncService::removeDynamicClientRegistred))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(dcrService::delete)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap((toRenew)->RxJava2Adapter.singleToMono(dcrService.renewSecret(toRenew, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (toRenew)->RxJava2Adapter.singleToMono(dcrService.renewSecret(toRenew, UriBuilderRequest.resolveProxyRequest(context)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getClient_migrated(context));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty(Mono.error(new ResourceNotFoundException("client not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction(Client::clone))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty(Mono.error(new ResourceNotFoundException("client not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction(Client::clone))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.clientSyncService.findByClientId(clientId)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientAssertionService.assertClient(clientAssertionType, clientAssertion, basePath)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v))))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientAssertionService.assertClient(clientAssertionType, clientAssertion, basePath)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client1));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateClientPatchRequest(request)).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toPatch))).flatMap((app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::update).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validateClientPatchRequest(request)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::update).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request)).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toUpdate))).flatMap((app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::update).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::update).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(clientService.renewClientSecret(domain.getId(), toRenew.getId())).flatMap((client)->RxJava2Adapter.singleToMono(applyRegistrationAccessToken(basePath, client))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::update).apply(v))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(clientService.renewClientSecret(domain.getId(), toRenew.getId())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (client)->RxJava2Adapter.singleToMono(applyRegistrationAccessToken(basePath, client))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::update).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createClientFromRequest_migrated(request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request)).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultIdentityProvider).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultCertificateProvider).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyAccessTokenValidity).apply(v)))).flatMap((app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::create).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request)).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultIdentityProvider).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultCertificateProvider).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyAccessTokenValidity).apply(v)))).flatMap((app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::create).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultIdentityProvider).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultCertificateProvider).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyAccessTokenValidity).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)clientService::create).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applyAccessTokenValidity_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(client)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createClientFromTemplate_migrated(request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientService.findById(request.getSoftwareId().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))).flatMapSingle(this::sanitizeTemplate)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap((app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(clientService::create).apply(v)))).flatMap((client)->RxJava2Adapter.singleToMono(copyForms(request.getSoftwareId().get(), client))).flatMap((client)->RxJava2Adapter.singleToMono(copyEmails(request.getSoftwareId().get(), client)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientService.findById(request.getSoftwareId().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))).flatMapSingle(this::sanitizeTemplate)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap((app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(clientService::create).apply(v)))).flatMap((client)->RxJava2Adapter.singleToMono(copyForms(request.getSoftwareId().get(), client))).flatMap((client)->RxJava2Adapter.singleToMono(copyEmails(request.getSoftwareId().get(), client)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientService.findById(request.getSoftwareId().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))).flatMapSingle(this::sanitizeTemplate)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientService.findById(request.getSoftwareId().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientService.findById(request.getSoftwareId().get())).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (app)->RxJava2Adapter.singleToMono(this.applyRegistrationAccessToken(basePath, app))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(clientService::create).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (client)->RxJava2Adapter.singleToMono(copyForms(request.getSoftwareId().get(), client))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (client)->RxJava2Adapter.singleToMono(copyEmails(request.getSoftwareId().get(), client))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(sanitizeTemplate_migrated(template));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Client behind software_id is not a template"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Client behind software_id is not a template"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(template)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(template)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(copyForms_migrated(sourceId, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.copyFromClient(domain.getId(), sourceId, client.getId())).flatMap((irrelevant)->Mono.just(client))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.copyFromClient(domain.getId(), sourceId, client.getId())).flatMap((irrelevant)->Mono.just(client))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(formService.copyFromClient(domain.getId(), sourceId, client.getId())).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(copyEmails_migrated(sourceId, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(emailTemplateService.copyFromClient(domain.getId(), sourceId, client.getId())).collectList().flatMap((irrelevant)->Mono.just(client))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(emailTemplateService.copyFromClient(domain.getId(), sourceId, client.getId())).collectList().flatMap((irrelevant)->Mono.just(client))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailTemplateService.copyFromClient(domain.getId(), sourceId, client.getId())).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applyDefaultIdentityProvider_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(client.getDomain())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviders)->{
    if (identityProviders != null && !identityProviders.isEmpty()) {
        client.setIdentities(Collections.singleton(identityProviders.get(0).getId()));
    }
    return client;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(client.getDomain())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviders)->{
    if (identityProviders != null && !identityProviders.isEmpty()) {
        client.setIdentities(Collections.singleton(identityProviders.get(0).getId()));
    }
    return client;
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(client.getDomain())).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applyDefaultCertificateProvider_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(client.getDomain())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((certificates)->{
    if (certificates != null && !certificates.isEmpty()) {
        client.setCertificate(certificates.get(0).getId());
    }
    return client;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(client.getDomain())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((certificates)->{
    if (certificates != null && !certificates.isEmpty()) {
        client.setCertificate(certificates.get(0).getId());
    }
    return client;
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(certificateService.findByDomain(client.getDomain())).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applyRegistrationAccessToken_migrated(basePath, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(jwt, client)).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->{
    client.setRegistrationAccessToken(token);
    client.setRegistrationClientUri(openIDProviderMetadata.getRegistrationEndpoint() + "/" + client.getClientId());
    return client;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(jwt, client)).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->{
    client.setRegistrationAccessToken(token);
    client.setRegistrationClientUri(openIDProviderMetadata.getRegistrationEndpoint() + "/" + client.getClientId());
    return client;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.encode(jwt, client)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateClientRegistrationRequest_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request, false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateClientPatchRequest_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.validateClientRegistrationRequest(request, true));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateClientRegistrationRequest_migrated(request, isPatch));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateRedirectUri(request, isPatch)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateGrantType).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateResponseType).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSubjectType).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSectorIdentifierUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateJKWs).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateTlsClientAuth).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSelfSignedClientAuth).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<DynamicClientRegistrationRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<DynamicClientRegistrationRequest, Single<DynamicClientRegistrationRequest>>)this::enforceWithSoftwareStatement).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.validateRedirectUri(request, isPatch)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateGrantType).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateResponseType).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSubjectType).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSectorIdentifierUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateJKWs).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateTlsClientAuth).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSelfSignedClientAuth).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectSigningAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectEncryptionAlgorithm).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<DynamicClientRegistrationRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<DynamicClientRegistrationRequest, Single<DynamicClientRegistrationRequest>>)this::enforceWithSoftwareStatement).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.validateRedirectUri(request, isPatch)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateScopes).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateGrantType).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateResponseType).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSubjectType).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestUri).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSectorIdentifierUri).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateJKWs).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoSigningAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoEncryptionAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenSigningAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenEncryptionAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateTlsClientAuth).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSelfSignedClientAuth).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationSigningAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationEncryptionAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectSigningAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectEncryptionAlgorithm).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<DynamicClientRegistrationRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<DynamicClientRegistrationRequest, Single<DynamicClientRegistrationRequest>>)this::enforceWithSoftwareStatement).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enforceWithSoftwareStatement_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("software_statement is required"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("software_statement is required"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No jwks_uri for OpenBanking Directory, unable to validate software_statement"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("No jwks_uri for OpenBanking Directory, unable to validate software_statement"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(jwkService.getKeys(directoryJwksUri)).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwsService.isValidSignature(signedJWT, jwk))).switchIfEmpty(Mono.error(new InvalidClientMetadataException("Invalid signature for software_statement"))).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->{
    LOGGER.debug("software_statement is valid, check claims regarding the registration request information");
    JSONObject softwareStatement = signedJWT.getPayload().toJSONObject();
    final Number iat = softwareStatement.getAsNumber("iat");
    if (iat == null || (Instant.now().getEpochSecond() - (iat.longValue())) > FIVE_MINUTES_IN_SEC) {
        throw new InvalidClientMetadataException("software_statement older than 5 minutes");
    }
    if (request.getJwks() != null && !request.getJwks().isEmpty()) {
        throw new InvalidClientMetadataException("jwks is forbidden, prefer jwks_uri");
    }
    if (request.getJwksUri() == null || request.getJwksUri().isEmpty()) {
        throw new InvalidClientMetadataException("jwks_uri is required");
    }
    if (!request.getJwksUri().get().equals(softwareStatement.getAsString("software_jwks_uri"))) {
        throw new InvalidClientMetadataException("jwks_uri doesn\'t match the software_jwks_uri");
    }
    final Object software_redirect_uris = softwareStatement.get("software_redirect_uris");
    if (software_redirect_uris != null) {
        if (request.getRedirectUris() == null || request.getRedirectUris().isEmpty()) {
            throw new InvalidClientMetadataException("redirect_uris are missing");
        }
        final List<String> redirectUris = request.getRedirectUris().get();
        if (software_redirect_uris instanceof JSONArray) {
            redirectUris.forEach((uri)->{
                if (!((JSONArray)software_redirect_uris).contains(uri)) {
                    throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
                }
            });
        } else if (software_redirect_uris instanceof String && (redirectUris.size() > 1 || !software_redirect_uris.equals(redirectUris.get(0)))) {
            throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
        }
    }
    if (request.getTokenEndpointAuthMethod() != null && !request.getTokenEndpointAuthMethod().isEmpty()) {
        if (!(ClientAuthenticationMethod.SELF_SIGNED_TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equals(request.getTokenEndpointAuthMethod().get()))) {
            throw new InvalidClientMetadataException("invalid token_endpoint_auth_method");
        }
        if (ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) && (request.getTlsClientAuthSubjectDn() == null || request.getTlsClientAuthSubjectDn().isEmpty())) {
            throw new InvalidClientMetadataException("tls_client_auth_subject_dn is required with tls_client_auth as client authentication method");
        }
    }
    return request;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(jwkService.getKeys(directoryJwksUri)).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwsService.isValidSignature(signedJWT, jwk))).switchIfEmpty(Mono.error(new InvalidClientMetadataException("Invalid signature for software_statement"))).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->{
    LOGGER.debug("software_statement is valid, check claims regarding the registration request information");
    JSONObject softwareStatement = signedJWT.getPayload().toJSONObject();
    final Number iat = softwareStatement.getAsNumber("iat");
    if (iat == null || (Instant.now().getEpochSecond() - (iat.longValue())) > FIVE_MINUTES_IN_SEC) {
        throw new InvalidClientMetadataException("software_statement older than 5 minutes");
    }
    if (request.getJwks() != null && !request.getJwks().isEmpty()) {
        throw new InvalidClientMetadataException("jwks is forbidden, prefer jwks_uri");
    }
    if (request.getJwksUri() == null || request.getJwksUri().isEmpty()) {
        throw new InvalidClientMetadataException("jwks_uri is required");
    }
    if (!request.getJwksUri().get().equals(softwareStatement.getAsString("software_jwks_uri"))) {
        throw new InvalidClientMetadataException("jwks_uri doesn\'t match the software_jwks_uri");
    }
    final Object software_redirect_uris = softwareStatement.get("software_redirect_uris");
    if (software_redirect_uris != null) {
        if (request.getRedirectUris() == null || request.getRedirectUris().isEmpty()) {
            throw new InvalidClientMetadataException("redirect_uris are missing");
        }
        final List<String> redirectUris = request.getRedirectUris().get();
        if (software_redirect_uris instanceof JSONArray) {
            redirectUris.forEach((uri)->{
                if (!((JSONArray)software_redirect_uris).contains(uri)) {
                    throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
                }
            });
        } else if (software_redirect_uris instanceof String && (redirectUris.size() > 1 || !software_redirect_uris.equals(redirectUris.get(0)))) {
            throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
        }
    }
    if (request.getTokenEndpointAuthMethod() != null && !request.getTokenEndpointAuthMethod().isEmpty()) {
        if (!(ClientAuthenticationMethod.SELF_SIGNED_TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equals(request.getTokenEndpointAuthMethod().get()))) {
            throw new InvalidClientMetadataException("invalid token_endpoint_auth_method");
        }
        if (ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) && (request.getTlsClientAuthSubjectDn() == null || request.getTlsClientAuthSubjectDn().isEmpty())) {
            throw new InvalidClientMetadataException("tls_client_auth_subject_dn is required with tls_client_auth as client authentication method");
        }
    }
    return request;
}))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(jwkService.getKeys(directoryJwksUri)).flatMap
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("software_statement isn\'t signed or doesn\'t use PS256"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("software_statement isn\'t signed or doesn\'t use PS256"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("signature of software_statement is invalid"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("signature of software_statement is invalid"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateRedirectUri_migrated(request, isPatch));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateResponseType_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Invalid response type."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Invalid response type."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateGrantType_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing or invalid grant type."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing or invalid grant type."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateSubjectType_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported subject type"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported subject type"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateUserinfoSigningAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported userinfo signing algorithm"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported userinfo signing algorithm"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateUserinfoEncryptionAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_alg value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_alg value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_enc value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_enc value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateRequestObjectSigningAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported request object signing algorithm"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported request object signing algorithm"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("request_object_signing_alg shall be PS256"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("request_object_signing_alg shall be PS256"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateRequestObjectEncryptionAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported request_object_encryption_alg value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported request_object_encryption_alg value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported request_object_encryption_enc value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported request_object_encryption_enc value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateIdTokenSigningAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported id_token signing algorithm"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported id_token signing algorithm"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateIdTokenEncryptionAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_alg value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_alg value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_enc value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_enc value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateRequestUri_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("request_uris: " + err.getMessage()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("request_uris: " + err.getMessage()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateSectorIdentifierUri_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("sector_identifier_uri: " + err.getMessage()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("sector_identifier_uri: " + err.getMessage()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Scheme must be https for sector_identifier_uri : " + request.getSectorIdentifierUri().get()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Scheme must be https for sector_identifier_uri : " + request.getSectorIdentifierUri().get()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add)).flatMap((allowedRedirectUris)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect(ArrayList<String>::new, ArrayList::add)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((java.util.ArrayList<java.lang.String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add)).flatMap((allowedRedirectUris)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect(ArrayList<String>::new, ArrayList::add)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((java.util.ArrayList<java.lang.String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect(ArrayList<String>::new, ArrayList::add)).flatMap
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((java.util.ArrayList<java.lang.String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateJKWs_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The jwks_uri and jwks parameters MUST NOT be used together."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The jwks_uri and jwks parameters MUST NOT be used together."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(request.getJwksUri().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))).flatMapSingle((jwkSet)->{
    return RxJava2Adapter.monoToSingle(Mono.just(request));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(request.getJwksUri().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(jwkService.getKeys(request.getJwksUri().get())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateScopes_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateAuthorizationSigningAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported authorization signing algorithm"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported authorization signing algorithm"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateAuthorizationEncryptionAlgorithm_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When authorization_encrypted_response_enc is included, authorization_encrypted_response_alg MUST also be provided"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("When authorization_encrypted_response_enc is included, authorization_encrypted_response_alg MUST also be provided"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_alg value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_alg value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_enc value"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_enc value"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateTlsClientAuth_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateSelfSignedClientAuth_migrated(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The self_signed_tls_client_auth requires at least a jwks or a valid jwks_uri."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("The self_signed_tls_client_auth requires at least a jwks or a valid jwks_uri."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(request)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<PermissionTicketRequest>, SingleSource<List<PermissionTicketRequest>>>toJdkFunction(this::bodyValidation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toPermissionRequest)).flatMap((permissionRequests)->RxJava2Adapter.singleToMono(permissionTicketService.create(permissionRequests, domain.getId(), client.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicketResponse::from))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<PermissionTicketRequest>, SingleSource<List<PermissionTicketRequest>>>toJdkFunction(this::bodyValidation).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (permissionRequests)->RxJava2Adapter.singleToMono(permissionTicketService.create(permissionRequests, domain.getId(), client.getId()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extractRequest_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Unable to parse body permission request"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("Unable to parse body permission request"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(result)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(result)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(bodyValidation_migrated(toValidate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("resource_id and resource_scopes are mandatory."))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("resource_id and resource_scopes are mandatory."))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(toValidate)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(toValidate)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((accessTokens)->accessTokens != null && !accessTokens.isEmpty()))).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty()))).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(RQP_ID_TOKEN, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(RPT_OLD_TOKEN, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(rpt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser(USER_ID, tokenRequest)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionTicketService.remove(TICKET_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new PermissionTicket().setId(TICKET_ID).setPermissionRequest(permissions))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findByResources(Arrays.asList(RS_ONE, RS_TWO))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId(RS_ONE).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeC")), new Resource().setId(RS_TWO).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeD")))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.create(oauth2RequestCaptor.capture(), eq(client), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new AccessToken("success"))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser(USER_ID, tokenRequest)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser(USER_ID, tokenRequest)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionTicketService.remove(TICKET_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidPermissionTicketException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(RPT_OLD_TOKEN, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidTokenException::new))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(policy)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(rulesEngine.fire(any(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new PolicyChainException("Policy requirements have failed"))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(policy)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(rulesEngine.fire(any(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tokenService.getAccessToken("token", client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tokenService.getAccessToken("token", client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tokenService.getRefreshToken("token", client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tokenService.getAccessToken("token", client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(tokenService.deleteAccessToken("token")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(tokenService.getRefreshToken("token", client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(refreshToken)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(tokenService.deleteRefreshToken("token")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(authorizationCodeRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new AuthorizationCode())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode(authorizationCode.getCode())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authorizationCodeRepository.delete(authorizationCode.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode)))
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode(authorizationCode.getCode())).thenReturn(RxJava2Adapter.fluxToObservable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(repository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(par)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.decrypt(any(), anyBoolean())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new ParseException("parse error", 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.decrypt(any(), anyBoolean())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(parse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(par)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(par)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(par)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(par)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.decrypt(any(), anyBoolean())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(signedJwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(any(Client.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(JWKSet.class))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(JWK.class))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(jwkSet)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(idTokenService.create(oAuth2Request, client, null, null)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idTokenPayload)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("my-test-client_id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("unknown")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(dcrService.delete(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Client())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(dcrService.renewSecret(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Client())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(parService.deleteRequestUri(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(authorizationResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwtAuthorizationCodeResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwtAuthorizationCodeResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encodeAuthorization(any(JWT.class), eq(client))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("my-jwt")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just((String)invocation.getArguments()[0]));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encodeUserinfo(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("signedJwtBearer")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.encryptUserinfo("signedJwtBearer", client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("signedJwtBearer")))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientAssertionService.assertClient(any(), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientAssertionService.assertClient(any(), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unknown or unsupported assertion_type"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientAssertionService.assertClient(any(), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("jwt")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(res));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(clientService.delete(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(toRenew));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(identityProvider)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateService.findByDomain(any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(certificate)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(httpResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(httpResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(httpResponse)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findById("123")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(template)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(formService.copyFromClient(DOMAIN_ID, ID_SOURCE, ID_TARGET)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(emailTemplateService.copyFromClient(DOMAIN_ID, ID_SOURCE, ID_TARGET)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientService.findById("123")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(template)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.jose.RSAKey())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(dcrService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new Exception())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(dcrService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Client())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Application())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById("my-client")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalManagementException::new))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.create(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.update(any(Application.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(TechnicalManagementException::new)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new ClientNotFoundException("my-client"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.renewClientSecret(DOMAIN, "my-client", null)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.renewClientSecret(DOMAIN, "my-client", null)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new ClientNotFoundException("my-client"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.renewClientSecret(DOMAIN, "my-client", null)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalManagementException::new))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwkService.getKeys()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwkSet)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwkService.getKeys()).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new RuntimeException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionTicketService.create(anyList(), eq(DOMAIN_ID), eq(CLIENT_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(success)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionTicketService.create(anyList(), eq(DOMAIN_ID), eq(CLIENT_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(success)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.create(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.refresh(refreshToken, tokenRequest, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new RefreshToken(refreshToken))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.refresh(refreshToken, tokenRequest, client)).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.decrypt(request, false)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(plainJWT)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.decrypt(request, false)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(signedJWT)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idTokenCert)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(clientCert)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idTokenPayload)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(clientCert)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idTokenPayload)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idTokenPayload)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(jwtCaptor.capture(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idTokenPayload)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idTokenPayload)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jweService.encryptIdToken(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("encryptedToken")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("test")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("test")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("test")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("test")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("test")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("test")))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userConsentService.checkConsent(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userConsentService.checkConsent(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(autoApproveScope))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenGranter.grant(any(TokenRequest.class), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenGranter.grant(any(TokenRequest.class), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new Exception())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenGranter.grant(any(TokenRequest.class), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(UmaException.requestDeniedBuilder().build())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(jwk)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(any(), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenEnhancer.enhance(any(), any(), any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new AccessToken("token-id"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(jwtCaptor.capture(), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenEnhancer.enhance(any(), any(), any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new AccessToken("token-id"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.encode(jwtCaptor.capture(), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just("")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenEnhancer.enhance(any(), any(), any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new AccessToken("token-id"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(any(), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(refreshToken)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(any(), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(refreshToken)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(eq("encoded"), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(eq(refreshToken.getToken()), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(refreshToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(jwtService.decodeAndVerify(any(), any(Client.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(jwt)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(refreshToken)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new RuntimeException())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId(RESOURCE_ID))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(service.create(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new ResourceNotFoundException(RESOURCE_ID))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(service.create(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Resource().setId(RESOURCE_ID))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(service.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(service.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Resource().setId(RESOURCE_ID))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(service.update(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID), eq(RESOURCE_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new ResourceNotFoundException(RESOURCE_ID))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(service.update(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID), eq(RESOURCE_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Resource())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new ResourceNotFoundException(RESOURCE_ID))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(revocationTokenService.revoke(any(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(revocationTokenService.revoke(any(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(revocationTokenService.revoke(any(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(new RuntimeException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientAssertionService.assertClient(eq("type"), eq("myToken"), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientAssertionService.assertClient(eq("type"), eq("myToken"), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientAssertionService.assertClient(eq("type"), eq("myToken"), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new JWKSet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(key)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.introspect("token")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById("user")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.introspect("token")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.introspect(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.introspect(token)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateProvider.keys()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(key)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateProvider.keys()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(key)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(certificateProvider2.keys()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(key2)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenRequestResolver.resolve(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(tokenRequest)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(tokenService.create(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(accessToken)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userAuthenticationManager.authenticate(any(Client.class), any(Authentication.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(list_migrated(page, size, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(list(page, size, baseUrl));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByMember_migrated(memberId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByMember(memberId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(get_migrated(groupId, baseUrl));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(get(groupId, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(group, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(groupId, group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(groupId, group, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(groupId, patchOp, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(groupId, patchOp, baseUrl));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(groupId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(groupId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(list_migrated(filter, page, size, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(list(filter, page, size, baseUrl));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(get_migrated(userId, baseUrl));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(get(userId, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(userId, user, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(userId, user, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(userId, patchOp, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(userId, patchOp, baseUrl));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(groupRepository.findAll(ReferenceType.DOMAIN, domain.getId(), page, size)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupRepository.findAll(ReferenceType.DOMAIN, domain.getId(), page, size)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(groupRepository.findByMember(memberId)).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, null, true))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a groups using member ", memberId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupRepository.findByMember(memberId)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap((z)->RxJava2Adapter.singleToMono(setMembers(z, baseUrl)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(setMembers(z, baseUrl))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.singleToMono(setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, true))).flatMap((group1)->RxJava2Adapter.singleToMono(setMembers(group1, baseUrl)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.singleToMono(setMembers(group, baseUrl))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (group1)->RxJava2Adapter.singleToMono(setMembers(group1, baseUrl))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to router a group", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))).flatMapSingle((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v))))))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, false))).flatMap((group1)->RxJava2Adapter.singleToMono(setMembers(group1, baseUrl)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))).flatMapSingle((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v))))))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (group1)->RxJava2Adapter.singleToMono(setMembers(group1, baseUrl))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(get(groupId, baseUrl)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return update(groupId, objectMapper.treeToValue(node, Group.class), baseUrl);
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(get(groupId, baseUrl)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return update(groupId, objectMapper.treeToValue(node, Group.class), baseUrl);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->RxJava2Adapter.completableToMono(groupRepository.delete(groupId))).then()).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (user)->RxJava2Adapter.completableToMono(groupRepository.delete(groupId))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(memberIds)).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
})).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((existingMembers)->{
    group.setMembers(existingMembers);
    return group;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(memberIds)).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
})).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((existingMembers)->{
    group.setMembers(existingMembers);
    return group;
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(memberIds)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(group)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(get_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(get());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findUsers).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findUsers).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap((z)->RxJava2Adapter.singleToMono(setGroups(z)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(userId)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(setGroups(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.completableToMono(checkRoles(user.getRoles()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(source)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, true)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.completableToMono(checkRoles(user.getRoles()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(source)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
})).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.completableToMono(checkRoles(user.getRoles()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(source)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source)).hasElement
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.completableToMono(checkRoles(user.getRoles()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(source))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((existingUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)this::setGroups).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((existingUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
})).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then(RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return userProvider.create(convert(userToUpdate));
        } else {
            return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return userRepository.update(userToUpdate);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return userRepository.update(userToUpdate);
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
}))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then(RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return userProvider.create(convert(userToUpdate));
        } else {
            return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return userRepository.update(userToUpdate);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return userRepository.update(userToUpdate);
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return userRepository.update(userToUpdate);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return userRepository.update(userToUpdate);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)this::setGroups).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(get(userId, baseUrl)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
    }
    return update(userId, userToPatch, baseUrl);
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(get(userId, baseUrl)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
    }
    return update(userId, userToPatch, baseUrl);
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))).then(RxJava2Adapter.completableToMono(userRepository.delete(userId)))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))).then(RxJava2Adapter.completableToMono(userRepository.delete(userId)))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))).then(RxJava2Adapter.completableToMono(userRepository.delete(userId)))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))).then(RxJava2Adapter.completableToMono(userRepository.delete(userId)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setGroups_migrated(scimUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByMember(scimUser.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
})).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((scimGroups)->{
    if (!scimGroups.isEmpty()) {
        scimUser.setGroups(scimGroups);
        return scimUser;
    } else {
        return scimUser;
    }
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByMember(scimUser.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
})).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((scimGroups)->{
    if (!scimGroups.isEmpty()) {
        scimUser.setGroups(scimGroups);
        return scimUser;
    } else {
        return scimUser;
    }
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupService.findByMember(scimUser.getId())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkRoles_migrated(roles));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
})).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
})).then()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(serviceProviderConfiguration));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.update(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(getGroup())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.update(any(), any(), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidGroupException("Invalid group infos"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(eq(null), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(getUser())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any(), any(), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Role [role-1] can not be found."))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any(), any(), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidUserException("Invalid user infos"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.update(any(), any(), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new EmailFormatInvalidException("Invalid email"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(newUser.getRoles())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(newUser.getRoles())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(roles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(existingUser.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(existingUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(existingUser)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(existingUser.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(userId)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userRepository.findById(userId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(patchedUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(userToUpdate));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.list(eq(0), eq(100), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<>())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(userRepository.findByIdIn(any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(createdGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findById(groupId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.Group())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(groupRepository.findByName(eq(ReferenceType.DOMAIN), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(groupToUpdate));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.list(eq(null), eq(0), eq(100), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<>())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.list(any(Filter.class), eq(0), eq(100), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<>())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(getGroup())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("Display name already exists"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(groupService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidGroupException("Invalid group infos"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(getUser())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("User provider [unknown-idp] can not be found."))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Role [role-1] can not be found."))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("Username already exists"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new InvalidUserException("Invalid user infos"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new EmailFormatInvalidException("Invalid email"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getPrincipal_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(defaultPrincipal(context, token))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(defaultPrincipal(context, token))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(token.getSub())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(token.getSub())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(token.getSub())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(token.getAud())).map(RxJavaReactorMigrationUtil.toJdkFunction((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(token.getAud())).map(RxJavaReactorMigrationUtil.toJdkFunction((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(token.getAud())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(consents_migrated(userId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(consents(userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(consents_migrated(userId, clientId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(consents(userId, clientId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(consent_migrated(consentId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(consent(consentId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeConsent_migrated(userId, consentId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeConsent(userId, consentId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeConsents_migrated(userId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeConsents(userId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeConsents_migrated(userId, clientId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeConsents(userId, clientId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeConsent_migrated(userId, consentId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeConsent(userId, consentId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeConsents_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeConsents(userId, (io.gravitee.am.identityprovider.api.User)null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeConsents_migrated(userId, clientId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeConsents(userId, clientId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeApprovalService.findById(consentId)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalService.findById(consentId)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((principal)->RxJava2Adapter.completableToMono(userService.revokeConsent(userId, consentId, principal))).then()).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (principal)->RxJava2Adapter.completableToMono(userService.revokeConsent(userId, consentId, principal))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Optional.ofNullable(clientId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<ScopeApproval>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, Single<Set<ScopeApproval>>>)(optClient)->{
    if (optClient.isPresent()) {
        return userService.consents(userId, optClient.get());
    }
    return userService.consents(userId);
}).apply(v)))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Set<ScopeApproval>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, Single<Set<ScopeApproval>>>)(optClient)->{
    if (optClient.isPresent()) {
        return userService.consents(userId, optClient.get());
    }
    return userService.consents(userId);
}).apply(v))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.just(Optional.ofNullable(clientId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))).then());
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))).then());
}).apply(y)))).then()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))).then());
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(scopeApprovalService.findByDomainAndUser(domainId, userId)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(scopeApproval)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeApprovalService.findById("consentId")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(scopeApproval)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeApprovalService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalService.revokeByUser(domainId, userId, null)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalService.revokeByConsent(domainId, userId, consentId, null)).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.consent(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(new ScopeApprovalNotFoundException("consentId"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.consent(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new ScopeApproval())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.revokeConsent(anyString(), anyString(), any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.consents(anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(new ScopeApproval()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new io.gravitee.am.model.User())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userService.revokeConsents(anyString(), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(metadata_migrated(providerId, idpUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(metadata(providerId, idpUrl));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderManager.get(providerId)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(providerId))).map(RxJavaReactorMigrationUtil.toJdkFunction((authenticationProvider)->{
    Metadata metadata = authenticationProvider.metadata(idpUrl);
    if (metadata == null) {
        logger.debug("No metadata found for identity provider : {}", providerId);
        throw new IdentityProviderMetadataNotFoundException(providerId);
    }
    return metadata;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.get(providerId)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("provider-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("provider-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.get("provider-id")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(serviceProviderService.metadata(eq("unknown-provider"), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new IdentityProviderNotFoundException("unknown-provider"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(serviceProviderService.metadata(eq("unknown-provider"), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new IdentityProviderMetadataNotFoundException("unknown-provider"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(serviceProviderService.metadata(eq("provider-id"), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(metadata)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(eventRepository.findByTimeFrame(lastRefreshAt - lastDelay, nextLastRefreshAt)).collectList
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAll()).filter
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).block
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(organizationRepository.findByHrids(this.organizations.get())).collectList
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findAll(org.getId())).filter
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2, domain3)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(any(Long.class), any(Long.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(event)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(any(Long.class), any(Long.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(event)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainRepository.findById(domainToUpdate.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domainToUpdate)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(any(Long.class), any(Long.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(event)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env, env2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env, env2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env, env2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organization, organization2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env, env2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization2.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env3, env4)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2, domain3, domain4)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organization, organization2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env, env2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization2.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env3, env4)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2, domain3, domain4)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organization, organization2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env, env2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(environmentRepository.findAll(organization2.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(env3, env4)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain, domain2, domain3, domain4)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new IllegalArgumentException("Unsupported verification channel \'" + target.getChannel() + "\'")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    if (buffer.statusCode() != 200) {
        LOGGER.error("An error occurred when trying to validate ReCaptcha token. (status={}/message={})", buffer.statusCode(), buffer.statusMessage());
        return false;
    }
    final JsonObject response = buffer.bodyAsJsonObject();
    Boolean success = response.getBoolean("success", false);
    Double score = response.getDouble("score", 0.0);
    LOGGER.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= configuration.getMinScore());
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentService.createDefault()).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(newsletterURI + taglinesPath).rxSend()).map(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, List<String>>toJdkFunction((res)->{
    if (res.statusCode() != 200) {
        LOGGER.error("An error has occurred when reading the newsletter taglines response: " + res.statusMessage());
        return Collections.emptyList();
    }
    return mapper.readValue(res.bodyAsString(), List.class);
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(newsletterURI + taglinesPath).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getTaglines_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getTaglines());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::prepareAETriggers))).flatMapSingle
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerService.getById(payload.getId())).flatMap((alertTrigger)->RxJava2Adapter.singleToMono(this.prepareAETrigger(domain, alertTrigger))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)this::registerAETrigger).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertTriggerService.getById(payload.getId())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (alertTrigger)->RxJava2Adapter.singleToMono(this.prepareAETrigger(domain, alertTrigger))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)this::registerAETrigger).apply(v))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(payload.getReferenceId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((domain)->domain.isEnabled() && domain.isAlertEnabled()))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(payload.getReferenceId())).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(registerAETrigger_migrated(trigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.defer(()->{
    triggerProvider.register(trigger);
    LOGGER.debug("Alert trigger [{}] has been pushed to alert system.", trigger.getId());
    return RxJava2Adapter.monoToSingle(Mono.just(trigger));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(trigger));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domain.getId(), new AlertTriggerCriteria()).flatMapSingle((alertTrigger)->this.prepareAETrigger(domain, alertTrigger)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((alertNotifiers)->AlertTriggerFactory.create(alertTrigger, alertNotifiers, environment))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((trigger)->trigger.setEnabled(domain.isEnabled() && domain.isAlertEnabled() && trigger.isEnabled())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((alertNotifiers)->AlertTriggerFactory.create(alertTrigger, alertNotifiers, environment))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((trigger)->trigger.setEnabled(domain.isEnabled() && domain.isAlertEnabled() && trigger.isEnabled())))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).collectList
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getCertificateProvider_migrated(certificateId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getCertificateProvider(certificateId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveProperties_migrated(command));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveDomainProperties(value)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainProperties)->values.put(key, domainProperties)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resolveDomainProperties(value)).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resolveApplicationProperties(value)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((appProperties)->values.put(key, appProperties)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resolveApplicationProperties(value)).doOnSuccess
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements().then().then(Mono.just(values))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements().then().then(Mono.just(values))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveDomainProperties_migrated(domainId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(properties));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resolveApplicationProperties_migrated(applicationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(properties));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(expand));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(expand));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(policyId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(policyId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(policyId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(policyId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getIcon_migrated(policyId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getIcon(policyId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getDocumentation_migrated(policyId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getDocumentation(policyId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
})).block
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider1 != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider1)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider1 != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider1)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Unable to create Default IdentityProvider with " + managementBackend + " backend")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getUserProvider_migrated(userProvider));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getUserProvider(userProvider));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS))).flatMap((installation)->Mono.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Installation has been removed."))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when deleting installation.", error)))).onErrorReturn
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS))).flatMap
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Error occurred when creating user [{}] for organization [{}].", userPayload.getUsername(), userPayload.getOrganizationId(), error)))).onErrorReturn
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, newUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createGraviteeUser_migrated(organization, newUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createGraviteeUser(organization, newUser, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(resetPassword_migrated(organizationId, user, password, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(resetPassword(organizationId, user, password, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateUser, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateStatus_migrated(referenceType, referenceId, id, status, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(updateStatus(referenceType, referenceId, id, status, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, userId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(upgradeDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<List<Scope>>>)(scopes)->{
    if (scopes.getData().isEmpty()) {
        logger.info("No scope found for domain id[{}] name[{}]. Upgrading...", domain.getId(), domain.getName());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(createAppScopes(domain)).flatMap((irrelevant)->RxJava2Adapter.singleToMono(createRoleScopes(domain))));
    }
    logger.info("No scope to update, skip upgrade");
    return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<List<Scope>>>)(scopes)->{
    if (scopes.getData().isEmpty()) {
        logger.info("No scope found for domain id[{}] name[{}]. Upgrading...", domain.getId(), domain.getName());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(createAppScopes(domain)).flatMap((irrelevant)->RxJava2Adapter.singleToMono(createRoleScopes(domain))));
    }
    logger.info("No scope to update, skip upgrade");
    return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<List<Scope>>>)(scopes)->{
    if (scopes.getData().isEmpty()) {
        logger.info("No scope found for domain id[{}] name[{}]. Upgrading...", domain.getId(), domain.getName());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(createAppScopes(domain)).flatMap((irrelevant)->RxJava2Adapter.singleToMono(createRoleScopes(domain))));
    }
    logger.info("No scope to update, skip upgrade");
    return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(createAppScopes(domain)).flatMap((irrelevant)->RxJava2Adapter.singleToMono(createRoleScopes(domain))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(createAppScopes(domain)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.singleToMono(createRoleScopes(domain))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createAppScopes_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((app)->app.getSettings() != null && app.getSettings().getOauth() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((app)->app.getSettings() != null && app.getSettings().getOauth() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | (z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER)
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createRoleScopes_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.getOauthScopes() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.getOauthScopes() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | (z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER)
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createScope_migrated(domain, scopeKey));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.findByDomain(domain, 0, Integer.MAX_VALUE)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<Scope>>)(scopes)->{
    Optional<Scope> optScope = scopes.getData().stream().filter((scope)->scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info("Create a new scope key[{}] for domain[{}]", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription("Default description for scope " + scopeKey);
        return scopeService.create(domain, scope);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.findByDomain(domain, 0, Integer.MAX_VALUE)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<Scope>>)(scopes)->{
    Optional<Scope> optScope = scopes.getData().stream().filter((scope)->scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info("Create a new scope key[{}] for domain[{}]", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription("Default description for scope " + scopeKey);
        return scopeService.create(domain, scope);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.findByDomain(domain, 0, Integer.MAX_VALUE)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<Scope>>)(scopes)->{
    Optional<Scope> optScope = scopes.getData().stream().filter((scope)->scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info("Create a new scope key[{}] for domain[{}]", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription("Default description for scope " + scopeKey);
        return scopeService.create(domain, scope);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null)).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when handling environment [{}] with id [{}].", environmentPayload.getName(), environmentPayload.getId(), error)))).onErrorReturn
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.search(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAll(ReferenceType.DOMAIN, domain, page, size)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((userPage)->userPage.getData().forEach(this::setInternalStatus))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAll(ReferenceType.DOMAIN, domain, page, size)).doOnSuccess
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserInvalidException("Field [password] is required")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), newUser.getUsername(), newUser.getSource())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
                Application client = optClient.orElse(null);
                newUser.setDomain(domain.getId());
                newUser.setClient(client != null ? client.getId() : null);
                newUser.setInternal(true);
                if (newUser.isPreRegistration()) {
                    newUser.setPassword(null);
                    newUser.setRegistrationCompleted(false);
                    newUser.setEnabled(false);
                } else {
                    String password = newUser.getPassword();
                    if (password != null && isInvalidUserPassword(password, client, domain)) {
                        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
                    }
                    newUser.setRegistrationCompleted(true);
                    newUser.setEnabled(true);
                    newUser.setDomain(domain.getId());
                }
                return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    return newUser;
                }))).onErrorResumeNext((ex)->{
                    if (ex instanceof UserAlreadyExistsException) {
                        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
                            if (!empty) {
                                throw new UserAlreadyExistsException(newUser.getUsername());
                            } else {
                                newUser.setPassword(null);
                                newUser.setExternalId(idpUser.getId());
                                newUser.setUsername(idpUser.getUsername());
                                return newUser;
                            }
                        }))));
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.error(ex));
                    }
                })).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
                    User user = transform(newUser1);
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                        user.setRegistrationAccessToken(getUserRegistrationToken(user));
                    }
                    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
                }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.just(user));
                    }
                }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
            });
        });
    }
}).apply(v))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), newUser.getUsername(), newUser.getSource())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
                Application client = optClient.orElse(null);
                newUser.setDomain(domain.getId());
                newUser.setClient(client != null ? client.getId() : null);
                newUser.setInternal(true);
                if (newUser.isPreRegistration()) {
                    newUser.setPassword(null);
                    newUser.setRegistrationCompleted(false);
                    newUser.setEnabled(false);
                } else {
                    String password = newUser.getPassword();
                    if (password != null && isInvalidUserPassword(password, client, domain)) {
                        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
                    }
                    newUser.setRegistrationCompleted(true);
                    newUser.setEnabled(true);
                    newUser.setDomain(domain.getId());
                }
                return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    return newUser;
                }))).onErrorResumeNext((ex)->{
                    if (ex instanceof UserAlreadyExistsException) {
                        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
                            if (!empty) {
                                throw new UserAlreadyExistsException(newUser.getUsername());
                            } else {
                                newUser.setPassword(null);
                                newUser.setExternalId(idpUser.getId());
                                newUser.setUsername(idpUser.getUsername());
                                return newUser;
                            }
                        }))));
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.error(ex));
                    }
                })).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
                    User user = transform(newUser1);
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                        user.setRegistrationAccessToken(getUserRegistrationToken(user));
                    }
                    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
                }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.just(user));
                    }
                }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
            });
        });
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
})).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
})).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}))).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
})))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(userService.findById(ReferenceType.DOMAIN, domain.getId(), userId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return userProvider.update(idpUser.getId(), idpUser);
            }).onErrorResumeNext((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return userProvider.create(convert(user));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            });
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return userService.update(user);
        }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria);
}).apply(y)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findById(ReferenceType.DOMAIN, domain.getId(), userId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return userProvider.update(idpUser.getId(), idpUser);
            }).onErrorResumeNext((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return userProvider.create(convert(user));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            });
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return userService.update(user);
        }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
    });
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return userService.update(user);
}).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return userService.update(user);
}).apply(a)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria);
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain1)->RxJava2Adapter.singleToMono(findById(ReferenceType.DOMAIN, domainId, userId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))).then()).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(ReferenceType.DOMAIN, domainId, userId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, userId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(RxJava2Adapter.singleToMono(userService.update(user))));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).throwable(throwable)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, userId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(RxJava2Adapter.singleToMono(userService.update(user))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(RxJava2Adapter.singleToMono(userService.update(user))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(RxJava2Adapter.singleToMono(userService.update(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.update(userToUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.update(userToUpdate)).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(assignRoles0_migrated(referenceType, referenceId, userId, roles, principal, revoke));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, userId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(oldUser)->{
    User userToUpdate = new User(oldUser);
    if (revoke) {
        if (userToUpdate.getRoles() != null) {
            userToUpdate.getRoles().removeAll(roles);
        }
    } else {
        userToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(userService.update(userToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, userId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(oldUser)->{
    User userToUpdate = new User(oldUser);
    if (revoke) {
        if (userToUpdate.getRoles() != null) {
            userToUpdate.getRoles().removeAll(roles);
        }
    } else {
        userToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(userService.update(userToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findById(referenceType, referenceId, userId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(oldUser)->{
    User userToUpdate = new User(oldUser);
    if (revoke) {
        if (userToUpdate.getRoles() != null) {
            userToUpdate.getRoles().removeAll(roles);
        }
    } else {
        userToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(userService.update(userToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(roles)).then(Mono.defer(()->RxJava2Adapter.singleToMono(userService.update(userToUpdate)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkRoles(roles)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(userService.update(userToUpdate))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById(client)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, client)))).switchIfEmpty(Mono.error(new ClientNotFoundException(client))).map(RxJavaReactorMigrationUtil.toJdkFunction((app1)->{
    if (!domain.equals(app1.getDomain())) {
        throw new ClientNotFoundException(client);
    }
    return app1;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationService.findById(client)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, client))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkRoles_migrated(roles));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(updateUser)).then(RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, id)).flatMap((user)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
})).flatMap((userProvider)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((io.gravitee.am.identityprovider.api.User idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v))))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((io.gravitee.am.model.User user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(updateUser)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, id)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
})).flatMap((userProvider)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((io.gravitee.am.identityprovider.api.User idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v))))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
})).flatMap((userProvider)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((io.gravitee.am.identityprovider.api.User idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (userProvider)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((io.gravitee.am.identityprovider.api.User idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, id)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return getUserService().update(user);
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, id)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return getUserService().update(user);
}).apply(v)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, userId)).flatMap((user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(RxJava2Adapter.completableToMono(getUserService().delete(userId))).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).throwable(throwable))))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserService().findById(referenceType, referenceId, userId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(RxJava2Adapter.completableToMono(getUserService().delete(userId))).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(RxJava2Adapter.completableToMono(getUserService().delete(userId))).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then()))))).doOnComplete
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(RxJava2Adapter.completableToMono(getUserService().delete(userId)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(RxJava2Adapter.completableToMono(getUserService().delete(userId))).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then()))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then())
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newUser, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateUser, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateStatus_migrated(domain, id, status, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(updateStatus(domain, id, status, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(resetPassword_migrated(domain, userId, password, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(resetPassword(domain, userId, password, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(domain, userId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(sendRegistrationConfirmation(domain, userId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(unlock_migrated(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(unlock(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(assignRoles_migrated(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(assignRoles(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enrollFactors_migrated(userId, factors, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(enrollFactors(userId, factors, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateUser, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateStatus_migrated(domain, userId, status));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(updateStatus(domain, userId, status, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(unlock_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(unlock(referenceType, referenceId, userId, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(assignRoles_migrated(referenceType, referenceId, userId, roles));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(assignRoles(referenceType, referenceId, userId, roles, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, userId, roles));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, userId, roles, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enrollFactors_migrated(userId, factors));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(enrollFactors(userId, factors, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(doGetCertificateProvider_migrated(certificateId, startTime));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateService.findById(certificateId)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(certificateProvider == null ? RxJava2Adapter.monoToMaybe(Mono.empty()) : RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider == null ? RxJava2Adapter.monoToMaybe(Mono.empty()) : RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider == null ? RxJava2Adapter.monoToMaybe(Mono.empty()) : RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdateSystemScopes_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError()).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->domain))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError()).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->domain))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createSystemScope_migrated(domain, systemScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, systemScope.getKey())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optScope)->{
    if (!optScope.isPresent()) {
        logger.info("Create a new system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        NewSystemScope scope = new NewSystemScope();
        scope.setKey(systemScope.getKey());
        scope.setClaims(systemScope.getClaims());
        scope.setName(systemScope.getLabel());
        scope.setDescription(systemScope.getDescription());
        scope.setDiscovery(systemScope.isDiscovery());
        return scopeService.create(domain, scope);
    } else if (shouldUpdateSystemScope(optScope, systemScope)) {
        logger.info("Update a system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        final Scope existingScope = optScope.get();
        UpdateSystemScope scope = new UpdateSystemScope();
        scope.setName(existingScope.getName() != null ? existingScope.getName() : systemScope.getLabel());
        scope.setDescription(existingScope.getDescription() != null ? existingScope.getDescription() : systemScope.getDescription());
        scope.setClaims(systemScope.getClaims());
        scope.setExpiresIn(existingScope.getExpiresIn());
        scope.setDiscovery(systemScope.isDiscovery());
        return scopeService.update(domain, optScope.get().getId(), scope);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, systemScope.getKey())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, systemScope.getKey())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(policyRepository.collectionExists()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
        }).apply(z)))).then().then(RxJava2Adapter.completableToMono(policyRepository.deleteCollection())));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))).then()).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(policyRepository.collectionExists()).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
        }).apply(z)))).then().then(RxJava2Adapter.completableToMono(policyRepository.deleteCollection())));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
}).apply(z)))).then().then(RxJava2Adapter.completableToMono(policyRepository.deleteCollection())));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
}).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
}).apply(z)))).then().then(RxJava2Adapter.completableToMono(policyRepository.deleteCollection()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(migrateToFlows_migrated(policies, domain));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Observable.fromIterable(flows.values()).flatMapCompletable((flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()).doOnComplete(()->LOGGER.info("Policies migrated to flows for domain {}", domain)).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Error during policies migration for domain {}", domain, error))).as(RxJava2Adapter::monoToCompletable));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(policyPluginService.findById(policy.getType())).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(expand));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(expand));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getIcon_migrated(resourceId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getIcon(resourceId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationService.createDefault()).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(ADMIN_DOMAIN)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.update(organization.getId(), patchOrganization, null)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findDefaultRole(Organization.DEFAULT, DefaultRole.ORGANIZATION_OWNER, ReferenceType.ORGANIZATION)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT, page, PAGE_SIZE)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(Organization.DEFAULT)).block
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).filter
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, Organization.DEFAULT, ADMIN_USERNAME, inlineIdp.getId())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderService.create(ReferenceType.ORGANIZATION, Organization.DEFAULT, adminIdentityProvider, null)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.update(Organization.DEFAULT, patchOrganization, null)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.create(newUser)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).block
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->membership.getMemberType() == MemberType.USER))).blockingFirst
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.setPlatformAdmin(member.getMemberId())).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).count()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.addOrUpdate(Organization.DEFAULT, membership)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(installationService.getOrInitialize()).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->{
    command.getPayload().getNode().setInstallationId(installation.getId());
    command.getPayload().getNode().setHostname(node.hostname());
    command.getPayload().getAdditionalInformation().putAll(installation.getAdditionalInformation());
    command.getPayload().getAdditionalInformation().put(API_URL, apiURL);
    command.getPayload().getAdditionalInformation().put(UI_URL, uiURL);
    command.getPayload().setDefaultOrganizationId(Organization.DEFAULT);
    command.getPayload().setDefaultEnvironmentId(Environment.DEFAULT);
    return command;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationService.getOrInitialize()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(installationService.get()).map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus()))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->reply)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationService.get()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(reply));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(reporterId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(reporterId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(reporterId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(reporterId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (x,y)->RxJava2Adapter.monoToMaybe(Mono.error(new NotImplementedException()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.search(referenceType, referenceId, query, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.search(referenceType, referenceId, filterCriteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(referenceType, referenceId, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(userService.findAll(referenceType, referenceId, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource())))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userService.update(existingUser)));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return userService.create(user);
}))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userService.update(existingUser)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userService.update(existingUser)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userService.update(existingUser)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource())))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userService.update(existingUser)));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return userService.create(user);
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserInvalidException("Invalid identity provider for [\'" + newUser.getUsername() + "\']")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            newUser.setDomain(null);
            newUser.setClient(null);
            newUser.setInternal(true);
            String password = newUser.getPassword();
            if (password == null || !passwordValidator.isValid(password)) {
                return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
            userToPersist.setReferenceId(organization.getId());
            userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToPersist)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
                userToPersist.setId(RandomString.generate());
                userToPersist.setExternalId(userToPersist.getId());
                return userToPersist;
            })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
                return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
            }).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
        });
    }
}).apply(v))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            newUser.setDomain(null);
            newUser.setClient(null);
            newUser.setInternal(true);
            String password = newUser.getPassword();
            if (password == null || !passwordValidator.isValid(password)) {
                return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
            userToPersist.setReferenceId(organization.getId());
            userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToPersist)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
                userToPersist.setId(RandomString.generate());
                userToPersist.setExternalId(userToPersist.getId());
                return userToPersist;
            })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
                return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
            }).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
        });
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToPersist)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userValidator.validate(userToPersist)).doOnError
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userProvider.create(convert(newUser))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidUserException("Unsupported source for this action")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(userService.update(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.update(user)).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findAll_migrated(expand));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll())).flatMapSingle((plugin)->convert(plugin, expand))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable)));
}))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll())).flatMapSingle((plugin)->convert(plugin, expand))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable)));
}))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll())).flatMapSingle((plugin)->convert(plugin, expand))).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll())).flatMapSingle
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(notifierId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap((z)->RxJava2Adapter.singleToMono(convert(z)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginNotFoundException(notifierId))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap((z)->RxJava2Adapter.singleToMono(convert(z)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginNotFoundException(notifierId))))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap((z)->RxJava2Adapter.singleToMono(convert(z)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap((z)->RxJava2Adapter.singleToMono(convert(z)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(convert(z))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getSchema_migrated(notifierId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginSchemaNotFoundException(notifierId))))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginSchemaNotFoundException(notifierId))))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getIcon_migrated(notifierId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getDocumentation_migrated(notifierId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(convert_migrated(plugin, expand));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.getIcon(notifierPlugin.getId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(notifierPlugin::setIcon)).then().then(Mono.just(notifierPlugin))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.getIcon(notifierPlugin.getId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(notifierPlugin::setIcon)).then().then(Mono.just(notifierPlugin))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.getIcon(notifierPlugin.getId())).doOnSuccess
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(notifierPlugin)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(notifierPlugin)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new MembershipReply(command.getId(), CommandStatus.ERROR)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<String> userObs = RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), COCKPIT_SOURCE)).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).single())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), COCKPIT_SOURCE)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap((membership)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when trying to assign role [{}] on {} [{}] for cockpit user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membershipPayload.getUserId(), membershipPayload.getOrganizationId(), error)))).onErrorReturn
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (membership)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findRole_migrated(roleName, organizationId, assignableType));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(systemRole, assignableType)).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(systemRole, assignableType)).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findSystemRole(systemRole, assignableType)).single
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findDefaultRole(organizationId, defaultRole, assignableType)).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findDefaultRole(organizationId, defaultRole, assignableType)).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleService.findDefaultRole(organizationId, defaultRole, assignableType)).single
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRoleException(String.format("Unable to find role [%s] for organization [%s].", roleName, organizationId)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidRoleException(String.format("Unable to find role [%s] for organization [%s].", roleName, organizationId)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(expand));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(expand));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(external));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(external));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated(external, expand));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(external, expand));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(identityProviderPlugin));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(identityProviderPlugin));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getSchema_migrated(identityProviderPlugin));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getSchema(identityProviderPlugin));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getIcon_migrated(identityProviderPlugin));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(getIcon(identityProviderPlugin));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(execute_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(execute(query));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeGroupBy_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.statistics(query)).map(RxJavaReactorMigrationUtil.toJdkFunction(AnalyticsGroupByResponse::new))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.statistics(query)).map(RxJavaReactorMigrationUtil.toJdkFunction(AnalyticsGroupByResponse::new))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.statistics(query)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
})));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeCount_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.countByApplication(query.getDomain(), query.getApplication())).map(RxJavaReactorMigrationUtil.toJdkFunction(AnalyticsCountResponse::new))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.countByApplication(query.getDomain(), query.getApplication())).map(RxJavaReactorMigrationUtil.toJdkFunction(AnalyticsCountResponse::new))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.countByApplication(query.getDomain(), query.getApplication())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->new AnalyticsCountResponse((Long)values.values().iterator().next())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->new AnalyticsCountResponse((Long)values.values().iterator().next())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeDateHistogram_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(execute_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(execute(query));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(referenceType, referenceId, criteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(search_migrated(domain, criteria, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(search(domain, criteria, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(aggregate_migrated(domain, criteria, analyticsType));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(aggregate(domain, criteria, analyticsType));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, auditId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, auditId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(domain, auditId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(domain, auditId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateDefaultIdp_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(DEFAULT_IDP_PREFIX + domain.getId())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<IdentityProvider>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<IdentityProvider>>)(isEmpty)->{
    if (isEmpty) {
        logger.info("No default idp found for domain {}, update domain", domain.getName());
        return identityProviderManager.create(domain.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(DEFAULT_IDP_PREFIX + domain.getId())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<IdentityProvider>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<IdentityProvider>>)(isEmpty)->{
    if (isEmpty) {
        logger.info("No default idp found for domain {}, update domain", domain.getName());
        return identityProviderManager.create(domain.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
}).apply(v)))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(DEFAULT_IDP_PREFIX + domain.getId())).hasElement
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<IdentityProvider>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<IdentityProvider>>)(isEmpty)->{
    if (isEmpty) {
        logger.info("No default idp found for domain {}, update domain", domain.getName());
        return identityProviderManager.create(domain.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll()).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Email::isEnabled))).blockingIterable
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailTemplateService.findAll()).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAllPermissions_migrated(user, referenceType, referenceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findMembershipPermissions(user, Collections.singletonMap(referenceType, referenceId).entrySet().stream())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::aclsPerPermission))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findMembershipPermissions(user, Collections.singletonMap(referenceType, referenceId).entrySet().stream())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::aclsPerPermission))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findMembershipPermissions(user, Collections.singletonMap(referenceType, referenceId).entrySet().stream())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(hasPermission_migrated(user, permissions));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(haveConsistentReferenceIds(permissions)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Boolean>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Boolean>>)(consistent)->{
    if (consistent) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findMembershipPermissions(user, permissions.referenceStream())).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(haveConsistentReferenceIds(permissions)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Boolean>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Boolean>>)(consistent)->{
    if (consistent) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findMembershipPermissions(user, permissions.referenceStream())).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(v)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(haveConsistentReferenceIds(permissions)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Boolean>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Boolean>>)(consistent)->{
    if (consistent) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findMembershipPermissions(user, permissions.referenceStream())).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findMembershipPermissions(user, permissions.referenceStream())).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findMembershipPermissions(user, permissions.referenceStream())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(haveConsistentReferenceIds_migrated(permissionAcls));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(consistencyCache.get(key))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(consistencyCache.get(key))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((consistent)->consistencyCache.put(key, consistent)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((consistent)->consistencyCache.put(key, consistent)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).all
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(false)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isApplicationIdConsistent_migrated(applicationId, domainId, environmentId, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(applicationService.findById(applicationId).flatMapSingle((application)->{
    if (domainId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)));
    } else {
        return isDomainIdConsistent(application.getDomain(), environmentId, organizationId);
    }
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isDomainIdConsistent_migrated(domainId, environmentId, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(domainService.findById(domainId).flatMapSingle((domain)->{
    if (environmentId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT));
    } else {
        return isEnvironmentIdConsistent(domain.getReferenceId(), organizationId);
    }
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isEnvironmentIdConsistent_migrated(environmentId, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findMembershipPermissions_migrated(user, referenceStream));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidUserException("Specified user is invalid"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.error(new InvalidUserException("Specified user is invalid"))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByMember(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Group::getId)).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Membership, Map<Permission, Set<Acl>>>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<String>, Single<Map<Membership, Map<Permission, Set<Acl>>>>>)(userGroupIds)->{
    MembershipCriteria criteria = new MembershipCriteria();
    criteria.setUserId(user.getId());
    criteria.setGroupIds(userGroupIds.isEmpty() ? null : userGroupIds);
    criteria.setLogicalOR(true);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
        if (allMemberships.isEmpty()) {
            return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
    }).apply(z)))));
}).apply(v)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByMember(user.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Group::getId)).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Membership, Map<Permission, Set<Acl>>>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<String>, Single<Map<Membership, Map<Permission, Set<Acl>>>>>)(userGroupIds)->{
    MembershipCriteria criteria = new MembershipCriteria();
    criteria.setUserId(user.getId());
    criteria.setGroupIds(userGroupIds.isEmpty() ? null : userGroupIds);
    criteria.setLogicalOR(true);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
        if (allMemberships.isEmpty()) {
            return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
    }).apply(z)))));
}).apply(v)))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(groupService.findByMember(user.getId())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Map<Membership, Map<Permission, Set<Acl>>>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<String>, Single<Map<Membership, Map<Permission, Set<Acl>>>>>)(userGroupIds)->{
    MembershipCriteria criteria = new MembershipCriteria();
    criteria.setUserId(user.getId());
    criteria.setGroupIds(userGroupIds.isEmpty() ? null : userGroupIds);
    criteria.setLogicalOR(true);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
        if (allMemberships.isEmpty()) {
            return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
    }).apply(z)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList()))).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isAlertingAvailable_migrated());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(!this.triggerProviderManager.findAll().isEmpty())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(!this.triggerProviderManager.findAll().isEmpty())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((entry)->(external != null && external) == entry.getKey().external()))).map
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationService.getOrInitialize()).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeDateHistogram_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeGroupBy_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(executeGroupBy(query.getDomain(), queryBuilder.build(), query.getType())).flatMap((analyticsResponse)->RxJava2Adapter.singleToMono(fetchMetadata((AnalyticsGroupByResponse)analyticsResponse)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(executeGroupBy(query.getDomain(), queryBuilder.build(), query.getType())).flatMap((analyticsResponse)->RxJava2Adapter.singleToMono(fetchMetadata((AnalyticsGroupByResponse)analyticsResponse)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(executeGroupBy(query.getDomain(), queryBuilder.build(), query.getType())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (analyticsResponse)->RxJava2Adapter.singleToMono(fetchMetadata((AnalyticsGroupByResponse)analyticsResponse))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.statistics(query)).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsGroupByResponse(value)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.statistics(query)).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsGroupByResponse(value)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.statistics(query)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeGroupBy(query.getDomain(), queryBuilder.build(), query.getType()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(fetchMetadata_migrated(analyticsGroupByResponse));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(analyticsGroupByResponse)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(analyticsGroupByResponse)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->{
    Map<String, Map<String, Object>> metadata = result.stream().flatMap((m)->m.entrySet().stream()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
    analyticsGroupByResponse.setMetadata(metadata);
    return analyticsGroupByResponse;
}))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->{
    Map<String, Map<String, Object>> metadata = result.stream().flatMap((m)->m.entrySet().stream()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
    analyticsGroupByResponse.setMetadata(metadata);
    return analyticsGroupByResponse;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList()).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (appId)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeCount_migrated(query));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.countByDomain(query.getDomain())).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsCountResponse(value)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.countByDomain(query.getDomain())).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsCountResponse(value)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.countByDomain(query.getDomain())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.countByDomain(query.getDomain())).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsCountResponse(value)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.countByDomain(query.getDomain())).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsCountResponse(value)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.countByDomain(query.getDomain())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->values.values().isEmpty() ? new AnalyticsCountResponse(0L) : new AnalyticsCountResponse((Long)values.values().iterator().next())))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->values.values().isEmpty() ? new AnalyticsCountResponse(0L) : new AnalyticsCountResponse((Long)values.values().iterator().next())))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeGroupBy_migrated(domain, criteria, type));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(domain, criteria, type)).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->new AnalyticsGroupByResponse(values)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(auditService.aggregate(domain, criteria, type)).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->new AnalyticsGroupByResponse(values)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.aggregate(domain, criteria, type)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(upgradeDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(domain)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(domain)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(domainService.patch(domain.getId(), patchDomain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(getReporter(referenceType, referenceId).findById(referenceType, referenceId, auditId)).switchIfEmpty(Mono.error(new AuditNotFoundException(auditId))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getReporter(referenceType, referenceId).findById(referenceType, referenceId, auditId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(findById(ReferenceType.DOMAIN, domain, auditId)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(findById(ReferenceType.DOMAIN, domain, auditId)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(systemTaskRepository.findById(TASK_ID)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.singleToMono(createSystemTask(instanceOperationId)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen(new RetryWithDelay(3, 5000))).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(systemTaskRepository.findById(TASK_ID)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.singleToMono(createSystemTask(instanceOperationId)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(systemTaskRepository.findById(TASK_ID)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | ()->RxJava2Adapter.singleToMono(createSystemTask(instanceOperationId))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(true));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, conditionalOperationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, (SystemTaskStatus.ONGOING), conditionalOperationId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return migrateScopeSettings(updatedTask);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, (SystemTaskStatus.ONGOING), conditionalOperationId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return migrateScopeSettings(updatedTask);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(updateSystemTask(task, (SystemTaskStatus.ONGOING), conditionalOperationId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return migrateScopeSettings(updatedTask);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createSystemTask_migrated(operationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(systemTaskRepository.create(systemTask).onErrorResumeNext((err)->{
    logger.warn("SystemTask {} can\'t be created due to \'{}\'", TASK_ID, err.getMessage());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(systemTaskRepository.findById(systemTask.getId())).single());
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(systemTaskRepository.findById(systemTask.getId())).single());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(systemTaskRepository.findById(systemTask.getId())).single
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateSystemTask_migrated(task, status, operationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(systemTaskRepository.updateIf(task, operationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(migrateScopeSettings_migrated(task));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
})))).onErrorResumeNext((err)->{
    logger.error("Unable to migrate scope options for applications: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
})))).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(app));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(attempts).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    if (++retryCount < maxRetries) {
        return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
    }
    return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
})));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(attempts).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(installationService.getOrInitialize()).map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Error occurred when updating installation status.", error)))).onErrorReturn
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationService.getOrInitialize()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(updateDefaultReporter_migrated(domain));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain.getId())).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain.getId())).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain.getId())).collectList
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null)).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when handling organization [{}] with id [{}].", organizationPayload.getName(), organizationPayload.getId(), error)))).onErrorReturn
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.createOrUpdate(eq(ReferenceType.ORGANIZATION), eq("orga#1"), argThat((newUser)->newUser.getExternalId().equals(userPayload.getId()) && newUser.getSource().equals("cockpit") && newUser.getFirstName().equals(userPayload.getFirstName()) && newUser.getLastName().equals(userPayload.getLastName()) && newUser.getEmail().equals(userPayload.getEmail()) && newUser.getAdditionalInformation().get("info1").equals(additionalInformation.get("info1")) && newUser.getAdditionalInformation().get("info2").equals(additionalInformation.get("info2")) && newUser.getAdditionalInformation().get(StandardClaims.PICTURE).equals(userPayload.getPicture())))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.createOrUpdate(eq(ReferenceType.ORGANIZATION), eq("orga#1"), any(NewUser.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.addAdditionalInformation(any(Map.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(installation)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.addAdditionalInformation(any(Map.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new RuntimeException("Unexpected error"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(domain))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, 0))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, 0)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(domainScope), 0, 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(domain.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(app))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(domain.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(role))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.create(any(String.class), any(NewScope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(domain))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(domainScope), 0, 1))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(domain))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, 0))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, 0)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(domainScope), 0, 0))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(domain.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(domain.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(domain))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Collections.singleton(domainScope), 0, Integer.MAX_VALUE))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationService.findByDomain(domain.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(app))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByDomain(domain.getId())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(role))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(roleService.findRolesByName(any(), any(), any(), any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(role)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(domainService.findAllByCriteria(new DomainCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertTrigger)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertTrigger)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(alertTriggerService.getById(ALERT_TRIGGER_ID)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(alertTrigger)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, alertTriggerCriteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertTrigger)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(alertNotifier)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Arrays.asList(domain))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.create(anyString(), any(NewSystemScope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(eq(DOMAIN_ID), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(DOMAIN_ID, "openid")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(openId)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(DOMAIN_ID, "phone")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(phone)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(DOMAIN_ID, "email")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(email)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.create(anyString(), any(NewSystemScope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(scopeService.update(anyString(), anyString(), any(UpdateSystemScope.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Scope())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(installation)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(installation))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(installation)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.setAdditionalInformation(anyMap())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(commonUserService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByMember(any(), any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(commonUserService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByMember(any(), any())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(m1, m2, m3)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(membershipService.delete(anyString())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(any(), any(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(provider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(provider.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(mock(io.gravitee.am.identityprovider.api.User.class))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(mock(User.class))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(commonUserService.setRoles(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(any(), any(), any(), any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(UserProvider.class))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getUsername(), newUser.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(0)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(UserProvider.class))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findByDomainAndClientId(domainId, newUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(UserProvider.class))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new DefaultUser(newUser.getUsername()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(domainId)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(preRegisteredUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(any(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(preRegisteredUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new DefaultUser(newUser.getUsername()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new DefaultUser(newUser.getUsername()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(client)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain), eq(id))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(UserProvider.class))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(updateUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findByDomainAndClientId(domain, updateUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain), eq(id))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(UserProvider.class))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(updateUser.getClient())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idpUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(userProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(roles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(roles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.emptySet())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(mock(UserProvider.class))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(installation)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ENVIRONMENT_PRIMARY_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(1)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findDefaultRole(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (i)->RxJava2Adapter.monoToSingle(Mono.just(i.getArgument(1)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | lenient().when(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | lenient().when(roleService.findDefaultRole(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.createOrUpdate(eq("orga#1"), eq("env#1"), argThat((newEnvironment)->newEnvironment.getHrids().equals(environmentPayload.getHrids()) && newEnvironment.getDescription().equals(environmentPayload.getDescription()) && newEnvironment.getName().equals(environmentPayload.getName()) && newEnvironment.getDomainRestrictions().equals(environmentPayload.getDomainRestrictions())), isNull())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Environment())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.createOrUpdate(eq("orga#1"), eq("env#1"), any(NewEnvironment.class), isNull())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), argThat((criteria)->criteria.getUserId().get().equals(user.getId()) && !criteria.getGroupIds().isPresent() && criteria.isLogicalOR()))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(role))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(group)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), argThat((criteria)->criteria.getUserId().get().equals(user.getId()) && criteria.getGroupIds().get().equals(Arrays.asList(group.getId())) && criteria.isLogicalOR()))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton(role))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organizationMembership)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq(ENVIRONMENT_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(environmentMembership)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domainMembership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), environmentMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(organizationRole, environmentRole, domainRole)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organizationMembership)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domainMembership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(organizationRole, domainRole)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organizationMembership)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(domainMembership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(organizationRole, domainRole)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(role)))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.APPLICATION), eq(APPLICATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(role)))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(group)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organizationMembership, groupMembership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), groupMembership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(organizationRole, groupRole)))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(group)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(organizationMembership, groupMembership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), groupMembership.getRoleId()))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(organizationRole, groupRole)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException(ENVIRONMENT_ID))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(application)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(environment)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleService.createOrUpdateSystemRoles()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(roleService.createOrUpdateSystemRoles()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.error(TechnicalException::new)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(task)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(systemTaskRepository.findById(anyString())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(systemTaskRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(task)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(applicationRepository.update(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Application())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(sysTask));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()), RxJava2Adapter.monoToMaybe(Mono.just(ongoingTask)), RxJava2Adapter.monoToMaybe(Mono.just(finalizedTask)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()), RxJava2Adapter.monoToMaybe(Mono.just(ongoingTask)), RxJava2Adapter.monoToMaybe(Mono.just(finalizedTask)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()), RxJava2Adapter.monoToMaybe(Mono.just(ongoingTask)), RxJava2Adapter.monoToMaybe(Mono.just(finalizedTask)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(systemTaskRepository.create(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new Exception())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.createOrUpdate(eq("orga#1"), argThat((newOrganization)->newOrganization.getHrids().equals(organizationPayload.getHrids()) && newOrganization.getDescription().equals(organizationPayload.getDescription()) && newOrganization.getName().equals(organizationPayload.getName()) && newOrganization.getDomainRestrictions().equals(organizationPayload.getDomainRestrictions())), isNull())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Organization())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.createOrUpdate(eq("orga#1"), any(NewOrganization.class), isNull())).thenReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(identityProviderService.create(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(NewIdentityProvider.class), isNull())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(idp)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.update(eq(Organization.DEFAULT), any(PatchOrganization.class), isNull())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(argThat((user)->!user.isInternal() && user.getUsername().equals("admin") && user.getSource().equals(idp.getId()) && user.getReferenceType() == ReferenceType.ORGANIZATION && user.getReferenceId().equals(Organization.DEFAULT)))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(adminUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById("admin")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(idp)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(idp)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(idp)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(idp)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, Organization.DEFAULT, "admin", idp.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(adminUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(idp)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, Organization.DEFAULT, "admin", idp.getId())).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(adminUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.update(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(domainService.findById("admin")).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(domainService.delete("admin")).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findDefaultRole(Organization.DEFAULT, DefaultRole.ORGANIZATION_OWNER, ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(adminRole)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findAll(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(0), anyInt())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(users, 0, totalUsers))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findAll(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(1), anyInt())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(users, 1, totalUsers))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userService.findAll(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(2), anyInt())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(Arrays.asList(user, user), 2, totalUsers))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(primaryOwnerRole)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipService.addOrUpdate(eq(Organization.DEFAULT), any(Membership.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Membership())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(adminRole)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(organizationPrimaryOwner)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipService.setPlatformAdmin(userId)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(organizationPrimaryOwner)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(policyRepository.collectionExists()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(policyRepository.deleteCollection()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(policyRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(policyRepository.collectionExists()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(policyRepository.deleteCollection()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(policyRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowService.create(any(), anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(policyPluginService.findById(null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new PolicyPlugin())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(policyRepository.collectionExists()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(policyRepository.deleteCollection()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(policyRepository.findAll()).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(flowService.create(any(), anyString(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Flow())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(policyPluginService.findById(null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new PolicyPlugin())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(eventService.findByTimeFrame(lastRefreshAt - lastDelay, nextLastRefreshAt)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(accessTokenRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(loginAttemptRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(permissionTicketRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(authorizationCodeRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(scopeApprovalRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(refreshTokenRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(requestObjectRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(authenticationFlowContextRepository.purgeExpiredData()).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkPermission_migrated(referenceType, referenceId, permission, acls));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(checkPermissions(getAuthenticatedUser(), Permissions.of(referenceType, referenceId, permission, acls)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, applicationId, permission, acls));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(checkPermissions(getAuthenticatedUser(), or(of(ReferenceType.APPLICATION, applicationId, permission, acls), of(ReferenceType.DOMAIN, domainId, permission, acls), of(ReferenceType.ENVIRONMENT, environmentId, permission, acls), of(ReferenceType.ORGANIZATION, organizationId, permission, acls))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domainId, permission, acls));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(checkPermissions(authenticatedUser, or(of(ReferenceType.DOMAIN, domainId, permission, acls), of(ReferenceType.ENVIRONMENT, environmentId, permission, acls), of(ReferenceType.ORGANIZATION, organizationId, permission, acls))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, acls));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(checkPermissions(getAuthenticatedUser(), or(of(ReferenceType.DOMAIN, domainId, permission, acls), of(ReferenceType.ENVIRONMENT, environmentId, permission, acls), of(ReferenceType.ORGANIZATION, organizationId, permission, acls))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, permission, acls));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(checkPermissions(getAuthenticatedUser(), or(of(ReferenceType.ENVIRONMENT, environmentId, permission, acls), of(ReferenceType.ORGANIZATION, organizationId, permission, acls))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkPermissions_migrated(authenticatedUser, permissionAcls));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, permissionAcls)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)this::checkPermission).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, permissionAcls)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)this::checkPermission).apply(y)))).then()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, permissionAcls)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)this::checkPermission).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(hasPermission_migrated(user, referenceType, referenceId, permission, acls));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(hasPermission(user, Permissions.of(referenceType, referenceId, permission, acls)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(hasAnyPermission_migrated(user, organizationId, environmentId, domainId, applicationId, permission, acls));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(hasPermission(user, or(of(ReferenceType.APPLICATION, applicationId, permission, acls), of(ReferenceType.DOMAIN, domainId, permission, acls), of(ReferenceType.ENVIRONMENT, environmentId, permission, acls), of(ReferenceType.ORGANIZATION, organizationId, permission, acls))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(hasAnyPermission_migrated(user, organizationId, environmentId, domainId, permission, acls));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(hasPermission(user, or(of(ReferenceType.DOMAIN, domainId, permission, acls), of(ReferenceType.ENVIRONMENT, environmentId, permission, acls), of(ReferenceType.ORGANIZATION, organizationId, permission, acls))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(hasPermission_migrated(user, permissionAcls));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(permissionService.hasPermission(user, permissionAcls));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkPermission_migrated(permissions, permission, acl));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(checkPermission(permissions.getOrDefault(permission, emptySet()).contains(acl)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAllPermissions_migrated(user, organizationId, environmentId, domainId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAllPermissions(user, organizationId, environmentId, domainId, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAllPermissions_migrated(user, organizationId, environmentId, domainId, applicationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | applicationId != null ? permissionService.findAllPermissions(user, ReferenceType.APPLICATION, applicationId) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | domainId != null ? permissionService.findAllPermissions(user, ReferenceType.DOMAIN, domainId) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | environmentId != null ? permissionService.findAllPermissions(user, ReferenceType.ENVIRONMENT, environmentId) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | organizationId != null ? permissionService.findAllPermissions(user, ReferenceType.ORGANIZATION, organizationId) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(permissionObs, (objects)->{
    Map<ReferenceType, Map<Permission, Set<Acl>>> permissionsPerType = new HashMap<>();
    permissionsPerType.put(ReferenceType.APPLICATION, (Map<Permission, Set<Acl>>)objects[0]);
    permissionsPerType.put(ReferenceType.DOMAIN, (Map<Permission, Set<Acl>>)objects[1]);
    permissionsPerType.put(ReferenceType.ENVIRONMENT, (Map<Permission, Set<Acl>>)objects[2]);
    permissionsPerType.put(ReferenceType.ORGANIZATION, (Map<Permission, Set<Acl>>)objects[3]);
    return permissionsPerType;
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(checkPermission_migrated(hasPermission));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new ForbiddenException("Permission denied"))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.error(new ForbiddenException("Permission denied"))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST)).thenMany(environmentService.findAll(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEnvironmentInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST)).thenMany
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (environment)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ)))).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST)).then(RxJava2Adapter.singleToMono(auditService.search(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize())).flatMap((auditPage)->RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.search(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((organization)->RxJava2Adapter.flowableToFlux(membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION)).collectList()).flatMap((memberships)->RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((organization)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (organization)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST)).thenMany(tagService.findAll(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterTagInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST)).thenMany
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE)).then(RxJava2Adapter.singleToMono(tagService.create(newTag, organizationId, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE)).then(RxJava2Adapter.singleToMono(tagService.create(newTag, organizationId, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST)).thenMany(entrypointService.findAll(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEntrypointInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST)).thenMany
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE)).then(RxJava2Adapter.singleToMono(entrypointService.create(organizationId, newEntrypoint, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE)).then(RxJava2Adapter.singleToMono(entrypointService.create(organizationId, newEntrypoint, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(roleService.create(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.create(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST)).then(RxJava2Adapter.singleToMono(groupService.findAll(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupService.findAll(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE)).then(RxJava2Adapter.singleToMono(groupService.create(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupService.create(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(identityProviderService.create(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderService.create(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId)).flatMap((organizationPermissions)->RxJava2Adapter.completableToMono(checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST)).then(RxJava2Adapter.singleToMono(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size)).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((organization)->RxJava2Adapter.singleToMono(organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (organization)->RxJava2Adapter.singleToMono(organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(user.getSource())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(filteredUser)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(filteredUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(searchUsers_migrated(referenceType, referenceId, query, filter, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(executeSearchUsers(service, referenceType, referenceId, query, filter, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(executeSearchUsers_migrated(service, referenceType, referenceId, query, filter, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(service.search(referenceType, referenceId, query, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return service.search(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE));
}).onErrorResumeNext((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(service.findAll(referenceType, referenceId, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationService.update(organizationId, patchOrganization, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationService.update(organizationId, patchOrganization, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formService.findByTemplate(ReferenceType.ORGANIZATION, organizationId, formTemplate.template())).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(formService.create(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(formService.create(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(formService.update(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(formService.update(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user)).map(RxJavaReactorMigrationUtil.toJdkFunction(UserEntity::new)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, SingleSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user)).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, SingleSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.update(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.update(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.updateStatus(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.updateStatus(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(organizationUserService.delete(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(organizationUserService.delete(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->RxJava2Adapter.completableToMono(organizationUserService.resetPassword(organizationId, existingUser, password.getPassword(), authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user)).filter
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (existingUser)->RxJava2Adapter.completableToMono(organizationUserService.resetPassword(organizationId, existingUser, password.getPassword(), authenticatedUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(enhanceIdentityProvider_migrated(userEntity));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(userEntity.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(userEntity.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(userEntity.getSource())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(userEntity)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(userEntity)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ)).then(RxJava2Adapter.singleToMono(identityProviderService.findById(ReferenceType.ORGANIZATION, organizationId, identityProvider)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ)).then(RxJava2Adapter.singleToMono(identityProviderService.findById(ReferenceType.ORGANIZATION, organizationId, identityProvider)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(identityProviderService.update(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(identityProviderService.update(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(identityProviderService.delete(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(identityProviderService.delete(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE)).then(RxJava2Adapter.completableToMono(groupService.delete(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE)).then(RxJava2Adapter.completableToMono(groupService.delete(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(groupService.findMembers(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupService.findMembers(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(member));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).flatMap((group1)->RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, userId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, userId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).flatMap((group1)->RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, userId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, userId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ)).then(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.ORGANIZATION, organizationId, role)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.ORGANIZATION, organizationId, role)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(roleService.update(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.update(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser)).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(roleService.delete(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(roleService.delete(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ)).then(RxJava2Adapter.singleToMono(entrypointService.findById(entrypointId, organizationId)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ)).then(RxJava2Adapter.singleToMono(entrypointService.findById(entrypointId, organizationId)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(entrypointService.update(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(entrypointService.update(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE)).then(RxJava2Adapter.completableToMono(entrypointService.delete(entrypointId, organizationId, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE)).then(RxJava2Adapter.completableToMono(entrypointService.delete(entrypointId, organizationId, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagService.findById(tagId, organizationId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(tagService.update(tagId, organizationId, tagToUpdate, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(tagService.update(tagId, organizationId, tagToUpdate, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE)).then(RxJava2Adapter.completableToMono(tagService.delete(tag, organizationId, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE)).then(RxJava2Adapter.completableToMono(tagService.delete(tag, organizationId, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((irrelevant)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).then(RxJava2Adapter.singleToMono(auditService.findById(ReferenceType.ORGANIZATION, organizationId, audit)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).then(RxJava2Adapter.singleToMono(auditService.findById(ReferenceType.ORGANIZATION, organizationId, audit)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ)).then(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST)).thenMany(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((domains)->new Page<Domain>(domains.stream().skip((long)page * size).limit(size).collect(Collectors.toList()), page, domains.size())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST)).thenMany
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ)))).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE)).then(RxJava2Adapter.singleToMono(domainService.create(organizationId, environmentId, newDomain, authenticatedUser)).flatMap((domain)->RxJava2Adapter.singleToMono(identityProviderManager.create(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))).flatMap((domain)->RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Reporter __)->domain))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.create(organizationId, environmentId, newDomain, authenticatedUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderManager.create(domain.getId())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findByHrid(environmentId, hrid)).flatMap((domain)->RxJava2Adapter.completableToMono(checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ)).then(Mono.defer(()->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions))))))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findByHrid(environmentId, hrid)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions)))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions)))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE)).then(RxJava2Adapter.completableToMono(domainService.delete(domain, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE)).then(RxJava2Adapter.completableToMono(domainService.delete(domain, authenticatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(entrypointService.findAll(organizationId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain)))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(entrypointService.findAll(organizationId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain)))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(entrypointService.findAll(organizationId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(entrypointService.findAll(organizationId)).collectList
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(domainService.patch(domainId, patchDomain, authenticatedUser)).flatMap((v)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(v, userPermissions)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList()))).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.patch(domainId, patchDomain, authenticatedUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
})).flatMap((pagedApplications)->RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Application> applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size())))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.create(domain, newApplication, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build()))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.create(domain, newApplication, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.create(domain, newApplication, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.create(domain, newApplication, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain(domain))).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((sortedCertificates)->Response.ok(sortedCertificates).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain(domain))).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
})))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->searchRoles(domain, query, page, size))).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedRoles)->{
    List<Role> roles = pagedRoles.getData().stream().map(this::filterRoleInfos).sorted(Comparator.comparing(Role::getName)).collect(Collectors.toList());
    return new Page<>(roles, pagedRoles.getCurrentPage(), pagedRoles.getTotalCount());
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->searchRoles(domain, query, page, size))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.create(domain, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build()))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.create(domain, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.create(domain, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.create(domain, newRole, authenticatedUser)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(searchRoles_migrated(domain, query, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(roleService.findByDomain(domain, page, Math.min(MAX_ROLES_SIZE_PER_PAGE, size)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(roleService.searchByDomain(domain, query, page, Math.min(MAX_ROLES_SIZE_PER_PAGE, size)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size))).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).flatMap((hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(user.getSource())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(filteredUser)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(Mono.just(filteredUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domain)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantService.create(domain, newExtensionGrant, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build()))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantService.create(domain, newExtensionGrant, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantService.create(domain, newExtensionGrant, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantService.create(domain, newExtensionGrant, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST)).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))))).map(RxJavaReactorMigrationUtil.toJdkFunction((searchPage)->new Page(searchPage.getData().stream().map(this::filterScopeInfos).sorted(Comparator.comparing(Scope::getKey)).collect(Collectors.toList()), searchPage.getCurrentPage(), searchPage.getTotalCount())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST)).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.create(domain, newScope, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build()))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.create(domain, newScope, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.create(domain, newScope, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeService.create(domain, newScope, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ)).then(RxJava2Adapter.maybeToMono(formService.findByDomainAndTemplate(domain, formTemplate.template()))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ)).then(RxJava2Adapter.maybeToMono(formService.findByDomainAndTemplate(domain, formTemplate.template())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.create(domain, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build()))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.create(domain, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.create(domain, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(formService.create(domain, newForm, authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ)).then(RxJava2Adapter.maybeToMono(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template()))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ)).then(RxJava2Adapter.maybeToMono(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST)).then(RxJava2Adapter.singleToMono(auditService.search(domain, queryBuilder.build(), param.getPage(), param.getSize())).flatMap((auditPage)->RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(auditService.search(domain, queryBuilder.build(), param.getPage(), param.getSize())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList())))).flatMap((reporters)->RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
})))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN)).collectList()))).flatMap((memberships)->RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN)).collectList()))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).flatMap((membership1)->RxJava2Adapter.completableToMono(membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser)).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser)).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.DOMAIN, domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.DOMAIN, domain)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ)).then(RxJava2Adapter.singleToMono(analyticsService.execute(query)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ)).then(RxJava2Adapter.singleToMono(analyticsService.execute(query)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain(domain))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain(domain))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST)).then(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domain, true)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ)).flatMapMany
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (hasPermission)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domain, true)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domain, true)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(botDetectionService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(botDetectionService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (___)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(botDetectionService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(botDetectionService.findByDomain(domain)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE)).then(RxJava2Adapter.completableToMono(botDetectionService.delete(domain, botDetectionId, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE)).then(RxJava2Adapter.completableToMono(botDetectionService.delete(domain, botDetectionId, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST)).thenMany(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).sort(Comparator.comparingInt((o)->o.getType().getOrder())).collectList()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST)).thenMany
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(patchAlertTriggers)))).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser))).collectList()).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(patchAlertTriggers)))).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser))).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(patchAlertTriggers)))).flatMapSingle
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(patchAlertTriggers)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).thenMany(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).sort(Comparator.comparing(AlertNotifier::getCreatedAt)).collectList()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).thenMany
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(alertNotifierService.create(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(alertNotifierService.create(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then(RxJava2Adapter.singleToMono(alertNotifierService.getById(ReferenceType.DOMAIN, domainId, notifierId)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then(RxJava2Adapter.singleToMono(alertNotifierService.getById(ReferenceType.DOMAIN, domainId, notifierId)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(alertNotifierService.update(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(alertNotifierService.update(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then(RxJava2Adapter.completableToMono(alertNotifierService.delete(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then(RxJava2Adapter.completableToMono(alertNotifierService.delete(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowService.findById(ReferenceType.DOMAIN, domain, flow)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(resourceService.delete(domain, resource, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(resourceService.delete(domain, resource, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE)).then(RxJava2Adapter.completableToMono(factorService.delete(domain, factor, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE)).then(RxJava2Adapter.completableToMono(factorService.delete(domain, factor, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById(reporter).as(RxJava2Adapter::maybeToMono)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(auditService.findById(domain, audit)))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(emailTemplateService.delete(email, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(emailTemplateService.delete(email, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, MaybeSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(group1));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(groupService.delete(ReferenceType.DOMAIN, domain, group, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.completableToMono(groupService.delete(ReferenceType.DOMAIN, domain, group, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(member));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(group1.getRoles());
})))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(group1.getRoles());
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(domain, form, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(domain, form, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(scopeService.delete(scope, false, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(scopeService.delete(scope, false, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE)).then(RxJava2Adapter.completableToMono(extensionGrantService.delete(domain, extensionGrant, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE)).then(RxJava2Adapter.completableToMono(extensionGrantService.delete(domain, extensionGrant, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceClient).apply(v)))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(userService.delete(ReferenceType.DOMAIN, domain, user, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.completableToMono(userService.delete(ReferenceType.DOMAIN, domain, user, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->RxJava2Adapter.completableToMono(userService.resetPassword(domain, user, password.getPassword(), authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (domain)->RxJava2Adapter.completableToMono(userService.resetPassword(domain, user, password.getPassword(), authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.completableToMono(userService.sendRegistrationConfirmation(domain, user, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.completableToMono(userService.sendRegistrationConfirmation(domain, user, authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(userService.unlock(ReferenceType.DOMAIN, domain, user, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.completableToMono(userService.unlock(ReferenceType.DOMAIN, domain, user, authenticatedUser))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(enhanceIdentityProvider_migrated(userEntity));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderService.findById(userEntity.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderService.findById(userEntity.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderService.findById(userEntity.getSource())).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(userEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(userEntity)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(enhanceClient_migrated(userEntity));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById(userEntity.getClient())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient())))).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    userEntity.setApplicationEntity(new ApplicationEntity(application));
    return userEntity;
})).defaultIfEmpty(userEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById(userEntity.getClient())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient())))).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    userEntity.setApplicationEntity(new ApplicationEntity(application));
    return userEntity;
})).defaultIfEmpty(userEntity)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationService.findById(userEntity.getClient())).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(userEntity)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.just(userEntity)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith(RxJava2Adapter.singleToMono(getScope(scopeApproval.getDomain(), scopeApproval.getScope())), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))))).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith(RxJava2Adapter.singleToMono(getScope(scopeApproval.getDomain(), scopeApproval.getScope())), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))))).collectList
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith(RxJava2Adapter.singleToMono(getScope(scopeApproval.getDomain(), scopeApproval.getScope())), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith(RxJava2Adapter.singleToMono(getScope(scopeApproval.getDomain(), scopeApproval.getScope())), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
}).apply(y)))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getClient_migrated(domain, clientId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()).cache());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()).cache
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getScope_migrated(domain, scopeKey));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, scopeKey)).switchIfEmpty(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey))).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single()).cache());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, scopeKey)).switchIfEmpty(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey))).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single()).cache
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, scopeKey)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(endUser.getRoles());
})))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(endUser.getRoles());
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
})))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).thenMany(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user))).collectList()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).thenMany
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->RxJava2Adapter.completableToMono(credentialService.delete(credential))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.completableToMono(credentialService.delete(credential))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
})))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user1));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById(consent).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent)))).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
}))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById(consent).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent)))).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
}))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById(consent).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->RxJava2Adapter.completableToMono(scopeApprovalService.revokeByConsent(domain, user, consent, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.completableToMono(scopeApprovalService.revokeByConsent(domain, user, consent, authenticatedUser))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getClient_migrated(domain, clientId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(roleService.delete(ReferenceType.DOMAIN, domain, role, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(roleService.delete(ReferenceType.DOMAIN, domain, role, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKey)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKey)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKeys)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKeys)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->Response.ok(certificate1).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(certificateService.delete(certificate, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(certificateService.delete(certificate, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(identityProviderService.delete(domain, identity, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(identityProviderService.delete(domain, identity, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((app)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))))).map(RxJavaReactorMigrationUtil.toJdkFunction((application1)->{
    if (!application1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Application does not belong to domain");
    }
    return Response.ok(application1).build();
}))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((app)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions)))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (app)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(applicationService.updateType(domain, application, patchApplicationType.getType(), authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(applicationService.updateType(domain, application, patchApplicationType.getType(), authenticatedUser)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE)).then(RxJava2Adapter.completableToMono(applicationService.delete(application, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE)).then(RxJava2Adapter.completableToMono(applicationService.delete(application, authenticatedUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.patch(domain, application, patchApplication, authenticatedUser)).flatMap((updatedApplication)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))))))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList()))).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.patch(domain, application, patchApplication, authenticatedUser)).flatMap((updatedApplication)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (patch)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.patch(domain, application, patchApplication, authenticatedUser)).flatMap((updatedApplication)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.patch(domain, application, patchApplication, authenticatedUser)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailTemplateService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ)).then(RxJava2Adapter.maybeToMono(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template()))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, emailTemplate.template())).build())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ)).then(RxJava2Adapter.maybeToMono(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build())))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION)).collectList()))).flatMap((memberships)->RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION)).collectList()))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION)).collectList())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION)).collectList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).flatMap((membership1)->RxJava2Adapter.completableToMono(membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser)).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser)).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.APPLICATION, application)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.APPLICATION, application)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(RxJava2Adapter.singleToMono(resourceService.getMetadata((List<Resource>)pagedResources.getData())), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(RxJava2Adapter.singleToMono(resourceService.getMetadata((List<Resource>)pagedResources.getData())), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList()).zipWith(RxJava2Adapter.singleToMono(resourceService.getMetadata((List<Resource>)pagedResources.getData())), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
    return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList()).zipWith
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList()).zipWith(RxJava2Adapter.singleToMono(resourceService.getMetadata((List<Resource>)pagedResources.getData())), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
    return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
}))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ)).then(RxJava2Adapter.singleToMono(applicationAnalyticsService.execute(query)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ)).then(RxJava2Adapter.singleToMono(applicationAnalyticsService.execute(query)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST)).then(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowService.findByApplication(ReferenceType.DOMAIN, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ)).flatMapMany
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (hasPermission)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowService.findByApplication(ReferenceType.DOMAIN, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flowService.findByApplication(ReferenceType.DOMAIN, domain, application)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowService.findById(ReferenceType.DOMAIN, domain, flow)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceService.findByDomainAndClientResource(domain, application1.getId(), resource)).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceService.findByDomainAndClientResource(domain, application1.getId(), resource)).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourceService.findByDomainAndClientResource(domain, application1.getId(), resource)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
    return resourceEntity;
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((application1)->RxJava2Adapter.flowableToFlux(resourceService.findAccessPoliciesByResources(Collections.singletonList(resource))).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList()))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(resourceService.findAccessPoliciesByResources(Collections.singletonList(resource))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE)).then
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(domain, form, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(domain, form, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(emailTemplateService.delete(email)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE)).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(emailTemplateService.delete(email)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificatePluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePlugins)->certificatePlugins.stream().sorted(Comparator.comparing(CertificatePlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificatePluginService.findAll()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.findById(certificateId)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(certificateId).build())).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId)))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificatePluginService.findById(certificateId)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.findById(certificateId)).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema(certificateId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificateId))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePluginSchema)->Response.ok(certificatePluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(certificatePluginService.findById(certificateId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(notifierPluginService.findById(notifierId)).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPlugin)->Response.ok(notifierPlugin).build()))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(notifierPluginService.findById(notifierId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(notifierPluginService.findById(notifierId)).flatMap((notifierPlugin)->RxJava2Adapter.singleToMono(notifierPluginService.getSchema(notifierPlugin.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPluginSchema)->Response.ok(notifierPluginSchema).build()))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(notifierPluginService.findById(notifierId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (notifierPlugin)->RxJava2Adapter.singleToMono(notifierPluginService.getSchema(notifierPlugin.getId()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(policyPluginService.findAll(expand)).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugins)->policyPlugins.stream().sorted(Comparator.comparing(PolicyPlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(policyPluginService.findAll(expand)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema(policyId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new PolicyPluginSchemaNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getDocumentation(policyId).as(RxJava2Adapter::maybeToMono)).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginDocumentation)->Response.ok(policyPluginDocumentation).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertService.isAlertingAvailable()).map(RxJavaReactorMigrationUtil.toJdkFunction(AlertServiceStatusEntity::new))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(alertService.isAlertingAvailable()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(authenticatorPluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((authenticatorPlugins)->authenticatorPlugins.stream().sorted(Comparator.comparing(FactorPlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(authenticatorPluginService.findAll()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticatorPluginService.findById(authenticatorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticatorPluginService.findById(authenticatorId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticatorPluginService.findById(factorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema(factorId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticatorPluginService.findById(factorId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endUser)->{
    Map<String, Object> object = new HashMap<>();
    object.put("email", endUser.getEmail());
    newsletterService.subscribe(object);
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId())).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).apply(v)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, role)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, role)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ)).then(RxJava2Adapter.singleToMono(installationService.get()).map(RxJavaReactorMigrationUtil.toJdkFunction(InstallationEntity::new))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installationEntity)->installationEntity.getAdditionalInformation().put(Installation.COCKPIT_URL, environment.getProperty("cockpit.url", DEFAULT_COCKPIT_URL))))).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ)).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(installationService.get()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderPluginService.findAll(external, expand)).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugins)->identityProviderPlugins.stream().filter((identityProvider)->!GRAVITEE_AM_IDP.equals(identityProvider.getId())).sorted(Comparator.comparing(IdentityProviderPlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(identityProviderPluginService.findAll(external, expand)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantPluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugins)->extensionGrantPlugins.stream().sorted(Comparator.comparing(ExtensionGrantPlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(extensionGrantPluginService.findAll()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterPluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugins)->reporterPlugins.stream().sorted(Comparator.comparing(ReporterPlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterPluginService.findAll()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourcePluginService.findAll(expand)).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugins)->resourcePlugins.stream().sorted(Comparator.comparing(ResourcePlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(resourcePluginService.findAll(expand)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(notifierPluginService.findAll(expand.toArray(new String[0]))).sort(Comparator.comparing(AbstractPlugin::getName)).collectList()).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(notifierPluginService.findAll(expand.toArray(new String[0]))).sort
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(pluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((plugins)->plugins.stream().sorted(Comparator.comparing(BotDetectionPlugin::getName)).collect(Collectors.toList())))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(pluginService.findAll()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(pluginService.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(pluginService.findById(botDetectionId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(pluginService.findById(botDetection)).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema(botDetection).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(pluginService.findById(botDetection)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourcePluginService.findById(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugin)->Response.ok(resourcePlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourcePluginService.findById(resourceId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourcePluginService.findById(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema(resourceId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourcePluginService.findById(resourceId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterPluginService.findById(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugin)->Response.ok(reporterPlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(reporterPluginService.findById(reporterId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterPluginService.findById(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema(reporterId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ReporterPluginSchemaNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPluginSchema)->Response.ok(reporterPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(reporterPluginService.findById(reporterId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantPluginService.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(extensionGrantPlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantPluginService.findById(extensionGrantId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantPluginService.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema(extensionGrantId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPluginSchema)->Response.ok(extensionGrantPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantPluginService.findById(extensionGrantId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderPluginService.findById(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugin)->Response.ok(identityProviderPlugin).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderPluginService.findById(identityProviderId)).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderPluginService.findById(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema(identityProviderId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPluginSchema)->Response.ok(identityProviderPluginSchema).build()))).subscribe
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderPluginService.findById(identityProviderId)).switchIfEmpty
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(environmentService.findById((String)jwt.get(Claims.environment), (String)jwt.get(Claims.organization))).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).block
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProvider.loadUserByUsername(provAuthentication)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.update(existingUser)).flatMap((user)->RxJava2Adapter.completableToMono(updateRoles(principal, existingUser)).then(Mono.just(user))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newUser)).flatMap((user)->RxJava2Adapter.completableToMono(userService.setRoles(principal, user)).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source)).switchIfEmpty
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | ()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.update(existingUser)).flatMap((user)->RxJava2Adapter.completableToMono(updateRoles(principal, existingUser)).then(Mono.just(user))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.update(existingUser)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(updateRoles(principal, existingUser)).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newUser)).flatMap((user)->RxJava2Adapter.completableToMono(userService.setRoles(principal, user)).then(Mono.just(user))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.create(newUser)).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(userService.setRoles(principal, user)).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(updateRoles_migrated(principal, existingUser));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(existingUser.getId(), MemberType.USER)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty(Mono.just(false)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId)).flatMap((__)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(existingUser.getReferenceId(), membership))).then());
}).apply(y)))).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(existingUser.getId(), MemberType.USER)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty(Mono.just(false)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId)).flatMap((__)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(existingUser.getReferenceId(), membership))).then());
}).apply(y)))).then()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(membershipService.findByMember(existingUser.getId(), MemberType.USER)).filter
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId)).flatMap((__)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(existingUser.getReferenceId(), membership))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId)).flatMap((__)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(existingUser.getReferenceId(), membership))).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId)).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (__)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(existingUser.getReferenceId(), membership))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent())))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.warn("Unable to read user information, trace logout with minimal data", err);
    auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).principal(new EndUserAuthentication(jwt.get("username"), null, new SimpleAuthenticationContext())).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()));
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub())).doOnSuccess
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reCaptchaService.isValid(reCaptchaToken)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProvider.loadUserByUsername(provAuthentication)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<List<String>> organizationPermissions = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<List<String>> platformPermissions = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.PLATFORM, Platform.DEFAULT)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.PLATFORM, Platform.DEFAULT)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((permissions)->{
    Map<String, Object> profile = new HashMap<>(authenticatedUser.getAdditionalInformation());
    profile.put("permissions", permissions);
    profile.put("newsletter_enabled", newsletterEnabled);
    profile.remove(CustomClaims.ROLES);
    return profile;
}))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockEntrypoint)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new EntrypointNotFoundException(ENTRYPOINT_ID))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockEntrypoint)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new EntrypointNotFoundException(ENTRYPOINT_ID))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionService.hasPermission(any(User.class), any(PermissionAcls.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(botDetectionPlugin))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(new Flow(), new Flow())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockIdentityProvider)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockIdentityProvider)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockCredential)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(pagedUsers)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionService.findAllPermissions(any(), eq(ReferenceType.ORGANIZATION), eq(organizationId))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(permissions)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(pagedUsers)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new UserProviderNotFoundException(newUser.getSource()))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(permissionService.hasPermission(any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Organization())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationUserService.createGraviteeUser(any(), any(), any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mockIdentityProvider, mockIdentityProvider2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(identityProvider)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(plugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(plugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just("{}")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(plugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(plugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mockExtensionGrant, mockExtensionGrant2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(extensionGrant)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockApplication)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.of(Permission.APPLICATION, Acl.READ))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockApplication)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockClient)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockApplication)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.of(Permission.APPLICATION, Acl.READ))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockApplication)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.of(Permission.APPLICATION, Acl.READ))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new ApplicationNotFoundException(clientId))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(resourcePlugin))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singletonList(identityProviderPlugin))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockRole)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new RoleNotFoundException(roleId))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Email())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.error(new EmailNotFoundException(emailId))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton("role-1"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockGroup)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(defaultOrganization)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(new DefaultUser("username"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(extensionGrantPlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(extensionGrantPlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(schema)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockScope)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockScope)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockExtensionGrant)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockExtensionGrant)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockFlow)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(updatedFlow)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new FlowNotFoundException(FLOW_ID))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockCertificate)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockCertificate)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Collections.singleton("role-1"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mockCertificate, mockCertificate2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just("certificate-schema")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(certificate)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockRole)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockRole)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(certificatePlugin)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Page<>(scopes, 0, 2))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(scope)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockGroup)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.DOMAIN))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.of(Permission.DOMAIN, Acl.READ))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.DOMAIN))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.allPermissionAcls(ReferenceType.DOMAIN))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(true)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(Permission.of(Permission.DOMAIN, Acl.READ))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Domain())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(entrypoint, entrypoint2, defaultEntrypoint)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(entrypoint, entrypoint2, defaultEntrypoint)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(entrypoint, entrypoint2, defaultEntrypoint)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(entrypoint, entrypoint2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(entrypoint)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(pagedUsers)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(group)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(resourcePlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(resourcePlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just("{}")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(resourcePlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(resourcePlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mockCredential)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mockDomain, mockDomain2)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(domain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Reporter())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockEmail)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Email())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(pagedRoles)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(roles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(pagedRoles)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(role)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new OrganizationNotFoundException(organizationId))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockUser)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockFactor)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(certificatePlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(certificatePlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(schema)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockScope)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(scopeApproval)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockForm)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Form())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new Form())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.error(new FormNotFoundException(formId))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(applicationPage)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(application)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashSet<>(Arrays.asList(extensionGrantPlugin)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new OrganizationNotFoundException(organizationId))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(membership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(membership)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(organization)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(Arrays.asList(membership))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(new HashMap<>())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.error(new OrganizationNotFoundException(organization.getId()))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userServiceMock.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userServiceMock.create(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | when(userServiceMock.setRoles(any(), any(User.class))).thenReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userServiceMock.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(repositoryUserMock)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userServiceMock.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userServiceMock.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(repositoryUserMock)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userServiceMock.update(any(User.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(userServiceMock.enhance(any())).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new User())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(roleServiceMock.findById(ReferenceType.ORGANIZATION, "organization-id", "organization-owner-role-id")).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Role())))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when(membershipServiceMock.findByMember("user-id", MemberType.USER)).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.just(membershipMock)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(membershipServiceMock.addOrUpdate(anyString(), any(Membership.class))).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(new Membership())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(mockRole, mockRole2)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(tag)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockClient)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockScope)))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | doReturn(RxJava2Adapter.fluxToFlowable(Flux.just(scopeApproval)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToCompletable(Mono.empty()))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(mockDomain)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToSingle(Mono.just(mockUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(identityProviderPlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(identityProviderPlugin)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.just(schema)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | doReturn(RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("Error occurs"))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidCodeException("Invalid 2FA code")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
