1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(refreshToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(refreshToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(token));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(accessToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(accessToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(token));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, group));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, group));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(par));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(par));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, role));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, role));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndResource_migrated(domain, resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndResource(domain, resource));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainAndScopeKey_migrated(domain, scope));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(deleteByDomainAndScopeKey(domain, scope));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(context));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(context));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(transactionId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId, version));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(transactionId, version));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationCode));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(authorizationCode));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(delete_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(criteria));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(criteria));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, identityProviderId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, identityProviderId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestObject));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(requestObject));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(group)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdGroup.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdGroup.getReferenceType(), createdGroup.getReferenceId(), createdGroup.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(toUpdate.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdGroup.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdGroup.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByMember_migrated(member1).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByMember_migrated(member2).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByIdIn_migrated(ids).collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByName_migrated(group.getReferenceType(), group.getReferenceId(), group.getName())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByName_migrated(group.getReferenceType(), group.getReferenceId(), "unknown")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(apCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(apCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_SINGLE, 0, 20)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN10, 0, totalCount + 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN10, 0, totalCount / 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN10, 1, totalCount / 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomainAndResource_migrated(DOMAIN_ID, RESOURCE_ID).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByResources_migrated(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2")).collectList()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated("unknownId")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getReferenceType(), createdEmail.getReferenceId(), createdEmail.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(updatableEmail)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdEmail.getId())).blockingGet
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated(ReferenceType.DOMAIN, FIXED_REF_ID).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findByClient_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertNotifierRepository.findById_migrated(alertNotifierCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertNotifierRepository.findById_migrated("UNKNOWN")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(alertNotifierRepository.create_migrated(alertNotifier)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(alertNotifierRepository.update_migrated(updatedAlertNotifier)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertNotifierRepository.delete_migrated(alertNotifierCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertNotifierRepository.findById_migrated(alertNotifierCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findByReference_migrated(ReferenceType.DOMAIN, "testDomain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(bdetectionCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(bDetection)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(bDetection)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(botDetectionCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(botDetectionCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(botDetectionCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated("unknownId")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getReferenceType(), createdForm.getReferenceId(), createdForm.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(updatableForm)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdForm.getId())).blockingGet
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findAll_migrated(ReferenceType.DOMAIN, FIXED_REF_ID).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByClient_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertTriggerRepository.findById_migrated(alertTriggerCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertTriggerRepository.findById_migrated("UNKNOWN")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(alertTriggerRepository.create_migrated(alertTrigger)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(alertTriggerRepository.update_migrated(updatedAlertTrigger)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertTriggerRepository.delete_migrated(alertTriggerCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertTriggerRepository.findById_migrated(alertTriggerCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated("testDomain", 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomainAndExtensionGrant_migrated("testDomain", "test-grant")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findByDomainAndClientId_migrated("testDomain", "clientId1")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated("testDomainPagination", 1, 1)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(appCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationRepository.findByIdentityProvider_migrated(appCreated.getIdentities().iterator().next())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.create_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(updatedApp)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(appCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(appCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(appCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.search_migrated(domain, "clientId", 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.search_migrated(domain, "clientId*", 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findAll_migrated().collectList()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated("environment#1")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.findByIdIn_migrated(Collections.singleton(domainCreated.getId()))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(domainCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.create_migrated(domain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.update_migrated(updatedDomain)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(domainCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainRepository.delete_migrated(domainCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(domainCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.findAllByCriteria_migrated(criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.findAllByCriteria_migrated(criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated("environment#1", "testName")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoring)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(credential.getReferenceType(), credential.getReferenceId(), credential.getUserId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUsername_migrated(credential.getReferenceType(), credential.getReferenceId(), credential.getUsername())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByCredentialId_migrated(credential.getReferenceType(), credential.getReferenceId(), credential.getCredentialId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(credentialCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialRepository.create_migrated(credential)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialRepository.update_migrated(updateCredential)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(credentialCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.delete_migrated(credentialCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(credentialCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "wrong-user-id")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.deleteByAaguid_migrated(ReferenceType.DOMAIN, "domain-id", "aaguid")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(serviceResourceRepository.findByReference_migrated(ReferenceType.DOMAIN, "testDomain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(resourceCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceResourceRepository.create_migrated(resource)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(updateResource)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(resourceCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(resourceCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(entrypointRepository.findAll_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated(entrypointCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(entrypointRepository.create_migrated(entrypoint)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(entrypointRepository.update_migrated(updatedEntrypoint)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated(entrypointCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(entrypointCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated(entrypointCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(installationRepository.findById_migrated(installationCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(installationRepository.findById_migrated("UNKNOWN")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(installationRepository.create_migrated(installation)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(installationRepository.update_migrated(updatedInstallation)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(installationRepository.delete_migrated(installationCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(installationRepository.findById_migrated(installationCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(organizationUserRepository.findAll_migrated(ReferenceType.ORGANIZATION, "testOrga")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, "testOrga", user.getUsername(), user.getSource())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.findAll_migrated(ReferenceType.ORGANIZATION, user.getReferenceId(), 0, 10)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(userCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(organizationUserRepository.findByIdIn_migrated(Arrays.asList(userCreated.getId()))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.create_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.update_migrated(updatedUser)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(userCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserRepository.delete_migrated(userCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(userCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, "testUsername*", 0, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, "testUsername*", 1, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 1, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 1, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 1, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, query, 0, 10)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, query, 0, 10)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationRepository.findById_migrated(organizationCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationRepository.findById_migrated("unknown")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationRepository.create_migrated(organization)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationRepository.update_migrated(organizationUpdated)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationRepository.delete_migrated(organizationCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationRepository.findByHrids_migrated(Collections.singletonList("Hrid1")).collectList()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.findAll_migrated(ReferenceType.DOMAIN, "DOMAIN1").collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.findByApplication_migrated(ReferenceType.DOMAIN, "DOMAIN1", "APP1").collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(ReferenceType.DOMAIN, "DOMAIN1", flowCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(flowCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(flowCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(flowCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.create_migrated(flow)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowUpdated)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowUpdated)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(flowCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(factorRepository.findByDomain_migrated("testDomain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(factorCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorRepository.create_migrated(factor)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorRepository.update_migrated(updateFactor)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(factorCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorRepository.delete_migrated(factorCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(factorCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated(systemTaskCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(taskRepository.update_migrated(buildSystemTask())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(taskRepository.updateIf_migrated(updatedSystemTask, systemTaskCreated.getOperationId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(taskRepository.updateIf_migrated(updatedSystemTask, "unknownId")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated(systemTaskCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(taskRepository.delete_migrated(systemTaskCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated(systemTaskCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(membershipRepository.findById_migrated(createdMembership.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipRepository.findByReference_migrated(ORGANIZATION_ID, ReferenceType.ORGANIZATION).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipRepository.findByMember_migrated("user#1", MemberType.USER).collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberType(), membership.getMemberId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(reporter)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdReporter.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findAll_migrated().collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(domain).collectList()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(certificateRepository.findByDomain_migrated("DomainTestFindByDomain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(certificateRepository.create_migrated(certificate)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(certificateRepository.update_migrated(updatedCertificate)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateRepository.delete_migrated(certificateCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, "testDomain", user.getUsername(), user.getSource())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.findAll_migrated(ReferenceType.DOMAIN, user.getReferenceId(), 0, 10)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(Arrays.asList(userCreated.getId()))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.create_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.update_migrated(updatedUser)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, "testUsername*", 0, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, "testUsername*", 1, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 1, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 1, 2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 1, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByDomainAndEmail_migrated(domain, "test@test.com", true)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByDomainAndEmail_migrated(domain, "test@test.com", false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, query, 0, 10)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, query, 0, 10)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query2)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(environmentRepository.findById_migrated(envCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(environmentRepository.findById_migrated("unknown")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentRepository.create_migrated(env)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentRepository.update_migrated(envUpdated)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(environmentRepository.delete_migrated(envCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentRepository.findAll_migrated(FIXED_REF_ID).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentRepository.findAll_migrated().collectList()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated("unknown-sessions")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationFlowContextRepository.findLastByTransactionId_migrated("unknown-sessions")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authenticationFlowContextRepository.create_migrated(entity)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authenticationFlowContextRepository.delete_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authenticationFlowContextRepository.delete_migrated(TRANSACTION_ID, 1)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationFlowContextRepository.findLastByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(null)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationFlowContextRepository.findLastByTransactionId_migrated(TRANSACTION_ID)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain").collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.findByNamesAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION).collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(roleCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN_ID, roleCreated.getId())).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.update_migrated(updatedRole)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(roleCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(roleCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(accessTokenRepository.findByToken_migrated("unknown-token")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(token.getToken())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(token.getAuthorizationCode())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated("unknown")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByClientIdAndSubject_migrated("my-client-id", "my-subject")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByClientId_migrated("my-client-id-2")))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable()).then(accessTokenRepository.countByClientId_migrated("my-client-id-count"))).test
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable()).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(eventRepository.findByTimeFrame_migrated(from, to)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated(eventCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventRepository.create_migrated(event)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated(eventCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(eventRepository.delete_migrated(eventCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated(eventCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain").collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(identityProviderCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, identityProviderCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.create_migrated(identityProvider)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(updatedIdentityProvider)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(identityProviderCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderRepository.delete_migrated(identityProviderCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(identityProviderCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(tagRepository.findAll_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(tagCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagRepository.update_migrated(updatedTag)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(tagCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(tagCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(attempt)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByCriteria_migrated(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByCriteria_migrated(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain("unknown").username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdUnexpectedAttempt.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdUnexpectedAttempt.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(updatableAttempt)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findByDomain_migrated("testDomain", 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findByDomainAndKey_migrated("testDomain", "one")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKeys_migrated("testDomain", Arrays.asList("one", "two", "three")).collectList()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(scopeCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(updatedScope)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(scopeCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeRepository.delete_migrated(scopeCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(scopeCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.search_migrated(scopeCreated.getDomain(), "*" + scopeName + "*", 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authorizationCodeRepository.findByCode_migrated(code)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authorizationCodeRepository.findByCode_migrated(code)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCode)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(rsCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(rsCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, rsCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_ID, 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_ID, 0, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_ID, 1, 1)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findByResources_migrated(Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), "notMatching"))).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), rsCreated3.getId(), rsCreated4.getId(), rsCreated5.getId(), "unknown"))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated("unknown-id")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(par)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(id)).test
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(refreshTokenRepository.findByToken_migrated("unknown-token")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable()).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToMaybe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptCreated.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(ptCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(extensionGrantRepository.findByDomain_migrated("testDomain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(extensionGrantCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated("test")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(updatedExtension)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(extensionGrantCreated.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantRepository.delete_migrated(extensionGrantCreated.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(extensionGrantCreated.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain)))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, accessPoliciesOperation, (count,accessPolicies)->new Page<>(accessPolicies, page, count)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndResource_migrated(domain, resource));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource)))).first(0L));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource)))).first
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(identityProviderId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, identityProviderId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.countDocuments())).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain)))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count)));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.countDocuments(mongoQuery))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(par));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first(0L));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application))))).first(0L));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application))))).first
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class))).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first(Collections.emptyMap()));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class))).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first(Collections.emptyMap()));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, page, count)));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(mongoQuery))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(mongoQuery).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count)));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(mongoQuery))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(mongoQuery).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(mongoOperations.listCollectionNames()).filter((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME))).isEmpty()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(mongoOperations.listCollectionNames()).filter((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME))).isEmpty
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.countDocuments(mongoQuery))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.find(mongoQuery).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, scopesOperation, (count,scope)->new Page<Scope>(scope, page, count)));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.countDocuments(mongoQuery))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, scopesOperation, (count,scopes)->new Page<>(scopes, page, count)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, page, count)));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.countDocuments(mongoQuery))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.find(mongoQuery).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, 0, count)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, role));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(role));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Flux.from(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.from(collection.insertOne(convert(monitoring))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->monitoring)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.from(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring))).map(RxJavaReactorMigrationUtil.toJdkFunction((updateResult)->monitoring)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(and(filters))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (filter)->RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(filter)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(installation));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(installation));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainAndScopeKey_migrated(domain, scope));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationCode));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(delete_migrated(code));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(botDetectionId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(eventsCollection.find(eq(FIELD_ID, id)).first())).map(this::convert), BackpressureStrategy.BUFFER).next
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(eventsCollection.find(eq(FIELD_ID, id)).first())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(environment));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(environment));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(criteria));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(certificateId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(context));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId, version));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertTrigger));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertTrigger));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestObject));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertNotifier));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertNotifier));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(ticket));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(ticket));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(factorId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(tokenGranterId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, resourcesOperation, (count,resourceSets)->new Page<>(resourceSets, page, count)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain)))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, resourceSetOperation, (count,resourceSet)->new Page<>(resourceSet, page, count)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(refreshToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organization));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organization));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(accessToken));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject))))).map(this::convert), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject))))).map
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(eq(FIELD_CLIENT, clientId)))).map(this::convert), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(eq(FIELD_CLIENT, clientId)))).map
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode)))).map(this::convert), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode)))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, groupsOperation, (count,groups)->new Page<>(groups, page, count)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, group));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(group));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (filter)->RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(filter)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.listCollectionNames()).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.getCollection(collectionName).deleteMany(new Document())))).apply(z)), BackpressureStrategy.BUFFER))).blockingSubscribe
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | (z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.getCollection(collectionName).deleteMany(new Document())))).apply(z)), BackpressureStrategy.BUFFER)
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (collectionName)->RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.getCollection(collectionName).deleteMany(new Document())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(organizationRepository.count());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> identities = RxJava2Adapter.monoToMaybe(identitiesRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Identity::getIdentity)).collectList())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> domains = RxJava2Adapter.monoToMaybe(domainRestrictionRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.DomainRestriction::getDomainRestriction)).collectList())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> hrids = RxJava2Adapter.monoToMaybe(hridsRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Hrid::getHrid)).collectList())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
}))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
}))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(hrids), RxJavaReactorMigrationUtil.toJdkBiFunction((org,hrid)->{
    LOGGER.debug("findById({}) fetch {} hrids", organizationId, hrid.size());
    org.setHrids(hrid);
    return org;
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organization));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organization));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> scopeClaims = RxJava2Adapter.monoToMaybe(claimRepository.findByScopeId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcScope.Claims::getClaim)).collectList())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeScope).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeScope).zipWith(RxJava2Adapter.maybeToMono(scopeClaims), RxJavaReactorMigrationUtil.toJdkBiFunction((scope,claims)->{
    LOGGER.debug("findById({}) fetch {} scopeClaims", id, claims == null ? 0 : claims.size());
    scope.setClaims(claims);
    return scope;
}))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication())) : RxJava2Adapter.monoToSingle(userRepository.countByReference_migrated(DOMAIN.name(), query.getDomain()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication())) : RxJava2Adapter.monoToSingle(userRepository.countByReference_migrated(DOMAIN.name(), query.getDomain()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countDisabledUserByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication(), false)) : RxJava2Adapter.monoToSingle(userRepository.countDisabledUser_migrated(DOMAIN.name(), query.getDomain(), false))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countDisabledUserByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication(), false)) : RxJava2Adapter.monoToSingle(userRepository.countDisabledUser_migrated(DOMAIN.name(), query.getDomain(), false))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countLockedUserByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication(), false, LocalDateTime.now(UTC))) : RxJava2Adapter.monoToSingle(userRepository.countLockedUser_migrated(DOMAIN.name(), query.getDomain(), false, LocalDateTime.now(UTC)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countLockedUserByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication(), false, LocalDateTime.now(UTC))) : RxJava2Adapter.monoToSingle(userRepository.countLockedUser_migrated(DOMAIN.name(), query.getDomain(), false, LocalDateTime.now(UTC)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countInactiveUserByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication(), LocalDateTime.now(UTC).minus(90, ChronoUnit.DAYS))) : RxJava2Adapter.monoToSingle(userRepository.countInactiveUser_migrated(DOMAIN.name(), query.getDomain(), LocalDateTime.now(UTC).minus(90, ChronoUnit.DAYS)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filteringByApplication ? RxJava2Adapter.monoToSingle(userRepository.countInactiveUserByClient_migrated(DOMAIN.name(), query.getDomain(), query.getApplication(), LocalDateTime.now(UTC).minus(90, ChronoUnit.DAYS))) : RxJava2Adapter.monoToSingle(userRepository.countInactiveUser_migrated(DOMAIN.name(), query.getDomain(), LocalDateTime.now(UTC).minus(90, ChronoUnit.DAYS)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(disabled).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(locked).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(inactive).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(total).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Long> total = RxJava2Adapter.monoToSingle(userRepository.countPreRegisteredUser_migrated(DOMAIN.name(), query.getDomain(), true))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Long> completed = RxJava2Adapter.monoToSingle(userRepository.countRegistrationCompletedUser_migrated(DOMAIN.name(), query.getDomain(), true, true))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(total).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(completed).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refType, refId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refType, refId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(reporterRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(reporterRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(entrypointRepository.findAllByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((entrypoint)->RxJava2Adapter.fluxToFlowable(completeTags_migrated(entrypoint).flux())))).doOnError((error)->LOGGER.error("Unable to list all entrypoints with organization {}", organizationId, error)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(entrypointRepository.findAllByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((entrypoint)->RxJava2Adapter.fluxToFlowable(completeTags_migrated(entrypoint).flux())))).doOnError
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (entrypoint)->RxJava2Adapter.fluxToFlowable(completeTags_migrated(entrypoint).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(entrypointRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(par));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(serviceResourceRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(serviceResourceRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(membershipRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(membershipRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain, page));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain, page));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndResource_migrated(domain, resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomainAndResource(domain, resource));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(factorRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(factorRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.factorRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(factorRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.credentialRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findByNodeIdAndType_migrated(nodeId, type));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findByNodeIdAndType(nodeId, type));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByTypeAndTimeFrame_migrated(type, from, to));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByTypeAndTimeFrame(type, from, to));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> scopes = RxJava2Adapter.monoToMaybe(resourceScopeRepository.findAllByResourceId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcResource.Scope::getScope)).collectList())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeResource).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeResource).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((res,scope)->{
    LOGGER.debug("findById({}) fetch {} resource scopes", id, scope == null ? 0 : scope.size());
    res.setResourceScopes(scope);
    return res;
}))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (resource)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (resource)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (resource)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(resourceRepository.findByDomainAndClientAndUserIdAndResource_migrated(domain, client, userId, resource).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), resource)
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(resourceRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestObject));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndResource_migrated(domain, resource));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessPolicyRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(accessPolicyRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findByDomainAndUserAndClientAndScope_migrated(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findByDomainAndUserAndClientAndScope_migrated(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(deleteByDomainAndScopeKey_migrated(domain, scope));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(formRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.formRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(formRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flow).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flow).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(counter).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(flow).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> members = RxJava2Adapter.monoToMaybe(memberRepository.findAllByGroup_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcMember::getMember)).collectList())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> roles = RxJava2Adapter.monoToMaybe(roleRepository.findAllByGroup_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcRole::getRole)).collectList())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
}))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
})).zipWith(RxJava2Adapter.maybeToMono(roles), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,role)->{
    LOGGER.debug("findById({}) fetch {} group roles", id, role == null ? 0 : role.size());
    grp.setRoles(role);
    return grp;
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAll()).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAllById(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainRepository.findAllById(ids)).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(environmentId, ReferenceType.ENVIRONMENT.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(domainRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(id)).map
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Domain> domains = RxJava2Adapter.fluxToFlowable(domainRepository.findByHrid_migrated(referenceId, referenceType.name(), hrid).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domainId));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (domain)->RxJava2Adapter.fluxToFlowable(identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (domain)->RxJava2Adapter.fluxToFlowable(tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
})))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (domain)->RxJava2Adapter.fluxToFlowable(vHostsRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll()).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, identityProviderId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.identityProviderRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.identityProviderRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(emailRepository.findAll()).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(emailRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(emailRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refId, refType, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refId, refType, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(criteria));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(loginAttemptRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(loginAttemptRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(id)).filter
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(permissionTicketRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.extensionGrantRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(extensionGrantRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refType, refId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refType, refId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(eventRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(eventRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP)).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertNotifierRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertNotifier));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertNotifier));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.alertNotifierRepository.deleteById(id));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).doOnError((error)->LOGGER.error("Unable to retrieve AlertNotifier with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).doOnError
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(context));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(transactionId, version));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (flow)->RxJava2Adapter.fluxToFlowable(completeFlow_migrated(flow).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (flow)->RxJava2Adapter.fluxToFlowable(completeFlow_migrated(flow).flux())
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(refType, refId, role));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(refType, refId, role));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | final Flowable<Environment> result = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(ident))).apply(e))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveHrids_migrated(ident))).apply(e))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Environment ident)->RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveHrids_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Environment ident)->RxJava2Adapter.monoToSingle(retrieveHrids_migrated(ident))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(result.doOnError((error)->LOGGER.error("unable to retrieve all environments", error)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | final Flowable<Environment> result = RxJava2Adapter.fluxToFlowable(environmentRepository.findByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(ident))).apply(e))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveHrids_migrated(ident))).apply(e))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Environment ident)->RxJava2Adapter.monoToSingle(retrieveDomainRestrictions_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Environment, Single<Environment>>toJdkFunction((Environment ident)->RxJava2Adapter.monoToSingle(retrieveHrids_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Environment ident)->RxJava2Adapter.monoToSingle(retrieveHrids_migrated(ident))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(result.doOnError((error)->LOGGER.error("unable to retrieve Environments with organizationId {}", organizationId, error)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.environmentRepository.count());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<Environment> result = RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap(this::retrieveDomainRestrictions_migrated).flatMap(this::retrieveHrids_migrated))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(result).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(environment));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(environment));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(environmentId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.count()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(applicationRepository.count());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | delete.then(deleteChildEntities(id)).as(trx::transactional).then(RxJava2Adapter.completableToMono(applicationRepository.deleteById(id)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(nodeMonitoringRepository.findByNodeIdAndType_migrated(nodeId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(nodeMonitoringRepository.findByTypeAndTimeFrame_migrated(type, LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(nodeMonitoringRepository.save(toJdbcEntity(monitoring))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.save(toJdbcEntity(monitoring))).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> alertNotifierIds = RxJava2Adapter.monoToMaybe(alertTriggerAlertNotifierRepository.findByAlertTriggerId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId)).collectList())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).zipWith(RxJava2Adapter.maybeToMono(alertNotifierIds), RxJavaReactorMigrationUtil.toJdkBiFunction((alertTrigger,ids)->{
    LOGGER.debug("findById({}) fetch {} alert triggers", alertTrigger.getId(), ids.size());
    alertTrigger.setAlertNotifiers(ids);
    return alertTrigger;
}))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(alertTrigger));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(alertTrigger));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.alertTriggerRepository.deleteById(id));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(execute.as(String.class).fetch().all().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction((String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))).apply(e))))).doOnError((error)->LOGGER.error("Unable to retrieve AlertTrigger with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(execute.as(String.class).fetch().all().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction((String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))).apply(e))))).doOnError
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction((String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.installationRepository.findAll()).next
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(installation));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(installation));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(this.installationRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(accessToken));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.fromMaybe(RxJava2Adapter.monoToMaybe(findByToken_migrated(token).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((Integer i)->z))).doOnError((error)->LOGGER.error("Unable to delete AccessToken", error)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Completable.fromMaybe(RxJava2Adapter.monoToMaybe(findByToken_migrated(token).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((Integer i)->z))).doOnError((error)->LOGGER.error("Unable to delete AccessToken", error))))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (accessToken)->RxJava2Adapter.fluxToFlowable(create_migrated(accessToken).flux())
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientIdAndSubject_migrated(clientId, subject, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {} and subject {}", clientId, subject, error)), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientIdAndSubject_migrated(clientId, subject, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientId_migrated(clientId, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {}", clientId, error)), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientId_migrated(clientId, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByAuthorizationCode_migrated(authorizationCode, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with authorization code {}", authorizationCode, error)), BackpressureStrategy.BUFFER);
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByAuthorizationCode_migrated(authorizationCode, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(tagRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(tagRepository.save(toJdbcEntity(item))).map
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(tagRepository.deleteById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(refreshToken));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (refreshToken)->RxJava2Adapter.fluxToFlowable(create_migrated(refreshToken).flux())
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(token));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.certificateRepository.findAll()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.certificateRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationCode));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(delete_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(id)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, role));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType.name(), referenceId, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), role)
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->RxJava2Adapter.monoToMaybe(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (role)->RxJava2Adapter.monoToMaybe(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))), id)
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findById(id)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(item));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(item));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<List<String>> scopes = RxJava2Adapter.monoToMaybe(oauthScopeRepository.findAllByRole_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcRole.OAuthScope::getScope)).collectList())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeRole).zipWith
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeRole).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((role,scope)->{
    LOGGER.debug("findById({}) fetch {} oauth scopes", id, scope == null ? 0 : scope.size());
    role.setOauthScopes(scope);
    return role;
}))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(attemptExpired)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(attemptExpired2)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(attemptNotExpired)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(parRepository.create_migrated(object1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(parRepository.create_migrated(object2)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(parRepository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(object1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(object2)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(requestObjectRepository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute())).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeApprovalRepository.create_migrated(scope1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeApprovalRepository.create_migrated(scope2)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated("domain", "user")).collect
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalRepository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated("domain", "user")).collect
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCode)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCodeExpired)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authorizationCodeRepository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(permissionTicketExpired)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid2.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.purgeExpiredData_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid.getId())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid2.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(id, updateUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval by id: {}", id);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUser_migrated(domain, user));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomainAndUserAndClient_migrated(domain, user, client));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(domain, client, approvals, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(approvals)).flatMapSingle((ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))).toList()).doOnSuccess
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(approvals)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<ScopeApproval>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to save consent for domain: {}, client: {} and user: {} ", domain, client.getId(), approvals.get(0).getUserId());
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByConsent_migrated(domain, userId, consentId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then()).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke approval for scope: {}", consentId);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then()).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUser_migrated(domain, user, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {} and user : {}", domain, user);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUserAndClient_migrated(domain, user, clientId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {}, user: {} and client: {}", domain, user, clientId);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(domain, client, approvals, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(saveConsent(domain, client, approvals, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUser_migrated(domain, user, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUser(domain, user, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUserAndClient_migrated(domain, user, clientId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUserAndClient(domain, user, clientId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(domain, client, approvals));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(saveConsent(domain, client, approvals, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeByUser_migrated(domain, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUser(domain, userId, null));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(revokeByUserAndClient(domain, userId, clientId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, botDetection, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, botDetection, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateBotDetection, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateBotDetection, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, botDetectionId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, botDetectionId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, botDetection));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, botDetection, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateBotDetection));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateBotDetection, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, botDetectionId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, botDetectionId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | final Maybe<Role> defaultRoleObs = RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(user.getReferenceId(), DefaultRole.ORGANIZATION_USER, ReferenceType.ORGANIZATION))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated(user.getReferenceType(), user.getReferenceId(), roleId)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(membershipService.addOrUpdate_migrated(user.getReferenceId(), membership).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(membershipService.addOrUpdate_migrated(user.getReferenceId(), membership).then());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to search users for {} {} and query {}", referenceType, referenceId, query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException(ex.getMessage())));
    }
    LOGGER.error("An error occurs while trying to search users for {} {} and filter {}", referenceType, referenceId, filterCriteria, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(getUserRepository().findById_migrated(referenceType, referenceId, id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findByUsernameAndSource_migrated(referenceType, referenceId, username, source)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its username: {} for the {} {}  and source {}", username, referenceType, referenceId, source, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(getUserRepository().findByUsernameAndSource_migrated(referenceType, referenceId, username, source)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its externalId: {} for the {} {} and source {}", externalId, referenceType, referenceId, source, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(getUserRepository().findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(user));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a user", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
    }
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return RxJava2Adapter.monoToSingle(update_migrated(oldUser));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(oldUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Group>, Single<User>>)(groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(new ArrayList<>(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        })));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(new ArrayList<>(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    user.setRolesPermissions(roles1);
    return user;
})));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to enhance user {}", user.getId(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newRole, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newRole, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, role, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, role, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateRole, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateRole, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, role, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, role, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, roleId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, roleId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, role, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, role, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, roleId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, roleId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newGroup, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newGroup, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, group, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, group, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateGroup, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateGroup, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, group, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, group, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, groupId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, groupId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, group));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, group, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, group));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, group, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, groupId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, groupId, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, groupId, roles));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, groupId, roles, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addOrUpdate_migrated(organizationId, membership, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addOrUpdate(organizationId, membership, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(membershipId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(membershipId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addOrUpdate_migrated(organizationId, membership));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(addOrUpdate(organizationId, membership, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(membershipId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(membershipId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(event));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(event));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(credential));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(credential));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(update_migrated(referenceType, referenceId, credentialId, credential));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(update(referenceType, referenceId, credentialId, credential));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newReporter, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newReporter, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateReporter, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateReporter, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(reporterId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(reporterId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newReporter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newReporter, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateReporter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateReporter, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(reporterId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(reporterId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(organizationId, environmentId, newEnvironment, createdBy));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(organizationId, environmentId, newEnvironment, createdBy));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(organizationId, newOrganization, byUser));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, organization));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, organization));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | organizationRepository.findById_migrated(organizationId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, organization));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, byUser));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, byUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organizationId, patchOrganization, updatedBy));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(organizationId, newOrganization, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(organizationId, newOrganization, byUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(organizationId, patchOrganization, authenticatedUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(organizationId, patchOrganization, authenticatedUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, entrypoint, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(organizationId, entrypoint, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(entrypointId, organizationId, entrypoint, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(entrypointId, organizationId, entrypoint, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(entrypointId, organizationId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(entrypointId, organizationId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(membershipRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find membership by id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(membershipRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(addOrUpdate_migrated(organizationId, membership, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkMember_migrated(organizationId, membership).then(checkRole_migrated(organizationId, membership)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return RxJava2Adapter.monoToSingle(createInternal_migrated(newMembership, principal));
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
        }).apply(err))).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable))));
    }
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(newMembership, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
}).apply(err))).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | findByCriteria_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).next().switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(membership, null));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(membership, null));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.fluxToFlowable(orgUserService.findByIdIn_migrated(userIds)).toMap(io.gravitee.am.model.User::getId, this::convert), RxJava2Adapter.fluxToFlowable(groupService.findByIdIn_migrated(groupIds)).toMap(Group::getId, this::convert), RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roleIds)), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
}));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(orgUserService.findByIdIn_migrated(userIds)).toMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(groupService.findByIdIn_migrated(groupIds)).toMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.fluxToFlowable(orgUserService.findByIdIn_migrated(userIds)).toMap(io.gravitee.am.model.User::getId, this::convert), RxJava2Adapter.fluxToFlowable(groupService.findByIdIn_migrated(groupIds)).toMap(Group::getId, this::convert), RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roleIds)), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(membershipId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete membership: {}", membershipId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
})).flux
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))).count
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(role));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an factor using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Factor>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factorToUpdate).flatMap(factorRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
    }).apply(v)))).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factorToUpdate).flatMap(factorRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Factor>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, factorId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete factor: {}", factorId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(y));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, factor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, factor, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateFactor, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateFactor, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, factorId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, factorId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, factor));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, factor, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateFactor));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateFactor, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, factorId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, factorId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newApplication, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newApplication, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(application));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchApplication, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchApplication, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findTopApplicationsByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findTopApplicationsByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findAll_migrated());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newApplication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newApplication, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchApplication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchApplication, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newCertificate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newCertificate, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateCertificate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateCertificate, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(certificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(certificate));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(certificateId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(certificateId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newCertificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newCertificate, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateCertificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateCertificate, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(certificateId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(certificateId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(emailRepository.findByTemplate_migrated(referenceType, referenceId, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and template {}", referenceType, referenceId, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailRepository.findByTemplate_migrated(referenceType, referenceId, template)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(emailRepository.findByClientAndTemplate_migrated(referenceType, referenceId, client, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailRepository.findByClientAndTemplate_migrated(referenceType, referenceId, client, template)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(emailRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Email, Single<Email>>toJdkFunction((source)->{
    NewEmail email = new NewEmail();
    email.setEnabled(source.isEnabled());
    email.setTemplate(Template.parse(source.getTemplate()));
    email.setFrom(source.getFrom());
    email.setFromName(source.getFromName());
    email.setSubject(source.getSubject());
    email.setContent(source.getContent());
    email.setExpiresAfter(source.getExpiresAfter());
    return RxJava2Adapter.monoToSingle(this.create_migrated(domain, clientTarget, email));
}).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(this.create_migrated(domain, clientTarget, email));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, client, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, updateEmail, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(emailId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete email: {}", emailId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Email>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Email>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client == null ? RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, emailTemplate)) : RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, emailTemplate))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client == null ? RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, emailTemplate)) : RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, emailTemplate))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeSource).hasElement
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, client, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, client, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, newEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, newEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateEmail, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, updateEmail, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, updateEmail, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(emailId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(emailId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newEmail, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, newEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, newEmail, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateEmail, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, updateEmail));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, updateEmail, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(emailId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(emailId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
        InputStream resourceAsStream = this.getClass().getResourceAsStream(GRAMMAR_PATH);
        JSONObject parse = (JSONObject)parser.parse(resourceAsStream);
        Map<String, Object> types = buildTypes();
        parse.appendField("_types", types);
        emitter.onSuccess(parse);
    } catch (ParseException | UnsupportedEncodingException e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load Spel grammar", e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(tag, organizationId, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(tag, organizationId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(tagId, organizationId, tag, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(tagId, organizationId, tag, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(tagId, organizationId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(tagId, organizationId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(event));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Event>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an event", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an event", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an event", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Event>>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to find events by time frame", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, res, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, res, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateServiceResource, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateServiceResource, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, resId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, resId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id, organizationId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(id, organizationId)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a tag using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(id, organizationId)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(newTag, organizationId, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Tag>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(tagId, organizationId, updateTag, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Tag, SingleSource<Tag>>toJdkFunction((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(tagRepository.update_migrated(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(tagRepository.update_migrated(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Tag>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(tagId, orgaizationId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete tag {}", tagId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, environmentId, domain, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(organizationId, environmentId, domain, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domainId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domainId, domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domainId, domain, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domainId, domain, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, environmentId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(organizationId, environmentId, domain, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domainId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domainId, domain, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by id: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newReporter, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Reporter>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateReporter, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((Reporter reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
        }
    }).apply(v))))).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v))))).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Reporter>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a reporter", ex);
    String message = "An error occurs while trying to update a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(reporterId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete reporter: {}", reporterId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Reporter> result = RxJava2Adapter.monoToSingle(Mono.just(reporter))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | result = RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(reporterRepository.findByDomain_migrated(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME)))).count()).flatMap((v)->RxJava2Adapter.singleToMono((Single<Reporter>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Long, Single<Reporter>>)(reporters)->{
    if (reporters > 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter));
    }
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(reporterRepository.findByDomain_migrated(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME)))).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(reporterRepository.findByDomain_migrated(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME)))).count
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Reporter>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Long, Single<Reporter>>)(reporters)->{
    if (reporters > 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(reporter));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(result);
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((throwable)->{
    logger.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Credential>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a credential", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Credential>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a credential", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(update_migrated(referenceType, referenceId, credentialId, credential));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Credential, Single<Credential>>toJdkFunction((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return RxJava2Adapter.monoToSingle(credentialRepository.update_migrated(credentialToUpdate));
}).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(credentialRepository.update_migrated(credentialToUpdate));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->credentialRepository.delete_migrated(id)).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete credential: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->credentialRepository.delete_migrated(id)).then()).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(referenceType, referenceId, userId)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(referenceType, referenceId, userId)).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(credentialRepository.deleteByAaguid_migrated(referenceType, referenceId, aaguid)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and aaguid: {}", referenceType, referenceId, aaguid, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.deleteByAaguid_migrated(referenceType, referenceId, aaguid)).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, patchAlertTrigger, byUser));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, alertTrigger));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, alertTrigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | alertTriggerRepository.findByCriteria_migrated(referenceType, referenceId, criteria).next().flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, alertTrigger));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(alertTrigger, byUser));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createInternal_migrated(alertTrigger, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, alertTriggerId, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertTriggerRepository.delete_migrated(alertTrigger.getId()).then(eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).then())).doOnComplete
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, patchAlertTrigger, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, patchAlertTrigger, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, alertTriggerId, byUser));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, alertTriggerId, byUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, newEntrypoint, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | toCreateObsList.add(RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, null)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | toCreateObsList.add(RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, null)))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(Single.mergeDelayError(toCreateObsList));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(entrypointId, organizationId, updateEntrypoint, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Entrypoint>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Entrypoint, Single<Entrypoint>>)(oldEntrypoint)->{
    Entrypoint toUpdate = new Entrypoint(oldEntrypoint);
    toUpdate.setName(updateEntrypoint.getName());
    toUpdate.setDescription(updateEntrypoint.getDescription());
    toUpdate.setUrl(updateEntrypoint.getUrl());
    toUpdate.setTags(updateEntrypoint.getTags());
    toUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validate_migrated(toUpdate, oldEntrypoint).then(entrypointRepository.update_migrated(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validate_migrated(toUpdate, oldEntrypoint).then(entrypointRepository.update_migrated(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable)))));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, organizationId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(id)).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(id)).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(newResource, domain, client, userId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(newResource, domain, client, userId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(newResource, domain, client, userId, resourceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(newResource, domain, client, userId, resourceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(resource));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(resource));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, client, userId, resourceId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, client, userId, resourceId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(resource));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(resource));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id, organizationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(organizationId, environmentId, newEnvironment, byUser));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(environment, byUser));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(updateInternal_migrated(environment, byUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable(Observable::fromIterable).flatMapSingle((Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList()).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<TotalToken>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<TotalToken>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by application: {}", application, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList()).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<TotalToken>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByUserId_migrated(userId).then(refreshTokenRepository.deleteByUserId_migrated(userId))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete tokens by user {}", userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByUserId_migrated(userId).then(refreshTokenRepository.deleteByUserId_migrated(userId))).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (vhost)->RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, domainRestrictions))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | chain.add(RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated(domain.getPath())))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.merge(chain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        emitter.onSuccess(certificatePluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all certificate plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all certificate plugins", ex));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(certificatePluginId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin certificate = certificatePluginManager.findById(certificatePluginId);
        if (certificate != null) {
            emitter.onSuccess(convert(certificate));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get certificate plugin : {}", certificatePluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get certificate plugin : " + certificatePluginId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = certificatePluginManager.getSchema(certificatePluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for certificate plugin {}", certificatePluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for certificate plugin " + certificatePluginId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(reporter.findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, scope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, scope, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, scope));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchScope, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateScope, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateScope));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(scopeId, force, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(scopeId, force, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, scope, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(domain, id, patchScope, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateScope, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(scopeId, force));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(scopeId, force, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, application, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, application, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, flows, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, flows, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, application, flows, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, application, flows, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, flow, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, application, flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, application, flow, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, flow));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, flow, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, flows));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, flows, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, application, flows));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, application, flows, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(id, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(tokenGranter));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(tokenGranter));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newExtensionGrant, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newExtensionGrant, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateExtensionGrant, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateExtensionGrant, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, certificateId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, certificateId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newExtensionGrant));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newExtensionGrant, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateExtensionGrant));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateExtensionGrant, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, certificateId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, certificateId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(botDetectionRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a bot detection using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(botDetectionRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newBotDetection, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<BotDetection>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateBotDetection, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
    }).apply(v)))).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<BotDetection>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update bot detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domainId, botDetectionId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete bot detection: {}", botDetectionId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (botDetection)->RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domainId).flatMap((v)->RxJava2Adapter.singleToMono((Single<BotDetection>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<Application>, Single<BotDetection>>)(applications)->{
    if (applications.stream().filter((app)->app.getSettings() != null && app.getSettings().getAccount() != null && botDetectionId.equals(app.getSettings().getAccount().getBotDetectionPlugin())).count() > 0) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<BotDetection>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<Application>, Single<BotDetection>>)(applications)->{
    if (applications.stream().filter((app)->app.getSettings() != null && app.getSettings().getAccount() != null && botDetectionId.equals(app.getSettings().getAccount().getBotDetectionPlugin())).count() > 0) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Scope>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain and query : {} {}", domain, query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateScope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(scope));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(scope));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(scopeId, force, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete scope: {}", scopeId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(scope));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Scope>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope key: {}", domain, scopeKey, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Scope>>>toJdkFunction((ex)->{
    String keys = scopeKeys != null ? String.join(",", scopeKeys) : null;
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope keys: {}", domain, keys, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<IdentityProvider>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newIdentityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
    }).apply(v)))).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<IdentityProvider>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, identityProviderId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete identity provider: {}", identityProviderId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(y));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, identityProviderId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newIdentityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, identityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, identityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateIdentityProvider, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, identityProviderId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, identityProviderId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, identityProviderId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, identityProviderId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, identityProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, identityProvider, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateIdentityProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateIdentityProvider, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, identityProviderId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, identityProviderId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a resource using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newServiceResource, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ServiceResource>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateResource, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
    }).apply(v)))).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ServiceResource>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, resourceId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap((y)->factorService.findByDomain_migrated(domain).filter((Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).collectList().flatMap((List<Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((List<Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable))));
}).apply((ServiceResource)y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete resource: {}", resourceId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap((y)->factorService.findByDomain_migrated(domain).filter((Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).collectList().flatMap((List<Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((List<Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable))));
}).apply((ServiceResource)y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (List<Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((List<Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(y));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable))));
}).apply((ServiceResource)y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to search applications with query {} for domain {}", query, domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomainAndExtensionGrant_migrated(domain, extensionGrant)).collect(()->(Set<Application>)new HashSet(), Set::add)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomainAndExtensionGrant_migrated(domain, extensionGrant)).collect
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findByDomainAndClientId_migrated(domain, clientId)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its domain: {} and client_id : {}", domain, clientId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findByDomainAndClientId_migrated(domain, clientId)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newApplication, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an application", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an application", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domain, id, patchApplication, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to renew client secret for application {} and domain {}", id, domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete application: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count applications for domain {}", domainId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<TopApplication>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find top applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<TopApplication>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find top applications for domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application1));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(application.getIdentities())).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(application.getIdentities())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (identity)->RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, Single<Application>>)(Application ident)->RxJava2Adapter.monoToSingle(validateTlsClientAuth_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Application ident)->RxJava2Adapter.monoToSingle(validateTlsClientAuth_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(application.getDomain()).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))).flatMapSingle((domain)->{
    if (GrantTypeUtils.isRedirectUriRequired(oAuthSettings.getGrantTypes()) && CollectionUtils.isEmpty(oAuthSettings.getRedirectUris())) {
        if (AM_V2_VERSION.equals(oAuthSettings.getSoftwareVersion())) {
            oAuthSettings.setSoftwareVersion(null);
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()));
        }
    }
    if (oAuthSettings.getRedirectUris() != null) {
        for (String redirectUri : oAuthSettings.getRedirectUris()) {
            try {
                URI uri = UriBuilder.fromURIString(redirectUri).build();
                if (uri.getScheme() == null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
                }
                if (!domain.isRedirectUriLocalhostAllowed() && UriBuilder.isHttp(uri.getScheme()) && UriBuilder.isLocalhost(uri.getHost())) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")));
                }
                if (!domain.isRedirectUriUnsecuredHttpSchemeAllowed() && uri.getScheme().equalsIgnoreCase("http")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")));
                }
                if (!domain.isRedirectUriWildcardAllowed() && uri.getPath().contains("*")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")));
                }
                if (uri.getFragment() != null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")));
                }
            } catch (IllegalArgumentException | URISyntaxException ex) {
                return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
            }
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(application.getDomain()).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Application>>)(isValid)->{
    if (!isValid) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(findByDomain(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, form, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, form, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, form, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, form, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, form, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, formId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, formId, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, pageId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, pageId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, form, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, client, form, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, form, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, client, id, form, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, pageId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(domain, pageId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestedPermission, domain, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(requestedPermission, domain, client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a certificate using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newCertificate, principal));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(newCertificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map(RxJavaReactorMigrationUtil.toJdkFunction((schema)->objectMapper.readValue(schema, CertificateSchema.class)))).flatMapSingle
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateCertificate, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
            }
        });
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Certificate>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CertificateWithSchema, Single<Certificate>>)(oldCertificate)->{
    Single<Certificate> certificateSingle = Single.create((emitter)->{
        Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
        certificateToUpdate.setName(updateCertificate.getName());
        try {
            CertificateSchema certificateSchema = oldCertificate.getSchema();
            JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
            JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
            certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                try {
                    String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                    String fileInformation = certificateConfiguration.get(key).asText();
                    if (!oldFileInformation.equals(fileInformation)) {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    }
                } catch (IOException ex) {
                    LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                    emitter.onError(ex);
                }
            });
            certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
            certificateToUpdate.setUpdatedAt(new Date());
        } catch (Exception ex) {
            LOGGER.error("An error occurs while trying to update certificate configuration", ex);
            emitter.onError(ex);
        }
        emitter.onSuccess(certificateToUpdate);
    });
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::update_migrated).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
        Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
    }).apply(o)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
        LOGGER.error("An error occurs while trying to update a certificate", ex);
        throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
    }).apply(err))).doOnSuccess((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::update_migrated).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).apply(err))).doOnSuccess((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(certificate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(certificateId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete certificate: {}", certificateId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(y));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}))).flatMapSingle(new Function<String, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(String configuration) throws Exception {
        certificate.setConfiguration(configuration);
        return RxJava2Adapter.monoToSingle(create_migrated(domain, certificate));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, certificate));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Resource>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Resource>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {} and client {}", domain, client, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.fluxToFlowable(userService.findByIdIn_migrated(userIds)).toMap(User::getId, this::filter), RxJava2Adapter.fluxToFlowable(applicationService.findByIdIn_migrated(appIds)).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
}));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userService.findByIdIn_migrated(userIds)).toMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByIdIn_migrated(appIds)).toMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(newResource, domain, client, userId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)(r)->{
    AccessPolicy accessPolicy = new AccessPolicy();
    accessPolicy.setName("Deny all");
    accessPolicy.setDescription("Default deny access policy. Created by Gravitee.io.");
    accessPolicy.setType(AccessPolicyType.GROOVY);
    accessPolicy.setCondition("{\"onRequestScript\":\"import io.gravitee.policy.groovy.PolicyResult.State\\nresult.state = State.FAILURE;\"}");
    accessPolicy.setEnabled(true);
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(newResource, domain, client, userId, resourceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)(Resource ident)->RxJava2Adapter.monoToSingle(repository.update_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Resource ident)->RxJava2Adapter.monoToSingle(repository.update_migrated(ident))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(resource));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, client, userId, resourceId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(resource));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (r)->RxJava2Adapter.fluxToFlowable(accessPolicyRepository.findByDomainAndResource_migrated(domain, r.getId()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(ex));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to count access policies by resource id {}", resourceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicy))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicy))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(accessPolicyRepository.findById_migrated(accessPolicy)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find access policy by id {}", accessPolicy, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(accessPolicyRepository.findById_migrated(accessPolicy)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<AccessPolicy>>)(r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<AccessPolicy>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to create an access policy for domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Single<AccessPolicy>>)(oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.update_migrated(policyToUpdate));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(accessPolicyRepository.update_migrated(policyToUpdate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<AccessPolicy>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicyId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->accessPolicyRepository.delete_migrated(accessPolicy)).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->accessPolicyRepository.delete_migrated(accessPolicy)).then()).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Scope>, Single<Resource>>)(scopes)->{
    if (toValidate.getResourceScopes().size() != scopes.size()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(loginAttemptRepository.findByCriteria_migrated(criteria).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(loginAttemptRepository.update_migrated(loginAttempt));
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return RxJava2Adapter.monoToSingle(loginAttemptRepository.create_migrated(loginAttempt));
    }
})).onErrorResume
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(loginAttemptRepository.findByCriteria_migrated(criteria).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(loginAttemptRepository.update_migrated(loginAttempt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(loginAttemptRepository.create_migrated(loginAttempt));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<LoginAttempt>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to add a login attempt", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(loginAttemptRepository.delete_migrated(criteria)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete login attempt for", criteria, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(loginAttemptRepository.delete_migrated(criteria)).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(loginAttemptRepository.findById_migrated(id).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to find login attempt by id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(loginAttemptRepository.findById_migrated(id).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authContextRepository.findLastByTransactionId_migrated(transactionId).switchIfEmpty(Mono.fromSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}))).retryWhen(new RetryWithDelay(consistencyRetries, retryDelay)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authContextRepository.findLastByTransactionId_migrated(transactionId).switchIfEmpty(Mono.fromSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}))).retryWhen
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.loadContext_migrated(transactionId, expectedVersion)).doFinally(()->{
    RxJava2Adapter.monoToCompletable(clearContext_migrated(transactionId)).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(this.loadContext_migrated(transactionId, expectedVersion)).doFinally
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(clearContext_migrated(transactionId)).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(attempts).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndDomain_migrated(domain, username)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID: {} for the domain {}", username, domain, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndDomain_migrated(domain, username)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count users by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count users by application: {}", application, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Map<Object, Object>>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to get users analytics : {}", query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User user = new User(oldUser);
    List<EnrolledFactor> enrolledFactors = user.getFactors();
    if (enrolledFactors == null || enrolledFactors.isEmpty()) {
        enrolledFactors = Collections.singletonList(enrolledFactor);
    } else {
        if (Boolean.TRUE.equals(enrolledFactor.isPrimary())) {
            enrolledFactors.forEach((e)->e.setPrimary(false));
        }
        Optional<EnrolledFactor> optFactor = enrolledFactors.stream().filter((existingFactor)->existingFactor.getFactorId().equals(enrolledFactor.getFactorId())).findFirst();
        if (optFactor.isPresent()) {
            EnrolledFactor factorToUpdate = new EnrolledFactor(optFactor.get());
            factorToUpdate.setStatus(enrolledFactor.getStatus());
            factorToUpdate.setChannel(enrolledFactor.getChannel());
            factorToUpdate.setSecurity(enrolledFactor.getSecurity());
            factorToUpdate.setPrimary(enrolledFactor.isPrimary());
            enrolledFactors.removeIf((ef)->factorToUpdate.getFactorId().equals(ef.getFactorId()));
            enrolledFactors.add(factorToUpdate);
        } else {
            enrolledFactors.add(enrolledFactor);
        }
    }
    user.setFactors(enrolledFactors);
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.SMS == enrolledFactor.getChannel().getType()) {
        List<Attribute> phoneNumbers = user.getPhoneNumbers();
        if (phoneNumbers == null) {
            phoneNumbers = new ArrayList<>();
            user.setPhoneNumbers(phoneNumbers);
        }
        String enrolledPhoneNumber = enrolledFactor.getChannel().getTarget();
        if (!phoneNumbers.stream().filter((p)->p.getValue().equals(enrolledPhoneNumber)).findFirst().isPresent()) {
            Attribute newPhoneNumber = new Attribute();
            newPhoneNumber.setType("mobile");
            newPhoneNumber.setPrimary(phoneNumbers.isEmpty());
            newPhoneNumber.setValue(enrolledPhoneNumber);
            phoneNumbers.add(newPhoneNumber);
        }
    }
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.EMAIL == enrolledFactor.getChannel().getType()) {
        String email = user.getEmail();
        String enrolledEmail = enrolledFactor.getChannel().getTarget();
        if (email == null) {
            user.setEmail(enrolledEmail);
        } else if (!email.equals(enrolledEmail)) {
            List<Attribute> emails = user.getEmails();
            if (emails == null) {
                emails = new ArrayList<>();
                user.setEmails(emails);
            }
            if (!emails.stream().filter((p)->p.getValue().equals(enrolledEmail)).findFirst().isPresent()) {
                Attribute additionalEmail = new Attribute();
                additionalEmail.setPrimary(false);
                additionalEmail.setValue(enrolledEmail);
                emails.add(additionalEmail);
            }
        }
    }
    return RxJava2Adapter.monoToSingle(update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
        if (needToAuditUserFactorsOperation(user1, oldUser)) {
            removeSensitiveFactorsData(user1.getFactors());
            removeSensitiveFactorsData(oldUser.getFactors());
            auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
        }
    })).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    if (needToAuditUserFactorsOperation(user1, oldUser)) {
        removeSensitiveFactorsData(user1.getFactors());
        removeSensitiveFactorsData(oldUser.getFactors());
        auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
    }
})).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(update_migrated(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(update_migrated(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))).then());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(formRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(formRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(formRepository.findByTemplate_migrated(referenceType, referenceId, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and template {}", referenceType, referenceId, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(formRepository.findByTemplate_migrated(referenceType, referenceId, template)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(formRepository.findByClientAndTemplate_migrated(referenceType, referenceId, client, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(formRepository.findByClientAndTemplate_migrated(referenceType, referenceId, client, template)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Form, Single<Form>>toJdkFunction((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return RxJava2Adapter.monoToSingle(this.create_migrated(domain, clientTarget, form));
}).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(this.create_migrated(domain, clientTarget, form));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, client, newForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
    }).apply(v)))).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Form>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a form", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a form", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateForm, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, client, id, updateForm, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Form>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, formId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete form: {}", formId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, formId, principal));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client == null ? RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, formTemplate)) : RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, formTemplate))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client == null ? RxJava2Adapter.monoToMaybe(findByTemplate_migrated(referenceType, referenceId, formTemplate)) : RxJava2Adapter.monoToMaybe(findByClientAndTemplate_migrated(referenceType, referenceId, client, formTemplate))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeSource).hasElement
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a domain using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when trying to find a domain using its hrid: {}", hrid, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex)));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((envId)->RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated(environmentId, query))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to search domains with query {} for environmentId {}", query, environmentId, ex);
}));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((envId)->RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated(environmentId, query))))).onErrorResumeNext
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (envId)->RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated(environmentId, query))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((String ident)->RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(ident))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to find domains by environment", ex);
}));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((String ident)->RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(ident))))).onErrorResumeNext
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (String ident)->RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Domain>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all domains", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(organizationId, environmentId, newDomain, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(domain));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domainId, domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Domain>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, Single<Domain>>)(domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(domainId, patchDomain, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
    }).apply(v)))).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domainId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete security domain {}", domainId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain.getId(), scope));
}).lastOrError()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain.getId(), scope));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then());
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newAlertNotifier, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId, newAlertNotifier, byUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, alertNotifierId, patchAlertNotifier, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, alertNotifierId, patchAlertNotifier, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, notifierId, byUser));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, notifierId, byUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(ReferenceType.DOMAIN, domain)).collect(HashSet::new, Set::add));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(ReferenceType.DOMAIN, domain)).collect
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isSystem))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find system role : {} for type : {}", systemRole.name(), assignableType, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isSystem))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isDefaultRole))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find default role {} of organization {} for the type {}", defaultRole.name(), organizationId, assignableType, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isDefaultRole))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findByIdIn_migrated(ids)).collect(()->(Set<Role>)new HashSet<Role>(), Set::add)).onErrorResume
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(roleRepository.findByIdIn_migrated(ids)).collect
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<Role>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find roles by ids", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newRole, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newRole, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateRole, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(role));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Role>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, Single<Role>>)(oldRole)->{
    return RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
        }).apply(x)))).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable))));
    }).apply(t)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable))));
}).apply(t)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable))));
}).apply(t)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(x)))).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateRole, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, roleId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete role: {}", roleId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles)).flatMapCompletable((Role ident)->RxJava2Adapter.monoToCompletable(upsert_migrated(ident))));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles)).flatMapCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (Role ident)->RxJava2Adapter.monoToCompletable(upsert_migrated(ident))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles)).flatMapCompletable((Role ident)->RxJava2Adapter.monoToCompletable(upsert_migrated(ident))));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles)).flatMapCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (Role ident)->RxJava2Adapter.monoToCompletable(upsert_migrated(ident))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        }).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable)))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        }).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable)))).toCompletable();
    }
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable)))).toCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable)))).toCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(referenceType, referenceId)).collect(HashSet<Role>::new, Set::add)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(referenceType, referenceId)).collect
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Set<Role>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashSet<Role>, Single<Set<Role>>>)(roles)->{
    if (roles.stream().filter((role)->!role.getId().equals(roleId)).anyMatch((role)->role.getName().equals(roleName))) {
        throw new RoleAlreadyExistsException(roleName);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(roles));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(roles));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an extension grant using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newExtensionGrant, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ExtensionGrant>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateExtensionGrant, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (Optional<ExtensionGrant> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Optional<ExtensionGrant> existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(y));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<ExtensionGrant>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, Single<ExtensionGrant>>)(oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
    }).apply(z)))).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ExtensionGrant>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(domain, extensionGrantId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap((y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((Set<Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Set<Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to extension grant: {}", extensionGrantId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap((y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((Set<Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Set<Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (Set<Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Set<Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
    if (clients1.size() == 0) {
        return y;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (y.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return y;
    }
})
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
    if (clients1.size() == 0) {
        return y;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (y.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return y;
    }
})
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(requestedPermission, domain, client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<PermissionTicket>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PermissionTicket, Single<PermissionTicket>>)(PermissionTicket ident)->RxJava2Adapter.monoToSingle(repository.create_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (PermissionTicket ident)->RxJava2Adapter.monoToSingle(repository.create_migrated(ident))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)(installation)->{
    Installation toUpdate = new Installation(installation);
    toUpdate.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)(Installation ident)->RxJava2Adapter.monoToSingle(updateInternal_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Installation ident)->RxJava2Adapter.monoToSingle(updateInternal_migrated(ident))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Group>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(findByDomain_migrated(domain));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(referenceType, referenceId, groupName)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its name: {} for the {} {}", groupName, referenceType, referenceId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(referenceType, referenceId, groupName)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Page<User>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Page<User>>>)(group)->{
    if (group.getMembers() == null || group.getMembers().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)));
    } else {
        List<String> sortedMembers = group.getMembers().stream().sorted().collect(Collectors.toList());
        List<String> pagedMemberIds = sortedMembers.subList(Math.min(sortedMembers.size(), page), Math.min(sortedMembers.size(), page + size));
        CommonUserService service = (group.getReferenceType() == ReferenceType.ORGANIZATION ? organizationUserService : userService);
        return RxJava2Adapter.monoToSingle(service.findByIdIn_migrated(pagedMemberIds).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(service.findByIdIn_migrated(pagedMemberIds).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newGroup, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newGroup, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateGroup, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(setMembers_migrated(groupToUpdate).flatMap(groupRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
    }).apply(v)))).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(setMembers_migrated(groupToUpdate).flatMap(groupRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a group", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateGroup, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, groupId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(findById_migrated(referenceType, referenceId, groupId).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(findById_migrated(referenceType, referenceId, groupId).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, groupId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    if (revoke) {
        if (groupToUpdate.getRoles() != null) {
            groupToUpdate.getRoles().removeAll(roles);
        }
    } else {
        groupToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate))).doOnSuccess((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate))).doOnSuccess((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, newAlertNotifier, byUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, alertNotifierId, patchAlertNotifier, byUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AlertNotifier>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AlertNotifier, Single<AlertNotifier>>)(alertNotifier)->{
    AlertNotifier toUpdate = patchAlertNotifier.patch(alertNotifier);
    if (toUpdate.equals(alertNotifier)) {
        return RxJava2Adapter.monoToSingle(Mono.just(alertNotifier));
    }
    return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate, byUser, alertNotifier));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(alertNotifier));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate, byUser, alertNotifier));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, notifierId, byUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertNotifierRepository.delete_migrated(alertNotifier.getId()).then(eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).then())).doOnComplete
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(id)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId, application, flow, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, flow, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((oldFlow)->{
    if (flow.getType() != null && oldFlow.getType() != flow.getType()) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT == flowToUpdate.getType()) {
        flowToUpdate.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT == flow1.getType()) {
            flow1.setPost(emptyList());
        }
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
    }).apply(v)))).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Flow>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, flows, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, application, flows, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete flow: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        InputStream resourceAsStream = this.getClass().getResourceAsStream(DEFINITION_PATH);
        String schema = IOUtils.toString(resourceAsStream, defaultCharset());
        emitter.onSuccess(schema);
    } catch (Exception e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load flow schema", e));
    }
}));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flowIdsToDelete)).flatMapCompletable((String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
}).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flowIdsToDelete)).flatMapCompletable((String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
}).sorted(getFlowComparator()).toList()).flatMap
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (persistedFlows)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flowIdsToDelete)).flatMapCompletable((String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flowIdsToDelete)).flatMapCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Flow>>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update flows", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Flow>>toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.createDefaults_migrated(organization)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.createDefaults_migrated(organization)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.create_migrated(ORGANIZATION_ID, newEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.create_migrated(ORGANIZATION_ID, newEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, new UpdateEntrypoint(), user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(cut.delete_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, user)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(cut.delete_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, user)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same"))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one", "two"))).thenReturn(RxJava2Adapter.flowableToFlux(found))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.fromIterable(request).map(RxJavaReactorMigrationUtil.toJdkFunction((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()).setUserId("user_" + s.getResourceId()))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one", "two"))).thenReturn(RxJava2Adapter.flowableToFlux(found))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")), new Resource().setId("two").setResourceScopes(Arrays.asList("not", "same"))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one", "two"))).thenReturn(RxJava2Adapter.flowableToFlux(found))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.fromIterable(request).map(RxJavaReactorMigrationUtil.toJdkFunction((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one", "two"))).thenReturn(RxJava2Adapter.flowableToFlux(found))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | Flowable<Resource> found = RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b", "c")), new Resource().setId("two").setResourceScopes(Arrays.asList("c", "d"))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one", "two"))).thenReturn(RxJava2Adapter.flowableToFlux(found))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findById_migrated("id")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.remove_migrated("id")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.remove_migrated("id")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalService.findById_migrated("my-consent")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalService.findById_migrated("my-consent")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalService.findById_migrated("my-consent")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(DOMAIN, "userId")).collect
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(DOMAIN, "userId")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).collect
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByConsent_migrated("my-domain", "user-id", "my-consent")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByConsent_migrated("my-domain", "user-id", "my-consent")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated("my-domain", "user-id", new DefaultUser("user-id"))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated("my-domain", "user-id", new DefaultUser("user-id"))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated("my-domain", "user-id", "client-id", new DefaultUser("user-id"))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated("my-domain", "user-id", "client-id", new DefaultUser("user-id"))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(botDetectionService.findById_migrated("bot-detection")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(botDetectionService.findById_migrated("bot-detection")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(botDetectionService.findById_migrated("bot-detection")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(botDetectionService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(botDetectionService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(DOMAIN, newBotDetection)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(DOMAIN, newBotDetection)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(DOMAIN, "bot-detection", updateBotDetection)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(DOMAIN, "bot-detection", updateBotDetection)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, "bot-detection")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, "bot-detection")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, detection.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, detection.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, detection.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupService.findById_migrated("my-group")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupService.findById_migrated("my-group")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupService.findById_migrated("my-group")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN).collectList()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(groupService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN, 1, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN, 1, 1)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(DOMAIN, newGroup)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(DOMAIN, newGroup)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(DOMAIN, newGroup)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.update_migrated(DOMAIN, "my-updateGroup", updateGroup)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.update_migrated(DOMAIN, "my-updateGroup", updateGroup)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.update_migrated(DOMAIN, "my-updateGroup", updateGroup)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated("my-domain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated("my-domain")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated("my-domain")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainService.findByIdIn_migrated(Arrays.asList("1", "2"))).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainService.findByIdIn_migrated(Arrays.asList("1", "2"))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain, new DefaultUser("username"))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain)).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (RxJava2Adapter.fluxToFlowable(domainRepository.findAll_migrated()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | when((RxJava2Adapter.fluxToFlowable(domainRepository.findAll_migrated()))).thenReturn(RxJava2Adapter.fluxToFlowable(Flux.empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(criteria)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(resourceService.findById_migrated("my-resource")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(resourceService.findById_migrated("my-resource")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(resourceService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resourceService.create_migrated(DOMAIN, resource, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resourceService.create_migrated(DOMAIN, resource, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resourceService.update_migrated(DOMAIN, record.getId(), resource, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resourceService.update_migrated(DOMAIN, UUID.randomUUID().toString(), new UpdateServiceResource(), null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(DOMAIN, UUID.randomUUID().toString(), null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(DOMAIN, record.getId(), null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(DOMAIN, record.getId(), null)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated("my-user")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated("my-user")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated("my-user")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByDomain_migrated(DOMAIN, 1, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByDomain_migrated(DOMAIN, 1, 1)).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsername_migrated(DOMAIN, "my-user")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsername_migrated(DOMAIN, "my-user")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsername_migrated(DOMAIN, "my-user")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(formService.findAll_migrated(ReferenceType.ORGANIZATION)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(formService.findAll_migrated(ReferenceType.ORGANIZATION)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(formService.findAll_migrated(ReferenceType.ORGANIZATION)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.findByTimeFrame_migrated(0, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.findByTimeFrame_migrated(0, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(newEvent)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(newEvent)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipService.addEnvironmentUserRoleIfNecessary_migrated("orga#1", "env#1", membership, principal)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipService.addEnvironmentUserRoleIfNecessary_migrated("orga#1", "env#1", membership, principal)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipService.addDomainUserRoleIfNecessary_migrated("orga#1", "env#1", "domain#1", membership, principal)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipService.addDomainUserRoleIfNecessary_migrated("orga#1", "env#1", "domain#1", membership, principal)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.setPlatformAdmin_migrated(userId)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.setPlatformAdmin_migrated(userId)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.setPlatformAdmin_migrated(userId)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.findAll_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.findAll_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.findAll_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialService.findById_migrated("my-credential")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialService.findById_migrated("my-credential")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialService.findById_migrated("my-credential")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialService.findByUserId_migrated(ReferenceType.DOMAIN, DOMAIN, "user-id")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialService.findByUserId_migrated(ReferenceType.DOMAIN, DOMAIN, "user-id")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, DOMAIN, "username")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, DOMAIN, "username")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, DOMAIN, "credentialId")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, DOMAIN, "credentialId")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.create_migrated(newCredential)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.create_migrated(newCredential)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.update_migrated(updateCredential)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.update_migrated(updateCredential)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.update_migrated(updateCredential)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.delete_migrated("my-credential")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.delete_migrated("my-credential")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.delete_migrated("my-credential")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.getById_migrated(ALERT_TRIGGER_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.getById_migrated(ALERT_TRIGGER_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.findByDomainAndCriteria_migrated(DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(loginAttemptService.loginFailed_migrated(loginAttemptCriteria, accountSettings)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(loginAttemptService.loginFailed_migrated(loginAttemptCriteria, accountSettings)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated("my-client")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated("my-client")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated("my-client")).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findByDomainAndClientId_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findByDomainAndClientId_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findByDomainAndClientId_migrated(DOMAIN, "my-client")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN, 1, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN, 1, 1)).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated("client-idp")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated("client-idp")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated("client-certificate")).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated("client-certificate")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, "client-extension-grant")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, "client-extension-grant")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated(1, 1)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated(1, 1)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.countByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.countByDomain_migrated(DOMAIN)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.count_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.count_migrated()).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(new Application())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(toCreate)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.update_migrated(new Application())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.update_migrated(toPatch)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.update_migrated(toPatch)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.update_migrated(toPatch)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(existingClient.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(existingClient.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated("my-role")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated("my-role")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated("my-role")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(Arrays.asList("my-role"))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(Arrays.asList("my-role"))).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.create_migrated(DOMAIN, newRole)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.create_migrated(DOMAIN, newRole)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.create_migrated(DOMAIN, newRole)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantService.findById_migrated("my-extension-grant")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantService.findById_migrated("my-extension-grant")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantService.findById_migrated("my-extension-grant")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(extensionGrantService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(extensionGrantService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(DOMAIN, "my-extension-grant", updateExtensionGrant)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(DOMAIN, "my-extension-grant", updateExtensionGrant)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(DOMAIN, "my-extension-grant", updateExtensionGrant)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, "my-extension-grant")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, extensionGrant.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, extensionGrant.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, extensionGrant2.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, "my-extension-grant")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, "my-extension-grant")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.getById_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.getById_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.findByDomainAndCriteria_migrated(DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(cut.findByReferenceAndCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.create_migrated(ReferenceType.DOMAIN, DOMAIN_ID, newAlertNotifier, new DefaultUser(USERNAME))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, singletonList("constraint.gravitee.io"))).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, singletonList(vhost.getHost()))).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, singletonList(domainConstraint))).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io", domainConstraint))).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io"))).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailTemplateService.findByDomainAndTemplate_migrated(DOMAIN, Template.LOGIN.template())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailTemplateService.findByDomainAndTemplate_migrated(DOMAIN, Template.LOGIN.template())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailTemplateService.findByDomainAndTemplate_migrated(DOMAIN, Template.LOGIN.template())).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(DOMAIN, newEmail)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(DOMAIN, newEmail)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(DOMAIN, newEmail)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(DOMAIN, "my-email", updateEmail)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(DOMAIN, "my-email", updateEmail)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(DOMAIN, "my-email", new UpdateEmail())).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(emailTemplateService.delete_migrated("my-email")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(emailTemplateService.delete_migrated("my-email")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(emailTemplateService.delete_migrated(email.getId())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid).collectList()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(emailTemplateService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorService.findById_migrated("my-factor")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorService.findById_migrated("my-factor")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorService.findById_migrated("my-factor")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(factorService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(factorService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.update_migrated(DOMAIN, "my-factor", updateFactor)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.update_migrated(DOMAIN, "my-factor", updateFactor)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.update_migrated(DOMAIN, "my-factor", updateFactor)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, "my-factor")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, factor.getId())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, "my-factor")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, factor.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderService.findById_migrated("my-identity-provider")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderService.findById_migrated("my-identity-provider")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderService.findById_migrated("my-identity-provider")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(DOMAIN, newIdentityProvider)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(DOMAIN, newIdentityProvider)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(DOMAIN, "my-identity-provider", updateIdentityProvider)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(DOMAIN, "my-identity-provider", updateIdentityProvider)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN).collectList()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN).collectList()).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, DOMAIN, newFlow)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, DOMAIN, newFlow)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-updateFlow", updateFlow)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-updateFlow", updateFlow)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, ID, updateFlow)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-updateFlow", updateFlow)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-new Flow()", new Flow())).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowService.delete_migrated("my-flow")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowService.delete_migrated("my-flow")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowService.delete_migrated("my-flow")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(newFlow, newFlow2))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow2))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagService.findById_migrated("my-tag", Organization.DEFAULT)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagService.findById_migrated("my-tag", Organization.DEFAULT)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagService.findById_migrated("my-tag", Organization.DEFAULT)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagService.create_migrated(newTag, Organization.DEFAULT, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagService.create_migrated(newTag, Organization.DEFAULT, null)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagService.create_migrated(newTag, Organization.DEFAULT, null)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagService.delete_migrated("my-tag", Organization.DEFAULT, null)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagService.delete_migrated("my-tag", Organization.DEFAULT, null)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated(null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated(null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(spyHttpRequest_migrated(client.post(eq("https://verif"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(spyHttpRequest_migrated(client.post(eq("https://verif"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(spyHttpRequest_migrated(client.post(eq("https://verif"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(spyHttpRequest_migrated(client.post(eq("https://verif"))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromFuture(spyHttpRequest));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findById_migrated("my-scope")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findById_migrated("my-scope")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findById_migrated("my-scope")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(DOMAIN, 0, 1)).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(DOMAIN, "my-scope")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(DOMAIN, "my-scope")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, Collections.emptyList())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, searchingScopes)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, searchingScopes)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, scopeId, patch)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, scopeId, patch)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, "toPatchId", new PatchScope())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, "my-scope", patchScope)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, "my-scope", patchScope)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, "toUpdateId", new UpdateScope())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, "toUpdateId", updateScope)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, "toUpdateId", new UpdateSystemScope())).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("scope-id", false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.validateScope_migrated(DOMAIN, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.validateScope_migrated(DOMAIN, Arrays.asList("unknown"))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.validateScope_migrated(DOMAIN, Arrays.asList("valid"))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateService.findById_migrated("my-certificate")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateService.findById_migrated("my-certificate")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateService.findById_migrated("my-certificate")).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(certificateService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(certificateService.findByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(certificateService.create_migrated("my-domain")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.loadContext_migrated(SESSION_ID, 1)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.loadContext_migrated(SESSION_ID, 1)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.loadContext_migrated(SESSION_ID, 2)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.clearContext_migrated(SESSION_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.clearContext_migrated(null)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByDomain_migrated(DOMAIN)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokens_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokens_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokens_migrated()).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tokenService.deleteByUserId_migrated("userId")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/test")).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/test/subpath/subpath2_with-and.dot/AND_UPPERCASE")).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("")).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated(null)).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/////test////")).blockingGet
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/test$:\\;,+")).blockingGet
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findById_migrated(ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ORGANIZATION_ID, patchOrganization, new DefaultUser("username"))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.update_migrated(ORGANIZATION_ID, patchOrganization, new DefaultUser("username"))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.delete_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.delete_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.update_migrated(new NewResource(), DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.create_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(service.listByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findByDomain_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findByDomain_migrated(DOMAIN_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(service.findByResources_migrated(Collections.emptyList())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findByDomainAndClient_migrated(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findByDomainAndClient_migrated(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(service.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Collections.emptyList())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findByDomainAndClientResource_migrated(DOMAIN_ID, CLIENT_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.delete_migrated(toDelete)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).collectList()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findAccessPoliciesByResources_migrated(resourceIds).collectList()).test
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(service.findAccessPoliciesByResources_migrated(resourceIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.countAccessPolicyByResource_migrated(RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.countAccessPolicyByResource_migrated(RESOURCE_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(POLICY_ID)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(POLICY_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.createAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.createAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.updateAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.updateAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.updateAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.deleteAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(service.deleteAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.getMetadata_migrated(null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.getMetadata_migrated(Collections.emptyList())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.getMetadata_migrated(resources)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
})).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono((authenticationProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (authenticationProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (authenticationProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono((userProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).blockingForEach
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(client != null ? RxJava2Adapter.monoToMaybe(Mono.just(client)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client != null ? RxJava2Adapter.monoToMaybe(Mono.just(client)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client != null ? RxJava2Adapter.monoToMaybe(Mono.just(client)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(optClient.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(optClient.get())) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | optClient.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(optClient.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | optClient.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(optClient.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(deployment).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(authenticate_migrated(client, authentication, preAuthenticated));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError()).flatMap
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return RxJava2Adapter.monoToSingle(connect_migrated(user));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(lastException));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(lastException));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(connect_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, true))).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError()).flatMap
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (authProvider)->RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, true))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<UserAuthenticationManagerImpl.UserAuthentication, MaybeSource<User>>)(userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
        }
    } else {
        return RxJava2Adapter.monoToMaybe(userAuthenticationService.loadPreAuthenticatedUser_migrated(user));
    }
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userAuthenticationService.loadPreAuthenticatedUser_migrated(user));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}))).onErrorResumeNext((error)->{
    logger.debug("Unable to authenticate [{}] with authentication provider [{}]", authentication.getPrincipal(), authProvider, error);
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
        }).apply(a)))));
    } else {
        return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
    }
}).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
        }).apply(a)))));
    } else {
        return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
    }
}).apply(y)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
}).apply(a)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
}).apply(a)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))).then());
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | domain.isMaster() ? RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()) : RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomain_migrated(domain.getId()))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | domain.isMaster() ? RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()) : RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomain_migrated(domain.getId()))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io())).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationsSource).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(applicationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io())).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(applicationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (client)->RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<JWT>>)(jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return RxJava2Adapter.monoToSingle(Mono.just(jwt));
    }
    return RxJava2Adapter.monoToSingle(accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    })));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    if (accessToken.getExpireAt().before(new Date())) {
        throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
    }
    return jwt;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        LOGGER.debug("An error occurs while decoding JWT access token : {}", token, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    if (ex instanceof InvalidTokenException) {
        InvalidTokenException invalidTokenException = (InvalidTokenException)ex;
        String details = invalidTokenException.getDetails();
        JWT jwt = invalidTokenException.getJwt();
        LOGGER.debug("An error occurs while checking JWT access token validity: {}\n\t - details: {}\n\t - decoded jwt: {}", token, details != null ? details : "none", jwt != null ? jwt.toString() : "{}", invalidTokenException);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Map<String, String>> singlePageRendering = RxJava2Adapter.monoToSingle(Mono.just(errorParams))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | singlePageRendering = RxJava2Adapter.monoToSingle(this.jwtService.decode_migrated(jarm).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->{
    Map<String, String> result = new HashMap<>();
    result.put(ERROR_PARAM, (String)jwt.get(ERROR_PARAM));
    result.put(ERROR_DESCRIPTION_PARAM, (String)jwt.get(ERROR_DESCRIPTION_PARAM));
    return result;
})))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(singlePageRendering).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(certificateRepository.findByDomain_migrated(domain.getId())).subscribeOn(Schedulers.io())).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(certificateRepository.findByDomain_migrated(domain.getId())).subscribeOn
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(certificateProvider != null ? RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider != null ? RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider != null ? RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(certificate.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(certificate.get())) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificate.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(certificate.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificate.isPresent() ? RxJava2Adapter.monoToMaybe(Mono.just(certificate.get())) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateId)).subscribeOn(Schedulers.io())).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateId)).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<CookieSession> sessionObs = RxJava2Adapter.monoToSingle(Mono.just(session))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | sessionObs = RxJava2Adapter.monoToSingle(session.setValue_migrated(sessionCookie.getValue()).flatMap((v)->RxJava2Adapter.singleToMono((Single<CookieSession>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CookieSession, Single<CookieSession>>)(currentSession)->{
    String userId = currentSession.get(USER_ID_KEY);
    if (!StringUtils.isEmpty(userId)) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession))).onErrorResumeNext(RxJava2Adapter.monoToSingle(cleanupSession_migrated(currentSession)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
    }
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<CookieSession>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CookieSession, Single<CookieSession>>)(currentSession)->{
    String userId = currentSession.get(USER_ID_KEY);
    if (!StringUtils.isEmpty(userId)) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession))).onErrorResumeNext(RxJava2Adapter.monoToSingle(cleanupSession_migrated(currentSession)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession))).onErrorResumeNext
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession))).onErrorResumeNext(RxJava2Adapter.monoToSingle(cleanupSession_migrated(currentSession)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError((t)->logger.warn("Unable to restore the session", t))).doFinally(context::next)).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError((t)->logger.warn("Unable to restore the session", t))).doFinally
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(sessionObs).doOnError
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.defer(()->{
    RxJava2Adapter.monoToSingle(currentSession.setValue_migrated(null));
    return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(currentSession.setValue_migrated(null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(signedResponseAlg).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(signedResponseAlg).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(decodeAndVerify_migrated(jwt, certificateProvider))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (certificateProvider)->RxJava2Adapter.monoToSingle(decodeAndVerify_migrated(jwt, certificateProvider))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        String json = new String(Base64.getDecoder().decode(jwt.split("\\.")[1]), "UTF-8");
        emitter.onSuccess(objectMapper.readValue(json, JWT.class));
    } catch (Exception ex) {
        logger.debug("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
}));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        String encodedToken = certificateProvider.getJwtBuilder().sign(jwt);
        emitter.onSuccess(encodedToken);
    } catch (Exception ex) {
        logger.error("Failed to sign JWT", ex);
        emitter.onError(new InvalidTokenException("The JWT token couldn\'t be signed", ex));
    }
}));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        Map<String, Object> decodedPayload = certificateProvider.getJwtParser().parse(payload);
        emitter.onSuccess(decodedPayload);
    } catch (Exception ex) {
        logger.error("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(getClient_migrated(clientId)), RxJava2Adapter.monoToSingle(getClient_migrated(user.getClient())), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
})).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(getClient_migrated(clientId)), RxJava2Adapter.monoToSingle(getClient_migrated(user.getClient())), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
})
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(getClient_migrated(clientId)), RxJava2Adapter.monoToSingle(getClient_migrated(user.getClient())), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
})
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(create_migrated(principal, afterAuthentication));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(principal, afterAuthentication));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwtService.encode_migrated(new JWT(), client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(new JWT(), client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientSyncService.findById_migrated("aa")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientSyncService.findById_migrated("aa")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientSyncService.findByClientId_migrated("domainAClientA")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientSyncService.findByClientId_migrated("domainAClientB")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientSyncService.findTemplates_migrated()).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientSyncService.findByClientId_migrated("domainAClientA")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated("")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated("unknown")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated("RS512")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return null;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, true)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.alwaysTrue())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.from(executionContext))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono((user != null) ? RxJava2Adapter.monoToMaybe(Mono.just(user)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (user != null) ? RxJava2Adapter.monoToMaybe(Mono.just(user)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (user != null) ? RxJava2Adapter.monoToMaybe(Mono.just(user)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(inlineAuthenticationProvider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(inlineAuthenticationProvider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(inlineAuthenticationProvider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "ben";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "benspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Document>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        Document document = new Document();
        document.put(FIELD_ID, user.getId() != null ? user.getId() : RandomString.generate());
        document.put(configuration.getUsernameField(), username);
        if (user.getCredentials() != null) {
            if (configuration.isUseDedicatedSalt()) {
                byte[] salt = createSalt();
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials(), salt));
                document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
            } else {
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials()));
            }
        }
        if (user.getAdditionalInformation() != null) {
            document.putAll(user.getAdditionalInformation());
        }
        document.put(FIELD_CREATED_AT, new Date());
        document.put(FIELD_UPDATED_AT, document.get(FIELD_CREATED_AT));
        return RxJava2Adapter.monoToSingle(Mono.from(usersCollection.insertOne(document)).flatMap((success)->findById_migrated(document.getString(FIELD_ID)).single()));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.from(usersCollection.insertOne(document)).flatMap((success)->findById_migrated(document.getString(FIELD_ID)).single()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    Document document = new Document();
    document.put(configuration.getUsernameField(), oldUser.getUsername());
    if (updateUser.getCredentials() != null) {
        if (configuration.isUseDedicatedSalt()) {
            byte[] salt = createSalt();
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials(), salt));
            document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
        } else {
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials()));
        }
    } else {
        document.put(configuration.getPasswordField(), oldUser.getCredentials());
    }
    if (updateUser.getAdditionalInformation() != null) {
        document.putAll(updateUser.getAdditionalInformation());
    }
    document.put(FIELD_CREATED_AT, oldUser.getCreatedAt());
    document.put(FIELD_UPDATED_AT, new Date());
    return RxJava2Adapter.monoToSingle(Mono.from(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)).flatMap((updateResult)->findById_migrated(oldUser.getId()).single()));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.from(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)).flatMap((updateResult)->findById_migrated(oldUser.getId()).single()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1)))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(collection.insertOne(doc))).blockingFirst
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(collection.insertOne(doc2))).blockingFirst
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "BOB";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getWellKnownUri()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<HttpResponse<Buffer>> requestHandler = RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, createUserURI, createUserHttpMethod, createUserHttpHeaders, createUserBody))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while creating user {} from the remote HTTP identity provider", user.getUsername(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(id, updateUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<HttpResponse<Buffer>> requestHandler = RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, updateUserURI, updateUserHttpMethod, updateUserHttpHeaders, updateUserBody))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while updating user {} from the remote HTTP identity provider", updateUser.getUsername(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<HttpResponse<Buffer>> requestHandler = RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, deleteUserURI, deleteUserHttpMethod, deleteUserHttpHeaders, updateUserBody))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while deleting user {} from the remote HTTP identity provider", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex)));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then()).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).flatMap
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<HttpResponse<Buffer>> requestHandler = RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, readUserURI, readUserHttpMethod, readUserHttpHeaders, readUserBody))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while searching user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(responseHandler);
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<HttpResponse<Buffer>> requestHandler = RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, authenticationURI, authenticationHttpMethod, authenticationHttpHeaders, authenticationBody))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AuthenticationException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while calling the remote HTTP identity provider {}", ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<HttpResponse<Buffer>> requestHandler = RxJava2Adapter.monoToSingle(processRequest_migrated(templateEngine, readUserURI, readUserHttpMethod, readUserHttpHeaders, readUserBody))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when loading pre-authenticated user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(ex));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(responseHandler);
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("johndoe")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("johndoe")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("johndoe@mail.com")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("johndoe@mail.com")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.update_migrated("123456789", user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.update_migrated("123456789", user)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userProvider.delete_migrated("123456789")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userProvider.delete_migrated("123456789")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, auth));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM))).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form)).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(token, authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).flatMap
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Map<String, Object>>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError((error)->LOGGER.error("Unable to initialize Database", error))).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.empty());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Connection, Single<User>>)(cnx)->{
    return RxJava2Adapter.monoToSingle(selectUserByUsername_migrated(cnx, user.getUsername()).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<User>>toJdkFunction((isEmpty)->{
        if (!isEmpty) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
        } else {
            String sql;
            Object[] args;
            if (configuration.isUseDedicatedSalt()) {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
                args = new Object[6];
                byte[] salt = createSalt();
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
                args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
                args[4] = user.getEmail();
                args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            } else {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
                args = new Object[5];
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
                args[3] = user.getEmail();
                args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            }
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
        }
    }).apply(x))))).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe());
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(selectUserByUsername_migrated(cnx, user.getUsername()).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x))))).doFinally
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Single<User>>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)));
    }
    ((DefaultUser)updateUser).setId(id);
    return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Completable>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(connection, sql, args)).doFinally
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("bob")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("user01@acme.com")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("unknown")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("unknown@acme.com")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("userToUpdate")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.update_migrated("unknown", user)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userProvider.delete_migrated(createdUser.getId())).blockingGet
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("userToDelete")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userProvider.delete_migrated("unknown")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authenticate_migrated(authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(profile_migrated(accessToken, authentication));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(id, updateUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.countDocuments(query))).first
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(countOperation, auditsOperation, (count,audits)->new Page<>(audits, page, count)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((List<Audit> ident)->RxJava2Adapter.fluxToFlowable(bulk_migrated(ident))))).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable))).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((List<Audit> ident)->RxJava2Adapter.fluxToFlowable(bulk_migrated(ident))))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (List<Audit> ident)->RxJava2Adapter.fluxToFlowable(bulk_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class))).toList()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class))).toList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class))).toList()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class))).toList
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.countDocuments(query))).first(0L)).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.countDocuments(query))).first
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))).doOnError((error)->LOGGER.error("Error during bulk loading", error)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((List<Audit> ident)->RxJava2Adapter.fluxToFlowable(JdbcAuditReporter.this.bulk_migrated(ident))))).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error))).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((List<Audit> ident)->RxJava2Adapter.fluxToFlowable(JdbcAuditReporter.this.bulk_migrated(ident))))).doOnError
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (List<Audit> ident)->RxJava2Adapter.fluxToFlowable(JdbcAuditReporter.this.bulk_migrated(ident))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationHistogram", criteria, Type.DATE_HISTO)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationGroupBy", criteria, Type.GROUP_BY)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 20)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 5)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 1, 5)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(auditReporter.findById_migrated(audit.getReferenceType(), audit.getReferenceId(), audit.getId())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        final String otpCode = TOTP.generateTOTP(SharedSecret.base32Str2Hex(enrolledFactor.getSecurity().getValue()));
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(endUserAuthentication).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(userAuthenticationManager.connect_migrated(user));
})).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(endUserAuthentication).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userAuthenticationManager.connect_migrated(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviders)).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList()).subscribe
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviders)).flatMapMaybe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(jwtService.encode_migrated(stateJwt, certificateManager.defaultCertificateProvider()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(jwtService.encode_migrated(stateJwt, certificateManager.defaultCertificateProvider()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
    if (HttpMethod.GET == request.getMethod()) {
        return request.getUri();
    } else {
        final Map<String, String> queryParams = getParams(request.getBody());
        queryParams.put(ACTION_KEY, request.getUri());
        return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
    }
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(signInURL).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | saveFactor(endUser, RxJava2Adapter.monoToSingle(factorProvider.changeVariableFactorSecurity_migrated(enrolledFactor)), (fh)->{
    if (fh.failed()) {
        logger.error("An error occurs while saving enrolled factor for the current user", fh.cause());
        handleException(routingContext);
        return;
    }
    routingContext.session().remove(ConstantKeys.ENROLLED_FACTOR_ID_KEY);
    routingContext.session().remove(ConstantKeys.ENROLLED_FACTOR_SECURITY_VALUE_KEY);
    routingContext.session().remove(ConstantKeys.ENROLLED_FACTOR_PHONE_NUMBER);
    routingContext.session().remove(ConstantKeys.ENROLLED_FACTOR_EMAIL_ADDRESS);
    routingContext.session().put(ConstantKeys.STRONG_AUTH_COMPLETED_KEY, true);
    routingContext.session().put(ConstantKeys.MFA_CHALLENGE_COMPLETED_KEY, true);
    doRedirect(routingContext.request().response(), returnURL);
})
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.verify_migrated(factorContext)).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(enrolledFactor).flatMap
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.sendChallenge_migrated(factorContext)).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(providers.entrySet())).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(entry.getValue().enroll_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList()).subscribe
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(providers.entrySet())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (entry)->RxJava2Adapter.monoToSingle(entry.getValue().enroll_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.update_migrated(ReferenceType.DOMAIN, domain.getId(), credentialId, credential)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(parameters, client, getAuthenticatedUser(context))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | query.getUserName() != null ? RxJava2Adapter.monoToSingle(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query.getUserName()).collectList()) : RxJava2Adapter.monoToSingle(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), query.getCredID()).collectList())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | query.getUserName() != null ? RxJava2Adapter.monoToSingle(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query.getUserName()).collectList()) : RxJava2Adapter.monoToSingle(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), query.getCredID()).collectList())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(fetchCredentials).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Authenticator>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, Single<List<Authenticator>>>)(credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), Claims.sub)), RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), StandardClaims.PREFERRED_USERNAME)), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), Claims.sub)), RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), StandardClaims.PREFERRED_USERNAME)), (part1,part2)->{
    MessageDigest md = MessageDigest.getInstance("SHA-512");
    SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
    secureRandom.setSeed(part1.getBytes());
    int nbDevices = secureRandom.nextInt(3) + 1;
    int deviceType = secureRandom.nextInt(2) + 1;
    List<Authenticator> authenticators = new ArrayList<>(nbDevices);
    for (int i = 0; i < nbDevices; i++) {
        byte[] salt = new byte[16];
        secureRandom.nextBytes(salt);
        md.update(salt);
        String initialValue = shiftValue(part2, i);
        Authenticator authenticator = new Authenticator();
        authenticator.setUserName(query.getUserName());
        if (deviceType == 1) {
            if (i < 2) {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            } else {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            }
        } else {
            if (i < 2) {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            } else {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            }
        }
        authenticators.add(authenticator);
    }
    return authenticators;
})
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), Claims.sub)), RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), StandardClaims.PREFERRED_USERNAME)), (part1,part2)->{
    MessageDigest md = MessageDigest.getInstance("SHA-512");
    SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
    secureRandom.setSeed(part1.getBytes());
    int nbDevices = secureRandom.nextInt(3) + 1;
    int deviceType = secureRandom.nextInt(2) + 1;
    List<Authenticator> authenticators = new ArrayList<>(nbDevices);
    for (int i = 0; i < nbDevices; i++) {
        byte[] salt = new byte[16];
        secureRandom.nextBytes(salt);
        md.update(salt);
        String initialValue = shiftValue(part2, i);
        Authenticator authenticator = new Authenticator();
        authenticator.setUserName(query.getUserName());
        if (deviceType == 1) {
            if (i < 2) {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            } else {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            }
        } else {
            if (i < 2) {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            } else {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            }
        }
        authenticators.add(authenticator);
    }
    return authenticators;
})
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
    } else {
        return RxJava2Adapter.fluxToObservable(Flux.fromIterable(credentials)).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
        });
    }
}).apply(y)))).then()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
    } else {
        return RxJava2Adapter.fluxToObservable(Flux.fromIterable(credentials)).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
        });
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(credentials)).flatMapCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    String credID = jwtBuilder.sign(new JWT(Collections.singletonMap(claim, username))).split("\\.")[2];
    emitter.onSuccess(credID);
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(resourceService.findByDomain_migrated(this.domain.getId())).subscribeOn(Schedulers.io())).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(resourceService.findByDomain_migrated(this.domain.getId())).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tokenService.deleteByUserId_migrated(user.getId())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<UserToken>>toJdkFunction((jwt)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(jwt.getSub()).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    })));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userService.findById_migrated(jwt.getSub()).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
    return new UserToken(user, optionalClient.orElse(null), jwt);
})));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | userService.findById_migrated(jwt.getSub()).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
    return new UserToken(user, optionalClient.orElse(null), jwt);
}))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user1));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
    });
}).apply(a)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
    });
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
    });
}).apply(a))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))).defaultIfEmpty(Optional.empty()));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findQuery).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
    });
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
    });
}).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(Optional.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(clientSyncService.findById_migrated(audience).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::monoToCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(idToken, z).map(RxJavaReactorMigrationUtil.toJdkFunction((JWT __)->z))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::maybeToMono
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | final Maybe<AuthenticationProvider> authenticationProviderMaybe = RxJava2Adapter.monoToMaybe(this.identityProviderManager.get_migrated(endUser.getSource()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(new ForgotPasswordParameters(user.getEmail(), false, false), client, mock(io.gravitee.am.identityprovider.api.User.class))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(new ForgotPasswordParameters(user.getEmail(), true, true), client, mock(io.gravitee.am.identityprovider.api.User.class))).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        final String otpCode = generateOTP(enrolledFactor);
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        if (Instant.now().isAfter(Instant.ofEpochMilli(enrolledFactor.getSecurity().getData(FactorDataKeys.KEY_EXPIRE_AT, Long.class)))) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return RxJava2Adapter.monoToSingle(userService.addFactor_migrated(context.getUser().getId(), ef, new DefaultUser(context.getUser())));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.addFactor_migrated(context.getUser().getId(), ef, new DefaultUser(context.getUser())));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(cut.sendChallenge_migrated(factorContext)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(cut.verify_migrated(factorContext)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(cut.verify_migrated(factorContext)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(cut.verify_migrated(factorContext)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single<Page<Audit>> reporter = RxJava2Adapter.monoToSingle(auditReporterManager.getReporter().search_migrated(ReferenceType.DOMAIN, user.getReferenceId(), criteria, page, size))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporter).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(user.getExternalId(), convert(user)));
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.update_migrated(user.getExternalId(), convert(user)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accountService.removeFactor_migrated(user.getId(), factorId, new DefaultUser(user))).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.verify_migrated(new FactorContext(applicationContext, factorData))).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.sendChallenge_migrated(factorContext)).subscribeOn
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Map<String, Object>, Single<String>>)(claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo_migrated(userinfo, client)));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo_migrated(userinfo, client)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<Token>>)(executionContext)->{
    JWT accessToken = createAccessTokenJWT(oAuth2Request, client, endUser, executionContext);
    JWT refreshToken = oAuth2Request.isSupportRefreshToken() ? createRefreshTokenJWT(oAuth2Request, client, endUser, accessToken) : null;
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->tokenEnhancer.enhance_migrated(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess((token)->storeTokens(accessToken, refreshToken, oAuth2Request)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->tokenEnhancer.enhance_migrated(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess((token)->storeTokens(accessToken, refreshToken, oAuth2Request)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<Token>>)(refreshToken1)->{
    if (refreshToken1.getExpireAt().before(new Date())) {
        throw new InvalidGrantException("Refresh token is expired");
    }
    if (!refreshToken1.getClientId().equals(tokenRequest.getClientId())) {
        throw new InvalidGrantException("Refresh token was issued to another client");
    }
    if (refreshToken1.getAdditionalInformation().get("permissions") != null) {
        tokenRequest.setPermissions((List<PermissionRequest>)refreshToken1.getAdditionalInformation().get("permissions"));
    }
    return RxJava2Adapter.monoToSingle(refreshTokenRepository.delete_migrated(refreshToken1.getValue()).then(Mono.just(refreshToken1)));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(refreshTokenRepository.delete_migrated(refreshToken1.getValue()).then(Mono.just(refreshToken1)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, endUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(oAuth2Request, client, endUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (certificateProvider)->RxJava2Adapter.fluxToFlowable(certificateProvider.getProvider().keys_migrated())
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (provider)->RxJava2Adapter.fluxToFlowable(provider.getProvider().privateKey_migrated())
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationRequest, user));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(code)).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(accessToken.getToken()));
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(refreshTokenRepository.delete_migrated(accessToken.getRefreshToken())));
    }
    return deleteAccessTokenAction;
})).then
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(code)).flatMapCompletable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable deleteAccessTokenAction = RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(accessToken.getToken()))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(refreshTokenRepository.delete_migrated(accessToken.getRefreshToken())));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(deleteAccessTokenAction).then
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(authorizationRequest, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(authorizationRequest, user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(prepareResponse_migrated(authorizationRequest, client, endUser))).flatMap
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(prepareResponse_migrated(authorizationRequest, client, endUser)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(oAuth2Request, client, user, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, user, executionContext));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(oAuth2Request, client, user, executionContext));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(createRequest(context), client)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userAuthenticationManager.loadPreAuthenticatedUser_migrated(subject, tokenRequest)).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userAuthenticationManager.loadPreAuthenticatedUser_migrated(subject, tokenRequest)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(e, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, user.orElse(null)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(e, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (user)->RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, user.orElse(null)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    policyChainProcessorFactory.create(resolve(rules), executionContext).handler((executionContext1)->emitter.onComplete()).errorHandler((processorFailure)->emitter.onError(new PolicyChainException(processorFailure.message(), processorFailure.statusCode(), processorFailure.key(), processorFailure.parameters(), processorFailure.contentType()))).handle(executionContext);
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(client, approvals, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(saveConsent(client, approvals, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<AuthorizationResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AuthorizationCode, Single<AuthorizationResponse>>)(code)->{
    HybridResponse hybridResponse = new HybridResponse();
    hybridResponse.setRedirectUri(authorizationRequest.getRedirectUri());
    hybridResponse.setState(authorizationRequest.getState());
    hybridResponse.setCode(code.getCode());
    OAuth2Request oAuth2Request = authorizationRequest.createOAuth2Request();
    oAuth2Request.setGrantType(GrantType.HYBRID);
    oAuth2Request.setSubject(endUser.getId());
    oAuth2Request.getContext().put(Claims.c_hash, code.getCode());
    oAuth2Request.getContext().put(Claims.s_hash, authorizationRequest.getState());
    switch (authorizationRequest.getResponseType()) {
    case ResponseType.CODE_ID_TOKEN: 
        return RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
            hybridResponse.setIdToken(idToken);
            return hybridResponse;
        })));
    
    default: 
        return RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
            hybridResponse.setAccessToken(accessToken);
            return hybridResponse;
        })));
    
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
    hybridResponse.setIdToken(idToken);
    return hybridResponse;
})));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    hybridResponse.setAccessToken(accessToken);
    return hybridResponse;
})));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.bulkWrite_migrated(accessTokens)).retryWhen
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client)).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client));
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client)).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client)).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client));
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client)).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteAccessToken_migrated(accessToken.getValue()));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(tokenService.deleteAccessToken_migrated(accessToken.getValue()));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteRefreshToken_migrated(refreshToken.getValue()));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(tokenService.deleteRefreshToken_migrated(refreshToken.getValue()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(resourceService.deleteAccessPolicy_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicy)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | consentInformation = RxJava2Adapter.monoToSingle(userConsentService.getConsentInformation_migrated(requestedConsents))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | consentInformation = RxJava2Adapter.monoToSingle(userConsentService.checkConsent_migrated(client, user).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<String>, Single<List<Scope>>>)(approvedConsent)->{
    if (approvedConsent.containsAll(requestedConsents)) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
    }
    Set<String> requiredConsent = requestedConsents.stream().filter((requestedScope)->!approvedConsent.contains(requestedScope)).collect(Collectors.toSet());
    return RxJava2Adapter.monoToSingle(userConsentService.getConsentInformation_migrated(requiredConsent));
}).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<String>, Single<List<Scope>>>)(approvedConsent)->{
    if (approvedConsent.containsAll(requestedConsents)) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
    }
    Set<String> requiredConsent = requestedConsents.stream().filter((requestedScope)->!approvedConsent.contains(requestedScope)).collect(Collectors.toSet());
    return RxJava2Adapter.monoToSingle(userConsentService.getConsentInformation_migrated(requiredConsent));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userConsentService.getConsentInformation_migrated(requiredConsent));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(consentInformation).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(toPatch, request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(toPatch, request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(toUpdate, request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(toUpdate, request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(delete_migrated(toDelete));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(delete(toDelete));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(clientId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(clientId, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(client));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(clientId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(clientId, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType()))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->RxJava2Adapter.monoToSingle(flow.run_migrated(authorizationRequest, client, endUser))).singleOrError());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType()))).switchIfEmpty
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (flow)->RxJava2Adapter.monoToSingle(flow.run_migrated(authorizationRequest, client, endUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return RxJava2Adapter.monoToMaybe(validateSignatureWithHMAC_migrated(jwt));
        } else {
            return RxJava2Adapter.monoToMaybe(validateSignatureWithPublicKey_migrated(jwt));
        }
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(validateSignatureWithHMAC_migrated(jwt));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(validateSignatureWithPublicKey_migrated(jwt));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | requestObject = RxJava2Adapter.monoToMaybe(handleRequestObjectValue_migrated(context))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | requestObject = RxJava2Adapter.monoToMaybe(handleRequestObjectURI_migrated(context))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObject).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(tokenService.introspect_migrated(introspectionRequest.getToken()).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(new IntrospectionResponse(false)))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.introspect_migrated(introspectionRequest.getToken()).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.introspect_migrated(introspectionRequest.getToken()).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(new IntrospectionResponse(false))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(this.resourceService.listByDomainAndClientAndUser_migrated(domain.getId(), client.getId(), accessToken.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect(JsonArray::new, JsonArray::add)).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(this.resourceService.listByDomainAndClientAndUser_migrated(domain.getId(), client.getId(), accessToken.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(this.resourceService.delete_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource_id)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PushedAuthorizationRequest, Single<JWT>>)(Function<PushedAuthorizationRequest, Single<JWT>>)(req)->{
    if (req.getParameters() != null && req.getExpireAt() != null && req.getExpireAt().after(new Date())) {
        final String request = req.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST);
        if (request != null) {
            return RxJava2Adapter.monoToSingle(readRequestObject_migrated(client, request));
        } else if (this.domain.usePlainFapiProfile()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")));
        } else {
            final JWTClaimsSet.Builder builder = new JWTClaimsSet.Builder().audience(oidcMetadata.getIssuer()).expirationTime(req.getExpireAt());
            req.getParameters().toSingleValueMap().forEach(builder::claim);
            return RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())));
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(readRequestObject_migrated(client, request));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | Completable registrationValidation = RxJava2Adapter.monoToCompletable(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->{
    String clientId = jwtClientAssertion(par) ? getClientIdFromAssertion(par) : par.getParameters().getFirst(Parameters.CLIENT_ID);
    if (!client.getClientId().equals(clientId)) {
        throw new InvalidRequestException();
    }
    if (par.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST_URI) != null) {
        throw new InvalidRequestException("request_uri not authorized");
    }
})))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | registrationValidation = RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->readRequestObject_migrated(client, request).map(RxJavaReactorMigrationUtil.toJdkFunction((JWT jwt)->checkRedirectUriParameter(jwt, client))))).then())
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->checkRedirectUriParameter(par, client)))));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<String>>toJdkFunction((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt id_token")));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(throwable));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt id_token")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<String>>toJdkFunction((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt userinfo")));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(throwable));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt userinfo")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client != null ? RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client)) : RxJava2Adapter.monoToMaybe(jwkService.getDomainPrivateKeys_migrated())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | client != null ? RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client)) : RxJava2Adapter.monoToMaybe(jwkService.getDomainPrivateKeys_migrated())
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<String>>toJdkFunction((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt authorization")));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(throwable));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt authorization")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk))))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(parService.deleteRequestUri_migrated(uriIdentifier)).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(parService.deleteRequestUri_migrated(uriIdentifier)).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(Flux.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))).flatMapSingle((tokenGranter)->RxJava2Adapter.monoToSingle(tokenGranter.grant_migrated(tokenRequest, client))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Flux.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (tokenGranter)->RxJava2Adapter.monoToSingle(tokenGranter.grant_migrated(tokenRequest, client))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, user.orElse(null)))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (user)->RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, user.orElse(null)))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(tokenRequest.getClaimToken(), client).flatMap((e)->userAuthenticationManager.loadPreAuthenticatedUser_migrated(e.getSub(), tokenRequest)).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(tokenRequest.getClaimToken(), client).flatMap((e)->userAuthenticationManager.loadPreAuthenticatedUser_migrated(e.getSub(), tokenRequest)).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<TokenRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<PermissionRequest>, Single<TokenRequest>>)(permissionRequests)->{
    List<String> resourceIds = permissionRequests.stream().map(PermissionRequest::getResourceId).collect(Collectors.toList());
    return RxJava2Adapter.monoToSingle(resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment_migrated(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT_migrated(tokenRequest, client, endUser, resolvedPermissionRequests)).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
        tokenRequest.setPermissions(extendedPermissionRequests);
        return tokenRequest;
    })));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment_migrated(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT_migrated(tokenRequest, client, endUser, resolvedPermissionRequests)).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
    tokenRequest.setPermissions(extendedPermissionRequests);
    return tokenRequest;
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<PermissionRequest>>>toJdkFunction((throwable)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (throwable)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<OAuth2Request>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Rule>, Single<OAuth2Request>>)(rules)->{
    if (rules.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
    }
    ExecutionContext simpleExecutionContext = new SimpleExecutionContext(oAuth2Request, oAuth2Request.getHttpResponse());
    ExecutionContext executionContext = executionContextFactory.create(simpleExecutionContext);
    executionContext.setAttribute("client", new ClientProperties(client));
    if (endUser != null) {
        executionContext.setAttribute("user", new UserProperties(endUser));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault(oAuth2Request)).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<OAuth2Request>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))).apply(err))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault(oAuth2Request)).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<OAuth2Request>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))).apply(err))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault(oAuth2Request)).onErrorResume
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<OAuth2Request>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((err2)->{
    if (err2 instanceof InvalidRequestObjectException) {
        return RxJava2Adapter.monoToSingle(Mono.error(err2));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(err2));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<JWT>>toJdkFunction((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<RequestObject, Single<JWT>>)(Function<RequestObject, Single<JWT>>)(req)->{
    if (req.getExpireAt().after(new Date())) {
        return RxJava2Adapter.monoToSingle(readRequestObject_migrated(req.getPayload(), client, false));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(readRequestObject_migrated(req.getPayload(), client, false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend()).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<JWT>>)(Function<String, Single<JWT>>)(s)->RxJava2Adapter.monoToSingle(readRequestObject_migrated(s, client, false))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (s)->RxJava2Adapter.monoToSingle(readRequestObject_migrated(s, client, false))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(requestObject));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(requestObject));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<RequestObject, SingleSource<RequestObjectRegistrationResponse>>toJdkFunction((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return RxJava2Adapter.monoToSingle(Mono.just(response));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(response));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(jwt));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<Token>>)(idToken)->{
    Map<String, Object> additionalInformation = new HashMap<>(accessToken.getAdditionalInformation());
    additionalInformation.put(ResponseType.ID_TOKEN, idToken);
    accessToken.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext((Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userAuthenticationManager.loadPreAuthenticatedUser_migrated(tokenRequest.getSubject(), tokenRequest)).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userAuthenticationManager.loadPreAuthenticatedUser_migrated(tokenRequest.getSubject(), tokenRequest)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(extensionGrantProvider.grant_migrated(convert(tokenRequest)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantProvider.grant_migrated(convert(tokenRequest)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v))))).onErrorResumeNext
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
})).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(user));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.bulkWrite_migrated(refreshTokens)).retryWhen
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), user.getId(), client.getClientId()).filter((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
}).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeApproval::getScope))).collect(HashSet::new, Set::add));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), user.getId(), client.getClientId()).filter((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
}).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeApproval::getScope))).collect
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(saveConsent_migrated(client, approvals, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(oAuth2Request, client, user, executionContext));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<String>>)(executionContext1)->{
    IDToken idToken = createIDTokenJWT(oAuth2Request, client, user, executionContext);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
        if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
            oAuth2Request.getContext().forEach((claimName,claimValue)->{
                if (claimValue != null) {
                    CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                    String digestAlgorithm = defaultDigestAlgorithm;
                    if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                        digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                    }
                    idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
                }
            });
        }
        return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
    })).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
        if (client.getIdTokenEncryptedResponseAlg() != null) {
            return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
        }
        return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
    }).apply(z)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
})).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<User>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(userService.findById_migrated(jwt.getSub()).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
        if (!user.getReferenceId().equals(domain.getId())) {
            throw new UserNotFoundException(jwt.getSub());
        }
        return user;
    })));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.findById_migrated(jwt.getSub()).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    if (!user.getReferenceId().equals(domain.getId())) {
        throw new UserNotFoundException(jwt.getSub());
    }
    return user;
})));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(client));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(client));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(clientId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(client1));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(request, basePath));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(toPatch, request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(toUpdate, request, basePath));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(delete_migrated(toDelete));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(this.clientService.delete_migrated(toDelete.getId())).toSingleDefault(toDelete));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(this.clientService.delete_migrated(toDelete.getId())).toSingleDefault
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(Client ident)->RxJava2Adapter.monoToSingle(clientService.create_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Client ident)->RxJava2Adapter.monoToSingle(clientService.create_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<DynamicClientRegistrationRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<DynamicClientRegistrationRequest, Single<DynamicClientRegistrationRequest>>)(DynamicClientRegistrationRequest ident)->RxJava2Adapter.monoToSingle(enforceWithSoftwareStatement_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (DynamicClientRegistrationRequest ident)->RxJava2Adapter.monoToSingle(enforceWithSoftwareStatement_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add)).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(request.getRedirectUris().get()).filter((String redirectUri)->!allowedRedirectUris.contains(redirectUri))).collect(ArrayList<String>::new, ArrayList::add)).flatMap
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(request.getRedirectUris().get()).filter((String redirectUri)->!allowedRedirectUris.contains(redirectUri))).collect
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((ArrayList<String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(request));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(request.getJwksUri().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))).flatMapSingle((jwkSet)->{
    return RxJava2Adapter.monoToSingle(Mono.just(request));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(request.getJwksUri().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(request));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter((accessTokens)->accessTokens != null && !accessTokens.isEmpty())).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty())).subscribe
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(umaTokenGranter.resolveRequest_migrated(tokenRequest, client, null)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.getAll_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationCodeService.create_migrated(authorizationRequest, user)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authorizationCodeService.remove_migrated(authorizationCode.getCode(), client)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authorizationCodeService.remove_migrated(authorizationCode.getCode(), client)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authorizationCodeService.remove_migrated(authorizationCode.getCode(), client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.readFromURI_migrated("invalideuri", createClient(), new OpenIDProviderMetadata())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, client, new OpenIDProviderMetadata())).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated("", null, null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated("unsupported", null, null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, "", null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenEnhancer.enhance_migrated(accessToken, oAuth2Request, client, null, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenEnhancer.enhance_migrated(accessToken, oAuth2Request, client, null, null)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just((String)invocation.getArguments()[0]));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(Collections.emptyList(), executionContext)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(null, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(new DynamicClientRegistrationRequest(), BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(httpResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(httpResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(httpResponse)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.patch_migrated(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.patch_migrated(new Client(), request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.update_migrated(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.update_migrated(new Client(), request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.delete_migrated(new Client())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.renewSecret_migrated(toRenew, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientService.findById_migrated("my-client")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientService.findById_migrated("my-client")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientService.findById_migrated("my-client")).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.create_migrated(new Client())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.create_migrated(toCreate)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.create_migrated(toCreate)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.update_migrated(new Client())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.update_migrated(toUpdate)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.renewClientSecret_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.renewClientSecret_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(clientService.renewClientSecret_migrated(DOMAIN, "my-client")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(requestObjectService.readRequestObject_migrated(request, client, false)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(requestObjectService.readRequestObject_migrated(request, client, false)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null, executionContext)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated(jwt, new Client())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated(JWT, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(jwt, new Client())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(JWT, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(authorizationRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(authorizationRequest, client, user)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.refresh_migrated("encoded", tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated("blabla")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(JWKS_URI)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(JWKS_URI)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(JWKS_URI)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, "expectedKid")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, "expectedKid")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(new Client())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | when(request.rxSend()).thenReturn(RxJava2Adapter.monoToSingle(Mono.just(response)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, null)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.RSA_KEY_ENCRYPTION())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.CURVE_KEY_ENCRYPTION())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.parse("none")))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128GCM))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128CBC_HS256))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192GCM))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192CBC_HS384))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256GCM))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256CBC_HS512))).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(rsaSet, JWKFilter.RSA_KEY_ENCRYPTION())).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION())).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwkService.getKeys_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwkService.getKeys_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwkService.getKeys_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(group, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(groupId, group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(groupId, group, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(groupId, patchOp, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(groupId, patchOp, baseUrl));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(groupId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(groupId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(user, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(userId, user, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(userId, user, baseUrl));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(userId, patchOp, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(patch(userId, patchOp, baseUrl));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(userId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ListResponse<Group>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find groups by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex)));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap((z)->setMembers_migrated(z, baseUrl))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID", groupId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap((z)->setMembers_migrated(z, baseUrl))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof SCIMException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to router a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to router a group", ex)));
    }
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to router a group", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(groupId, group, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Group group1)->{
    if (!y.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return y;
})).defaultIfEmpty(y)).flatMapSingle((io.gravitee.am.model.Group irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Group group1)->{
    if (!y.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return y;
})).defaultIfEmpty(y)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (io.gravitee.am.model.Group irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (io.gravitee.am.gateway.handler.scim.model.Group v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.gateway.handler.scim.model.Group group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(y.getId());
    groupToUpdate.setReferenceType(y.getReferenceType());
    groupToUpdate.setReferenceId(y.getReferenceId());
    groupToUpdate.setCreatedAt(y.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof SCIMException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to update a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
    }
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(groupId, patchOp, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return RxJava2Adapter.monoToSingle(update_migrated(groupId, objectMapper.treeToValue(node, Group.class), baseUrl));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(groupId, objectMapper.treeToValue(node, Group.class), baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error has occurred when trying to delete group: {}", groupId, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex)));
    }
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(groupId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->groupRepository.delete_migrated(groupId)).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
    }
}));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->groupRepository.delete_migrated(groupId)).then()).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(groupId)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated(userId)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filter != null ? RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain.getId(), FilterCriteria.convert(filter), page, size)) : RxJava2Adapter.monoToSingle(userRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId(), page, size))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | filter != null ? RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain.getId(), FilterCriteria.convert(filter), page, size)) : RxJava2Adapter.monoToSingle(userRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId(), page, size))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(findUsers).flatMap
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ListResponse<User>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users for the security domain {}", domain.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap(this::setGroups_migrated)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", userId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap(this::setGroups_migrated)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(user, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userModel).then(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
    }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err)))));
})).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userModel).then(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
    }
    if (ex instanceof SCIMException || ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(userId, user, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
            } else {
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }).apply(err)))));
    }))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
        } else {
            return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err)))));
}))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
        } else {
            return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err)))));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err)))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof SCIMException || ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    if (ex instanceof AbstractNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
    }
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(patch_migrated(userId, patchOp, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
    }
    return RxJava2Adapter.monoToSingle(update_migrated(userId, userToPatch, baseUrl));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(userId, userToPatch, baseUrl));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error has occurred when trying to patch user: {}", userId, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex)));
    }
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId))).onErrorResumeNext((Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userId));
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId))).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(newUser, "/")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(newUser, "/")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(newUser, "/")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser.getId(), scimUser, "/")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.patch_migrated(userId, patchOp, "/")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(newGroup, "/")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(newGroup, "https://mydomain/scim/Groups")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(newGroup, "/")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.patch_migrated(groupId, patchOp, "/")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(domain.getId(), userId)).collect(HashSet::new, Set::add));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(domain.getId(), userId)).collect
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), userId, clientId)).collect(HashSet::new, Set::add));
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), userId, clientId)).collect
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((principal)->userService.revokeConsent_migrated(userId, consentId, principal)).then()).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Set<ScopeApproval>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, Single<Set<ScopeApproval>>>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId, optClient.get()));
    }
    return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId, optClient.get()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.just(Optional.ofNullable(clientId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
    }
    return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
}).apply(y)))).then()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
    }
    return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.consents_migrated(userId)).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.consent_migrated("consentId")).test
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.consent_migrated("consentId")).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.revokeConsents_migrated(userId)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.revokeConsent_migrated(userId, consentId)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceProviderService.metadata_migrated("provider-id", "https://idp.example.com")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceProviderService.metadata_migrated("provider-id", "https://idp.example.com")).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceProviderService.metadata_migrated("provider-id", "https://idp.example.com")).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(deployment).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.rxConnect(port, host).doFinally(client::close)).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        Verification verification = Verification.creator(configuration.getSid(), target.getTarget(), channel).create();
        LOGGER.debug("Twilio Verification code asked with ID \'{}\'", verification.getSid());
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
}));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        VerificationCheck verification = VerificationCheck.creator(configuration.getSid(), challenge.getCode()).setTo(challenge.getTarget()).create();
        LOGGER.debug("Twilio Verification code with ID \'{}\' verified with status \'{}\'", verification.getSid(), verification.getStatus());
        if (!APPROVED.equalsIgnoreCase(verification.getStatus())) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        TfaStartAuthenticationResponse sendCodeResponse = this.tfaApi.sendTfaPinCodeOverSms(true, new TfaStartAuthenticationRequest().applicationId(applicationId).messageId(messageId).from("InfoSMS").to(this.to));
        boolean isSuccessful = sendCodeResponse.getSmsStatus().equals("MESSAGE_SENT");
        if (!isSuccessful) {
            emitter.onError(new SendChallengeException("Message not sent"));
        } else {
            this.pinId = sendCodeResponse.getPinId();
            LOGGER.debug("Infobip Verification code asked with ID \'{}\'", sendCodeResponse.getPinId());
            emitter.onComplete();
        }
    } catch (ApiException e) {
        this.LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
}));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    String pin = challenge.getCode();
    try {
        TfaVerifyPinResponse verifyResponse = this.tfaApi.verifyTfaPhoneNumber(pinId, new TfaVerifyPinRequest().pin(pin));
        boolean verified = verifyResponse.getVerified();
        LOGGER.debug("Infobip Verification code with ID \'{}\' verified with status \'{}\'", this.pinId, verified);
        if (!verified) {
            emitter.onError(new InvalidCodeException("Challenger not verified"));
        } else {
            emitter.onComplete();
        }
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token))).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((throwable)->{
    LOGGER.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", null, null))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        emitter.onSuccess(extensionGrantPluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all extension grant plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all extension grant plugins", ex));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(extensionGrantPluginId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin extensionGrant = extensionGrantPluginManager.findById(extensionGrantPluginId);
        if (extensionGrant != null) {
            emitter.onSuccess(convert(extensionGrant));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get extension grant plugin : {}", extensionGrantPluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get extension grant plugin : " + extensionGrantPluginId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = extensionGrantPluginManager.getSchema(extensionGrantPluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for extension grant plugin {}", extensionGrantPluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for extension grant plugin " + extensionGrantPluginId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(newsletterURI + taglinesPath).rxSend()).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((Domain ident)->RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(ident)))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count()).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((Domain ident)->RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(ident)))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher(this::prepareAETriggers_migrated)).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count()).subscribe
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher(this::prepareAETriggers_migrated)).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher(this::prepareAETriggers_migrated)).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(alertTriggerService.getById_migrated(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger_migrated(domain, alertTrigger)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)(Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(v)))))).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToSingle(alertTriggerService.getById_migrated(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger_migrated(domain, alertTrigger)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)(Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(v))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)(Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled())).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria_migrated(domain.getId(), alertTriggerCriteria).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<AlertTrigger, Single<Trigger>>toJdkFunction((alertTrigger)->RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger))).apply(e))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count()).subscribe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled())).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<AlertTrigger, Single<Trigger>>toJdkFunction((alertTrigger)->RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (alertTrigger)->RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.defer(()->{
    triggerProvider.register(trigger);
    LOGGER.debug("Alert trigger [{}] has been pushed to alert system.", trigger.getId());
    return RxJava2Adapter.monoToSingle(Mono.just(trigger));
}));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(trigger));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<AlertTrigger, Single<Trigger>>toJdkFunction((alertTrigger)->RxJava2Adapter.monoToSingle(this.prepareAETrigger_migrated(domain, alertTrigger))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (alertTrigger)->RxJava2Adapter.monoToSingle(this.prepareAETrigger_migrated(domain, alertTrigger))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(resolveDomainProperties_migrated(value).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainProperties)->values.put(key, domainProperties)))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(resolveApplicationProperties_migrated(value).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((appProperties)->values.put(key, appProperties)))))
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(properties));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(properties));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(policyPluginManager.getAll())).map((policyPlugin)->convert(policyPlugin, expand)).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(policyPluginManager.getAll())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(policyId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        PolicyPlugin policy = convert(policyPluginManager.get(policyId));
        if (policy != null) {
            emitter.onSuccess(policy);
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get policy plugin : {}", policyId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get policy plugin : " + policyId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = policyPluginManager.getSchema(policyId);
        if (schema != null) {
            JsonNode schemaNode = objectMapper.readTree(schema);
            if (schemaNode.has("properties")) {
                ObjectNode properties = (ObjectNode)schemaNode.get("properties");
                properties.remove("scope");
                properties.remove("onResponseScript");
                properties.remove("onRequestContentScript");
                properties.remove("onResponseContentScript");
            }
            emitter.onSuccess(objectMapper.writeValueAsString(schemaNode));
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for policy plugin " + policyId, e));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String icon = policyPluginManager.getIcon(policyId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for policy plugin " + policyId, e));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String documentation = policyPluginManager.getDocumentation(policyId);
        if (documentation != null) {
            emitter.onSuccess(documentation);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get documentation for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get documentation for policy plugin " + policyId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(policyId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(policyId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
})).block
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated()).blockingForEach
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono((userProvider1 != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider1)) : RxJava2Adapter.monoToMaybe(Mono.empty()));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider1 != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider1)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (userProvider1 != null) ? RxJava2Adapter.monoToMaybe(Mono.just(userProvider1)) : RxJava2Adapter.monoToMaybe(Mono.empty())
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(referenceType, referenceId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(referenceType, referenceId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(reporterService.findAll_migrated()).blockingForEach
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(Schedulers.boundedElastic())).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(deployment).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, newUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(createOrUpdate(referenceType, referenceId, newUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(referenceType, referenceId, id, updateUser, principal));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, userId));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, userId, null));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(delete(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<List<Scope>>>)(scopes)->{
    if (scopes.getData().isEmpty()) {
        logger.info("No scope found for domain id[{}] name[{}]. Upgrading...", domain.getId(), domain.getName());
        return RxJava2Adapter.monoToSingle(createAppScopes_migrated(domain).flatMap((irrelevant)->createRoleScopes_migrated(domain)));
    }
    logger.info("No scope to update, skip upgrade");
    return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createAppScopes_migrated(domain).flatMap((irrelevant)->createRoleScopes_migrated(domain)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | (z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))).apply(z)), BackpressureStrategy.BUFFER)
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((role)->role.getOauthScopes() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((role)->role.getOauthScopes() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable
1 | RxJava2Adapter | observableToFlux | METHOD_INVOCATION | (z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))).apply(z)), BackpressureStrategy.BUFFER)
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | (role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<Scope>>)(scopes)->{
    Optional<Scope> optScope = scopes.getData().stream().filter((scope)->scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info("Create a new scope key[{}] for domain[{}]", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription("Default description for scope " + scopeKey);
        return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, scope));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, scope));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
                Application client = optClient.orElse(null);
                newUser.setDomain(domain.getId());
                newUser.setClient(client != null ? client.getId() : null);
                newUser.setInternal(true);
                if (newUser.isPreRegistration()) {
                    newUser.setPassword(null);
                    newUser.setRegistrationCompleted(false);
                    newUser.setEnabled(false);
                } else {
                    String password = newUser.getPassword();
                    if (password != null && isInvalidUserPassword(password, client, domain)) {
                        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
                    }
                    newUser.setRegistrationCompleted(true);
                    newUser.setEnabled(true);
                    newUser.setDomain(domain.getId());
                }
                return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    return newUser;
                })).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
                    if (ex instanceof UserAlreadyExistsException) {
                        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, io.gravitee.am.service.model.NewUser>toJdkFunction((empty)->{
                            if (!empty) {
                                throw new UserAlreadyExistsException(newUser.getUsername());
                            } else {
                                newUser.setPassword(null);
                                newUser.setExternalId(idpUser.getId());
                                newUser.setUsername(idpUser.getUsername());
                                return newUser;
                            }
                        }))));
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.error(ex));
                    }
                }).apply(err))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
                    User user = transform(newUser1);
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                        user.setRegistrationAccessToken(getUserRegistrationToken(user));
                    }
                    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
                }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.just(user));
                    }
                }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
            });
        });
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
})).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, io.gravitee.am.service.model.NewUser>toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}).apply(err))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
}).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, io.gravitee.am.service.model.NewUser>toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}).apply(err))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, io.gravitee.am.service.model.NewUser>toJdkFunction((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
}).apply(x)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
            }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }).apply(err))));
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
        }).apply(a)))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))));
    });
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(a)))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        user.setPassword(password);
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        user.setPassword(password);
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToCompletable(loginAttemptService.reset_migrated(criteria));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(loginAttemptService.reset_migrated(criteria));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess((Optional<Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((Optional<Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess((Optional<Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((Optional<Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).then());
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(factors);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(oldUser)->{
    User userToUpdate = new User(oldUser);
    if (revoke) {
        if (userToUpdate.getRoles() != null) {
            userToUpdate.getRoles().removeAll(roles);
        }
    } else {
        userToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable))));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.empty());
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(client).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(domain, client))).switchIfEmpty(Mono.error(new ClientNotFoundException(client))).map(RxJavaReactorMigrationUtil.toJdkFunction((app1)->{
    if (!domain.equals(app1.getDomain())) {
        throw new ClientNotFoundException(client);
    }
    return app1;
})));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, id, updateUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(getUserService().update_migrated(user));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(delete_migrated(referenceType, referenceId, userId, principal));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(Optional<UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user)))).doOnError
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(Optional<UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))).doOnComplete
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(Optional<UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.error(ex));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(Optional<UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then())
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then())
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findByDomain_migrated(domain, page, size));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, page, size));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(create_migrated(domain, newUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(create(domain, newUser, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateUser, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, userId, roles, principal));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(update_migrated(domain, id, updateUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(update(domain, id, updateUser, null));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(revokeRoles_migrated(referenceType, referenceId, userId, roles));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(revokeRoles(referenceType, referenceId, userId, roles, null));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(certificateService.findAll_migrated()).blockingIterable
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(certificateProvider == null ? RxJava2Adapter.monoToMaybe(Mono.empty()) : RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider == null ? RxJava2Adapter.monoToMaybe(Mono.empty()) : RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | certificateProvider == null ? RxJava2Adapter.monoToMaybe(Mono.empty()) : RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.monoToSingle(createOrUpdateSystemScopes_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createSystemScope_migrated(domain.getId(), scope))).lastOrError()).map
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (scope)->RxJava2Adapter.monoToSingle(createSystemScope_migrated(domain.getId(), scope))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(domain, systemScope.getKey()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optScope)->{
    if (!optScope.isPresent()) {
        logger.info("Create a new system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        NewSystemScope scope = new NewSystemScope();
        scope.setKey(systemScope.getKey());
        scope.setClaims(systemScope.getClaims());
        scope.setName(systemScope.getLabel());
        scope.setDescription(systemScope.getDescription());
        scope.setDiscovery(systemScope.isDiscovery());
        return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, scope));
    } else if (shouldUpdateSystemScope(optScope, systemScope)) {
        logger.info("Update a system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        final Scope existingScope = optScope.get();
        UpdateSystemScope scope = new UpdateSystemScope();
        scope.setName(existingScope.getName() != null ? existingScope.getName() : systemScope.getLabel());
        scope.setDescription(existingScope.getDescription() != null ? existingScope.getDescription() : systemScope.getDescription());
        scope.setClaims(systemScope.getClaims());
        scope.setExpiresIn(existingScope.getExpiresIn());
        scope.setDiscovery(systemScope.isDiscovery());
        return RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, optScope.get().getId(), scope));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(domain, systemScope.getKey()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, scope));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, optScope.get().getId(), scope));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(policyRepository.collectionExists_migrated().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
        }).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))).then()).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
        }).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
}).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
}).apply(z)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows.values())).flatMapCompletable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, domain, flow)).toCompletable
1 | RxJava2Adapter | METHOD_REFERENCE | RxJava2Adapter::completableToMono
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(id));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(id));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(ADMIN_DOMAIN)).blockingGet
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).filter((membership)->membership.getMemberType() == MemberType.USER)).blockingFirst
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).count()).map
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).count
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleService.createOrUpdateSystemRoles_migrated()).blockingGet
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(reporterId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(reporterId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (x,y)->RxJava2Adapter.monoToMaybe(Mono.error(new NotImplementedException()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(createOrUpdate_migrated(referenceType, referenceId, newUser));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(userService.update_migrated(existingUser));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userService.update_migrated(existingUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(userService.update_migrated(existingUser));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
})))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            newUser.setDomain(null);
            newUser.setClient(null);
            newUser.setInternal(true);
            String password = newUser.getPassword();
            if (password == null || !passwordValidator.isValid(password)) {
                return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
            userToPersist.setReferenceId(organization.getId());
            userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
            return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
                userToPersist.setId(RandomString.generate());
                userToPersist.setExternalId(userToPersist.getId());
                return userToPersist;
            })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
                return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
            }).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
        });
    }
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
}).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
}).apply(a)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<io.gravitee.plugin.notifier.NotifierPlugin, Single<NotifierPlugin>>toJdkFunction((plugin)->RxJava2Adapter.monoToSingle(convert_migrated(plugin, expand))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (plugin)->RxJava2Adapter.monoToSingle(convert_migrated(plugin, expand))
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(notifierId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(()->notifierPluginManager.findById(notifierId)).flatMap(this::convert_migrated)).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(()->notifierPluginManager.findById(notifierId)).flatMap(this::convert_migrated)).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
})).switchIfEmpty
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)));
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId)))).onErrorResumeNext
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(identityProviderPlugin));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(identityProviderPlugin));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, auditId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findById(referenceType, referenceId, auditId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(domain, auditId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(findById(domain, auditId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pluginManager.getAll())).map(this::convert).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pluginManager.getAll())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(pluginId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin resource = pluginManager.findById(pluginId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get bot detection plugin : {}", pluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get bot detection plugin : " + pluginId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = pluginManager.getSchema(pluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for bot detection plugin {}", pluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for bot detection plugin " + pluginId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.monoToSingle(updateDefaultIdp_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<IdentityProvider>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<IdentityProvider>>)(isEmpty)->{
    if (isEmpty) {
        logger.info("No default idp found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToSingle(identityProviderManager.create_migrated(domain.getId()));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(identityProviderManager.create_migrated(domain.getId()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(emailTemplateService.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Email::isEnabled))).blockingIterable
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(factorPluginManager.getAll())).map(this::convert).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(factorPluginManager.getAll())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(factorId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin authenticator = factorPluginManager.findById(factorId);
        if (authenticator != null) {
            emitter.onSuccess(convert(authenticator));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get factor plugin : {}", factorId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get factor plugin : " + factorId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = factorPluginManager.getSchema(factorId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for factor plugin {}", factorId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for factor plugin " + factorId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Boolean>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Boolean>>)(consistent)->{
    if (consistent) {
        return RxJava2Adapter.monoToSingle(findMembershipPermissions_migrated(user, permissions.referenceStream()).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findMembershipPermissions_migrated(user, permissions.referenceStream()).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(isApplicationIdConsistent_migrated(applicationId, domainId, environmentId, organizationId)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(isDomainIdConsistent_migrated(domainId, environmentId, organizationId)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | obs.add(RxJava2Adapter.monoToSingle(isEnvironmentIdConsistent_migrated(environmentId, organizationId)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all((consistent)->consistent)).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))).doOnSuccess
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all((consistent)->consistent)).onErrorResumeNext
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).all
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all((consistent)->consistent)).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle((application)->{
    if (domainId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)));
    } else {
        return RxJava2Adapter.monoToSingle(isDomainIdConsistent_migrated(application.getDomain(), environmentId, organizationId));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isDomainIdConsistent_migrated(application.getDomain(), environmentId, organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    if (environmentId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT));
    } else {
        return RxJava2Adapter.monoToSingle(isEnvironmentIdConsistent_migrated(domain.getReferenceId(), organizationId));
    }
}));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(isEnvironmentIdConsistent_migrated(domain.getReferenceId(), organizationId));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono((Single<Map<Membership, Map<Permission, Set<Acl>>>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<String>, Single<Map<Membership, Map<Permission, Set<Acl>>>>>)(userGroupIds)->{
    MembershipCriteria criteria = new MembershipCriteria();
    criteria.setUserId(user.getId());
    criteria.setGroupIds(userGroupIds.isEmpty() ? null : userGroupIds);
    criteria.setLogicalOR(true);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
        if (allMemberships.isEmpty()) {
            return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
        }
        return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
    }).apply(z)))));
}).apply(v))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList()))).collectList
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) == entry.getKey().external())).map((entry)->convert(entry.getValue(), expand)).toList()).onErrorResume
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) == entry.getKey().external())).map
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<IdentityProviderPlugin>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to list all identity provider plugins", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex)));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex)));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(identityProviderId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin identityProvider = identityProviderPluginManager.findById(identityProviderId);
        if (identityProvider != null) {
            emitter.onSuccess(convert(identityProvider));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get identity provider plugin : {}", identityProviderId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get identity provider plugin : " + identityProviderId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = identityProviderPluginManager.getSchema(identityProviderId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for identity provider plugin " + identityProviderId, e));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String icon = identityProviderPluginManager.getIcon(identityProviderId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for identity provider plugin " + identityProviderId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(values.keySet())).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList()).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(values.keySet())).flatMapMaybe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (appId)->RxJava2Adapter.monoToMaybe(applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))).toList()).subscribe
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(domainService.patch(domain.getId(), patchDomain));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, auditId));
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(domain, auditId));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen(new RetryWithDelay(3, 5000))).block
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(true));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return RxJava2Adapter.monoToSingle(migrateScopeSettings_migrated(updatedTask));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(migrateScopeSettings_migrated(updatedTask));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<SystemTask>>toJdkFunction((err2)->{
    logger.warn("SystemTask {} can\'t be created due to \'{}\'", TASK_ID, err2.getMessage());
    return RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(systemTask.getId()).single());
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(systemTask.getId()).single());
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Application, Single<Application>>toJdkFunction((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
}).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(app));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((err2)->{
    logger.error("Unable to update status for migrate scope options task: {}", err2.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((err2)->{
    logger.error("Unable to migrate scope options for applications: {}", err2.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(false));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(attempts).flatMap
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(reporterPluginManager.getAll())).map(this::convert).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(reporterPluginManager.getAll())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(reporterId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin reporter = reporterPluginManager.findById(reporterId);
        if (reporter != null) {
            emitter.onSuccess(convert(reporter));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get reporter plugin : {}", reporterId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get reporter plugin : " + reporterId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = reporterPluginManager.getSchema(reporterId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for reporter plugin {}", reporterId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for reporter plugin " + reporterId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(resourcePluginManager.getAll())).map((plugin)->convert(plugin, expand)).toList());
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(resourcePluginManager.getAll())).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(findById_migrated(resourceId));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin resource = resourcePluginManager.findById(resourceId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get resource plugin : {}", resourceId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get resource plugin : " + resourceId, ex));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = resourcePluginManager.getSchema(resourceId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for resource plugin " + resourceId, e));
    }
}));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String icon = resourcePluginManager.getIcon(resourceId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error has occurred when trying to get icon for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error has occurred when trying to get icon for resource plugin " + resourceId, e));
    }
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (Domain ident)->RxJava2Adapter.monoToCompletable(updateDefaultReporter_migrated(ident))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(reporterService.createDefault_migrated(domain.getId()).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(reporterService.createDefault_migrated(domain.getId()).then());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organization, userId)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organization, userId)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(new Organization(), newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(new Organization(), newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(organization, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(organization, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(new Organization(), newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationUserService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", new User(), null, null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", new User(), "simple", null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", user, "Test123!", null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", user, "Test123!", null)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(domain, id, updateUser)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(domain, id, updateUser)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.resetPassword_migrated(domain, user.getId(), password, null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.resetPassword_migrated(domain, user.getId(), password, null)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.resetPassword_migrated(domain, user.getId(), password, null)).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | lenient().when(RxJava2Adapter.monoToMaybe(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | lenient().when(RxJava2Adapter.monoToMaybe(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit"))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(user)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | lenient().when(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | lenient().when(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT))).thenReturn(RxJava2Adapter.monoToMaybe(Mono.just(role)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, CREATE)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(null, of(ReferenceType.APPLICATION, APPLICATION_ID, ORGANIZATION, READ)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ, CREATE))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.findAllPermissions_migrated(user, ReferenceType.ORGANIZATION, ORGANIZATION_ID)).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | when(applicationRepository.findAll_migrated()).thenReturn(RxJava2Adapter.flowableToFlux(Flowable.fromArray(appNoSettings, appNoOauthSetings, appNoScopes, appScopes, appScopesWithOptions)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.isAlertingAvailable_migrated()).test
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(cut.isAlertingAvailable_migrated()).test
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authorizationCodeRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(requestObjectRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(loginAttemptRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(permissionTicketRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authenticationFlowContextRepository.purgeExpiredData_migrated()).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | applicationId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.APPLICATION, applicationId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | applicationId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.APPLICATION, applicationId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | domainId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.DOMAIN, domainId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | domainId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.DOMAIN, domainId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | environmentId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.ENVIRONMENT, environmentId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | environmentId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.ENVIRONMENT, environmentId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | organizationId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.ORGANIZATION, organizationId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | organizationId != null ? RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(user, ReferenceType.ORGANIZATION, organizationId)) : RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.zip(permissionObs, (objects)->{
    Map<ReferenceType, Map<Permission, Set<Acl>>> permissionsPerType = new HashMap<>();
    permissionsPerType.put(ReferenceType.APPLICATION, (Map<Permission, Set<Acl>>)objects[0]);
    permissionsPerType.put(ReferenceType.DOMAIN, (Map<Permission, Set<Acl>>)objects[1]);
    permissionsPerType.put(ReferenceType.ENVIRONMENT, (Map<Permission, Set<Acl>>)objects[2]);
    permissionsPerType.put(ReferenceType.ORGANIZATION, (Map<Permission, Set<Acl>>)objects[3]);
    return permissionsPerType;
}));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return RxJava2Adapter.monoToSingle(service.search_migrated(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE)));
})).onErrorResume
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(service.search_migrated(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE).then(formService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE).then(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser))).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->organizationUserService.resetPassword_migrated(organizationId, existingUser, password.getPassword(), authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE).then(identityProviderService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE).then(groupService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<User>, SingleSource<Page<User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(member));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE).then(roleService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE).then(entrypointService.delete_migrated(entrypointId, organizationId, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE).then(tagService.delete_migrated(tag, organizationId, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).then(organizationService.findById_migrated(organizationId).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE).then(domainService.delete_migrated(domain, authenticatedUser))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(entrypointService.findAll_migrated(organizationId).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain)))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToSingle(entrypointService.findAll_migrated(organizationId).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, Acl.UPDATE))).collect(Collectors.toList()))).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, Acl.UPDATE))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return RxJava2Adapter.monoToSingle(applicationService.search_migrated(domain, query, 0, Integer.MAX_VALUE));
    } else {
        return RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE));
    }
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applicationService.search_migrated(domain, query, 0, Integer.MAX_VALUE));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE));
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((Boolean __)->filterApplicationInfos(application))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.create_migrated(domain, newApplication, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(applicationService.create_migrated(domain, newApplication, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(domain, newIdentityProvider, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(domain, newIdentityProvider, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.create_migrated(domain, newCertificate, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (schema)->RxJava2Adapter.monoToSingle(certificateService.create_migrated(domain, newCertificate, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchRoles_migrated(domain, query, page, size)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(searchRoles_migrated(domain, query, page, size))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(roleService.create_migrated(domain, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(roleService.create_migrated(domain, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchUsers_migrated(ReferenceType.DOMAIN, domain, query, filter, page, size)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(searchUsers_migrated(ReferenceType.DOMAIN, domain, query, filter, page, size))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain)->RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(domain, newExtensionGrant, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(domain, newExtensionGrant, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))))))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, newScope, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, newScope, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build()))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.create_migrated(domain, newGroup, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(groupService.create_migrated(domain, newGroup, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, newEmail, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, newEmail, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.create_migrated(domain, newReporter, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(reporterService.create_migrated(domain, newReporter, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList()))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain1)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain_migrated(domain))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.create_migrated(domain, newFactor, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(factorService.create_migrated(domain, newFactor, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain_migrated(domain))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.create_migrated(domain, newResource, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(resourceService.create_migrated(domain, newResource, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findAll_migrated(ReferenceType.DOMAIN, domain, true).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList()))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (___)->RxJava2Adapter.monoToSingle(botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(domain, newBotDetection, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(domain, newBotDetection, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(domain, botDetection, updateBotDetection, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(domain, botDetection, updateBotDetection, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE).then(botDetectionService.delete_migrated(domain, botDetectionId, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<PatchAlertTrigger, Single<AlertTrigger>>toJdkFunction((patchAlertTrigger)->RxJava2Adapter.monoToSingle(alertTriggerService.createOrUpdate_migrated(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (patchAlertTrigger)->RxJava2Adapter.monoToSingle(alertTriggerService.createOrUpdate_migrated(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).then(alertNotifierService.delete_migrated(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.update_migrated(domain, resource, updateResource, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(resourceService.update_migrated(domain, resource, updateResource, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE).then(resourceService.delete_migrated(domain, resource, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.update_migrated(domain, factor, updateFactor, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(factorService.update_migrated(domain, factor, updateFactor, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE).then(factorService.delete_migrated(domain, factor, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(reporterService.update_migrated(domain, reporter, updateReporter, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(reporterService.update_migrated(domain, reporter, updateReporter, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, email, updateEmail, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, email, updateEmail, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE).then(emailTemplateService.delete_migrated(email, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Group, MaybeSource<Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(group1));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.delete_migrated(ReferenceType.DOMAIN, domain, group, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(member));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(group1.getRoles()));
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(group1.getRoles()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain1)->RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (domain1)->RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE).then(formService.delete_migrated(domain, form, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.patch_migrated(domain, scope, patchScope, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(scopeService.patch_migrated(domain, scope, patchScope, authenticatedUser))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, scope, updateScope, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, scope, updateScope, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE).then(scopeService.delete_migrated(scope, false, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(domain, extensionGrant, updateExtensionGrant, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(domain, extensionGrant, updateExtensionGrant, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE).then(extensionGrantService.delete_migrated(domain, extensionGrant, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.updateStatus_migrated(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(userService.updateStatus_migrated(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.delete_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->userService.resetPassword_migrated(domain, user, password.getPassword(), authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(userService.sendRegistrationConfirmation_migrated(domain, user, authenticatedUser))).subscribe
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.unlock_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | flowableToFlux | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser_migrated(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient_migrated(domain, user, clientId);
})).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<ScopeApproval, Single<ScopeApprovalEntity>>toJdkFunction((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope_migrated(scopeApproval.getDomain(), scopeApproval.getScope()), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))))).apply(e))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope_migrated(scopeApproval.getDomain(), scopeApproval.getScope()), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))).then())).subscribe
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()).cache());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()).cache
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single()).cache());
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single()).cache
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(endUser.getRoles()));
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(endUser.getRoles()));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (endUser)->RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.fluxToObservable(Flux.fromIterable(user1.getFactors())).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
})))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(user1.getFactors())).flatMapMaybe
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | (enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.delete_migrated(credential)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return RxJava2Adapter.monoToSingle(userService.enrollFactors_migrated(user, enrolledFactors, authenticatedUser));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.enrollFactors_migrated(user, enrolledFactors, authenticatedUser));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.just(user1));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (endUser)->RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.revokeByConsent_migrated(domain, user, consent, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE).then(roleService.delete_migrated(ReferenceType.DOMAIN, domain, role, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.update_migrated(domain, certificate, updateCertificate, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (schema)->RxJava2Adapter.monoToSingle(certificateService.update_migrated(domain, certificate, updateCertificate, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE).then(certificateService.delete_migrated(certificate, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(domain, identity, updateIdentityProvider, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(domain, identity, updateIdentityProvider, authenticatedUser))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE).then(identityProviderService.delete_migrated(domain, identity, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE).then(applicationService.delete_migrated(application, authenticatedUser))).subscribe
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(domain, application, authenticatedUser)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(domain, application, authenticatedUser))
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, permission, Acl.UPDATE))).collect(Collectors.toList()))).then
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | (permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, permission, Acl.UPDATE))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, permission, Acl.UPDATE))).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(applicationService.patch_migrated(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((Map<ReferenceType, Map<Permission, Set<Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))))))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (patch)->RxJava2Adapter.monoToSingle(applicationService.patch_migrated(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((Map<ReferenceType, Map<Permission, Set<Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, application, newEmail, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, application, newEmail, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, application, newForm, authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, application, newForm, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList()))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList())
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(resourceService.findByDomainAndClient_migrated(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))))).flatMap
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (application1)->RxJava2Adapter.monoToSingle(resourceService.findByDomainAndClient_migrated(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
    return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
})));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList()).zipWith
1 | RxJava2Adapter | fluxToObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | (hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findByApplication_migrated(ReferenceType.DOMAIN, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow))))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)))).map
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser))
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))));
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | (n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
    return resourceEntity;
})));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE).then(formService.delete_migrated(domain, form, authenticatedUser))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, application, email, updateEmail)))))
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | (__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, application, email, updateEmail))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE).then(emailTemplateService.delete_migrated(email))).subscribe
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToMaybe | METHOD_INVOCATION | final Maybe<Request> maybe = RxJava2Adapter.monoToMaybe(socialAuthenticationProvider.asyncSignInUrl_migrated(buildRedirectUri(request, identityId), RandomString.generate()))
1 | RxJava2Adapter | maybeToMono | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).block
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | fluxToFlowable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).blockingForEach
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | (err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))));
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(Mono.error(ex));
1 | RxJava2Adapter | completableToMono | METHOD_INVOCATION | (y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then());
}).apply(y)))
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(Mono.empty());
1 | RxJava2Adapter | monoToCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then());
1 | RxJava2Adapter | IMPORT
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<List<String>> organizationPermissions = RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | RxJava2Adapter | monoToSingle | METHOD_INVOCATION | final Single<List<String>> platformPermissions = RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.PLATFORM, Platform.DEFAULT).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | RxJava2Adapter | singleToMono | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})).map
1 | RxJava2Adapter | IMPORT
